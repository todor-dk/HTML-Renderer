NodeId : 0
NodeType : 9
NodeName : #document
BaseUri : data:text/html,chromewebdata
OwnerDocument : null 
ParentNode : null 
ParentElement : null 
FirstChild : 1
LastChild : 2
PreviousSibling : null 
NextSibling : null 
NodeValue : === null
TextContent : === null
ChildNodes : 2 : 1, 2
ChildElementCount : 1
FirstElementChild : 2
LastElementChild : 2
Children : 1 : 2
URL : data:text/html,chromewebdata
DocumentURI : data:text/html,chromewebdata
Origin : null
CompatMode : CSS1Compat
CharacterSet : == VVRGLTg=
ContentType : text/html
DocType : 1
DocumentElement : 2

NodeId : 1
NodeType : 10
NodeName : html
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 0
ParentElement : null 
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 2
NodeValue : === null
TextContent : === null
ChildNodes : 0 : 
Name : html
PublicId : === empty
SystemId : === empty

NodeId : 2
NodeType : 1
NodeName : HTML
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 0
ParentElement : null 
FirstChild : 3
LastChild : 28
PreviousSibling : 1
NextSibling : null 
NodeValue : === null
TextContent : == CiAgCiAgCiAgbW9iaWxlLnR3aXR0ZXIuY29tCiAgLyogQ29weXJpZ2h0IDIwMTQgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAgIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKICAgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4gKi8KCmEgewogIGNvbG9yOiAjNTg1ODU4Owp9CgouYmFkLWNsb2NrIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBWUFBQUJWN2JOSEFBQUZvMGxFUVZSNFh1M2NTMU9UVnh3RzhIYTZkc1pOdC8wUzdvelgrd1VTR0tON3ljSXZrSjJPaU5jZGJ2d01mQUJYTFMxVnZMWEZTTVdVZ0ZBaDFvSklDQ0VHcThVRnA4K2ZQdTg3SjRTM3ZybWN2SWZPY2VhWk1LT1NuTi84ei8rYzk1WXYzQjhYRnhjWEZ4Y1hGek5SWjg5K3JaTEpKTktMRENBWmRmcDBIaW5pNXpXSi9Jems1ZStRQWY3YnBQemYveXZLTGtEMEkxbEFyQ09xd2F6TDcwRDY1WGR1YjVSVWFnY0Ewa0RKQ1lDSjhIZW41YjIyRDh5NWN6dlZtVE45Z0NrUndIendYdktlOHQ3MndpajFKV0I2QUZNSUJEQVBWWkRQSUovRnRoN3pEV0FlRVNENjRMUElaN0lDQndBeFpCRlJsbVVSaVVXTGsweW11Q3dyRzhOdFF5cUtLZlVWWUc0UndQN2dzOHBuYmhzT0FPNGdhcHZsVGx1UXpGYU8rVW95M25OTUFheXVybGFsY09xVUthU1V1ZFVLVGE5ZFFOL3QzbTBFaVdPSXRYNmZ3Nlc4blVDRHlGSkhoNWt0QU1iVXVoMHlONEh0QlBwV2dHSXhOWVFVVFNCaFRDM1pjY3ZXM1FOb2F3VVI2QWZrN3A0OVpwQXd0dVlQUEhsc0ZVa0ZFZWhIQUEwank2MUd3dGhrak0xVVR4OEJJcTJnSWVEY1ErN3YzYXRLbloydHJxSyt4cy9uOEpSRlZCVUVKTCtDQkdnWVFEL3QzNjlXV29tRU1UWjBQZ2tBYVE4ZzZpazJSSnlIKy9hcHh3RDZCU20zdHBMUzlRUHhUR0RVRlRRa1RaclQ2d0dBcElKR2tLY0hENnAzOFhqTHpreldmdzZaQURiMG9IdkFFYUJIQVBwWktvaEF2N1lTQ1dPdXAzcjZDUkJwQlgzdjlSK3BIdVN4QUIwNG9ES0k0RWpHRGgxcURSTEdYQTlRMWlhZ1lRRmlneGFnSndSNkJwd3hwdElzRXNZYytyb1ZBTmFqQmhwa2N4YWcrM3FEQnM1VFJNZDVqb3dmUHR3czBycU1QVXoxSkFrUWJROGkwRjF2QldQL0dRSE9xRXd2Z1dHeXdQbU5XVzBHQ1dNUEE5UnJBOUNnMzM5WVBRUjZBaHdCR3R1RU00N2tqaHhSRTBqRFNCaDdHS0FCQzRDcUd6U0JaSHBsTkNEQTZQR0JYaHc5cXQ0bkVvMEFEWVFCeXRnQ0pMdm5COTd5THMyWlFNK1E1OVdWNCtOTThuV3FFU1NNUGN3T09tOEJFQTh2MktDNVFjeElneFlnVHEwc2dTWThIRmFQNEV3anZ4ODdWaTlTUGd4UTBRWWdIcUQ2cTljSUsyalU3ejJzSElZNE5VQXp5Ri9oa1lwaHB0aWFEVUJqRnk2b1lhLy9hTHRuQXJIbjFGYU9qdk1Ta2RmWnNFZ1krN1lCcXBUTEtudnhvbnJJL2pQaVRTL2lqQlBIQXhLWUZ4ck9ORExENUk4ZjMzajlBS1FRUUhaT3NhVnIxd1NsQm1rY1NON2h4YWdHbFB0TTVYZzRzd1I2eFh3R3FXaG5rMmFXcjEvZkVtbmkwaVVmaU5QTFg4NG5RK0w4d2J3K2NlSy9rUEtHbG5uelNGTkE4bmJQT1FCTmFsT0tPRXcxRGlNd2Z1YVFqMTFkRFM3ejNDaEdtVklBMG5SdnI4b0NhS1B2Yk1KNXljeHFPTE9iS3VkUDRzeWZQQ21wUmNMWURSeHFtTWxLQU5MTTVjdlNmL3pxbVVJNHJRaWs5WndBbkRua0RiS0EvSzBqWWV5aEQxWnRSbm9GSkt4U1d1VndXakhFRVJqaXlDc3JSOE41aXl1M2k0aVBoTEViT04xaE51VUFwTmRYcmdBb29ISnFnSFFjaERpU0FwRStkWFh4ZEllQkUyYW04KzdHalMyUjVvQlUxWkNEcDVXZkJSMkh3ZVZ0dWVhV05YREtOWHFrZVNBUlJsdXRpTVA0MDRwWkpKQ0hVMFJ3S2FuZjhFbDc4NmtFSUwwQkVpc25zT2ZvT0pJQ0l6akxTTG1qWTVmRmwzM0NaL1htelNDa3dNcVpENWhXZ2tPZ25JRUxoL1lodmIxNlZjMFJxWGExWW1weDFFb2lrVFp3NlRuYXZBOUFXdWpwRVJnZGgwQis1YkFwKzcybnBCS0pIUVp1WHJBUHFYRDdkbERsRUlkVncrQkdDS21lUGdPM3Y5aUhCSnpheW1GMG5DVU5COWYzQzZxN2U2ZUJHNmpzeW9mejU3VjlEck9wSVJjMEdNa0tVdW5zN0RGd0M1NmR3WUdudnBUWDloekd3eW5GNDd3Rno4Qk5uTFlHeDFTY1VuNjRXbFhqbE9QeHhZOFlrNkhiZ08xSDBuc09vK09zVlJLSm1ORWJ5VzNQR3BBQWhHZzlod0ZPeWoyS1FDUi9Xakc0VGVhV2U1aGxFNUxBbEJHOGJ2VXdpM3NjNmxOMzkwYmxHTUJ4RDlTNVJ6SU54RDNVNng0TGQxOHM0TDZhd3Q2NEx6ZHhYNC96RHhqOS9JRXVlQXZoQUFBQUFFbEZUa1N1UW1DQykgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFDdmxCTVZFVUFBQUQvZ0lEL2dJRC9WVlgvVlZYL1RrNy9ZbUwvWUdEL1ZWWHpVVkgvWFYzMlVsTC9XMXYyVDAvL1dGajNVbEwvVWxMM1VGRC9XRmp3VGs3L1UxUC9VMVB4VFUzL1YxZnlUMC8vVkZUelRrNy9VbEx3VFUzL1ZWWDBVRkQvVkZUL1ZGVDFUazcvVlZYL1ZGVC9VMVB5VDAvL1ZGVC9VMVB4VEV6L1VsTHVTMHYvVTFQL1VsTC9WRlQwVDAvL1UxUDBUazcvVkZUL1UxUHVUVTMvVWxMelRVMy9VMVAvVTFQd1RFei9VbEwvVTFQdlRVMy9VMVAvVTFQeFRVMy9VMVB6VGs3MFRrNy9VMVB5VGs3L1UxUHpUazcvVTFQL1UxUDZVRkQvVWxMelRrNy9VMVAvVTFQeVRrNy9VMVB0VEV6L1VsTHlUVTMvVTFQL1VsTC9VbEx4VGs3L1VsTHZURXovVTFQdlRVMy9VMVAvVTFQL1VsTHhURXp4VFUzelRVMy9VbEs3T3p1OE96dThQRHk5UER5K1BEeStQVDIvUER5L1BUM0FQRHpBUFQzQlBUM0JQajdDUFQzQ1BqN0RQVDNEUGo3RVBqN0VQei9GUGo3RlB6L0dQajdHUHovSFB6L0hRRURJUHovSVFFREpQei9KUUVES1FFREtRVUhMUUVETFFVSE1RRURNUVVITlFVSE5Ra0xPUVVIT1FrTE9aV1hQUVVIUFFrTFBaV1hRUWtMUlFrTFJRMFBTUWtMU1EwUFNabWJUUTBQVFptYlVRMFBVUkVUVlEwUFZSRVRWYUdqV1JFVFdSVVhYUkVUWFJVWFhhR2pZUlVYWlJVWFphR2phUlVYYVJrYmFhV25iUlVYYlJrYmJhV25jUmtiZFJrYmRhV25lUmtiZVIwZmZSa2JmUjBmZmEydmdSMGZnYTJ2aFIwZmhTRWpoYTJ2aVIwZmlTRWppYTJ2alNFampiR3prU0Vqa1NVbmtiR3psU0VqbFNVbmxiR3ptU1VubWJHem5TVW5uU2tyb1Nrcm9iVzNwU2tycVNrcnFTMHZxaTR2clMwdnJpWW5yaTR2c1MwdnNpWW50UzB2dFRFenVURXp2VEV6d1RFendUVTN3Nk9qeFRVM3g2T2p5VFUzeTZPank2ZW55OHZMejgvUDBUazcxVGs3MlRrNzJjbkwzVDAvM2NuTDRUMC80Y25MNVQwLzVjM1A2VDAvN1VGRDhVRkQ5VUZEL1VsSkpXWldnQUFBQVlYUlNUbE1BQWdRR0RBME5FQlVXRmh3Y0hSMGZIeUFnTkRRM09EZzlQVDQrUWtKRFEwbExTMTVmZEhSMWZIeUVoSVdHaUlpSmlZdVZsYWlvcWF1cnJLK3Z1TG01dTd1N3dzTEV4TVhHeHN6TTB0VFUyZG5hMnQvcDdPenQ3ZlB6K2Z2Ky92NytqRCt0alFBQUNZaEpSRUZVZUFIczFjRnF3akFjeC9HMUZSMGlJcUtJRkZFVUhLSlFLbElSRktHVWlsU0tWQ21pSHJLcENEdVBIY2JBOTl4dGpBMStiN0hMam1Na2FlSXUrVHpCbDE4Qy94dEZVUlJGVVJTRlE2YmM2ZzBuczhVcTN1M2kxV0kyR2ZaYTVjei90S1FhZlcrTlg2MjlmaU4xMVJpajFwM3Y4YWY5dkZzenJwUlRHV3hBWlRPb3lLOHBkcFpnc093VXBlYVV4Z1NNeUxna0xhYzZCWmRwVlVwTzNRTTNyeTQ4SnpkQ0lxT2MwQnk5dlVWQzI3WXVyc2NNSVVCb2lwckhJaENDV0VKR3l2c1F4aGZ3azVveEJJcWJDWE0wbTBBb1ltdUpycWdENFJ5RHZ5ZnRRZ0kzemR1VERTQkZjTXZYVTRnZ1NWVGcyaWVDTkZHVzQvOEVrQ2hnL2tlR0M2bGNnNjFIYzhEZzdjYzc2RGthVTVBTm5xQW5saUtiNlY0UXJxQjdsaUxDY0VYeU1maUNIcDQvUUMzTzAvYm9QbmlERGk4TVJiNU9HV1NCTitod09MNHlGRmwwUFNZQi8wTEgwK1VUdEloSjlXQWhFZ1NkVHVmTEYyaUZOSTkyQnlSYTZQeklVUFROaWgyMXVGRzFjUUMvS2V3bjZHV2gwQmRlU3UxTktSUktTMitFVXVpRjJDS2w3VVdSM1dhYk5IRm1rODRrMldTVG5kbXNHeWZaTWM0MnppWW1KaG96Ym8waHhTVnNNWVJZRmhFRUZXdDdVYXUxVjNxK2hmK1RzMlpYTXNtTW5Iayt3WS8vZWM1NXpqbi9kL0hldWM0RG1xVWcvNHByMFhYbk8rMVp3cDJRUDVCMUxUcnIrRDRsSEtDM2FROEJGSHhuM2JYSTZVMzdPdUZQS0JBVUk0VS8zYjZ5SGY0VENJcXJoM3crdndDUVZIUXJtdjRUY1lGd0ozVEhIeElrU1lxWkxrVVhwdjcvRUM0UVRtcmYzSjFRU0F3RHRGaDJLWnIyZjNTT0d6UVhDTndOQ2JJa3g1THBxanZSdVNuL2RiY0lidy81ZllHUUlONlQ1RVE2clg3cVNuUnI4cS9mY1lMaTJ2YXo4NzZBSUlyMzRvbEVTbEV6emIrSWl6bytFZlFtSndpZStXQVFMWFF2R2srbWxFd21hN2tSdlRIeHY1ZHdKM1I3UGlBSW9peEhrOG1VbW5Fcm12UjdmSm9YTkhzYnAzUlFrTUxSYUh3NUJZNm1hVis0RUoyZThQSzV4ZzJhcGFDSWlKWk9KSmZWYkRhclpYTnRaOUUxK3pmUkVjSU5vaTBVWEpCak1icGlxL0JvdVp6V2NSWWRzUVdkNEFmTllZNHRMT0FRaWlkVmRWV2pucHl1ZitVb09tRUx1c1FQOGdmUTB3dXluRUJDcXdEbGRIaDB3MUYweWM1ejZDWTNhTTZQT1NaSXNyeVlTQ3RvSWF5WFhzZ2JodDUxRU4wOFpBTTZTcmhCUGw5SUZERHBGeGZUNlF4YUd2a1VVRWJSNkR1SWp0cUFUdkdEL0w2N29paEY1TVRTVWxyTmFEb0tITjBvRnMydnlkUTZaWHMxNDEreXU0SVFGdW1lWDFMWDF2S2FSajJHVVFTbzlNMS92cVpkOVNBaFAwQmhLWUVPVWpKcldyNmdGM1RxMlRCTnMvU1lUS21yNDU0WndnK2F4NkFYby9GNE1xa3FhM2w0REpZUE9HYWxza3VtMU13WTZMQUhJQVFrU2hJR3E2S2doZkk2V3k4RVZDcVZLcFh5dDJSeUhSNEQvYzhEVUNBZ1JpSlIzRHh3OVVCTEc2eWZUWGpNVXFWYXJYMUhKdGF4TWRCSkQwQkJRWWhFcEVRcXFXQnM1S2pJK0NlZUtrRFRSQ2ZIUUdjOEFOR0FaRG1lU3VHWXBoN1dQMFVtcXRVYXRjYjNaRUtkNFg5djJDVVVCQWhqUTFsWndkZ29JQjU0aGh6a1U2azFHdlhtRDY3ZkhwYzhBQW5oU0NRbUp4UUVsRjFmM3lpQU0vU1V3VUZBOVVhejJmelI3VFM3N0FWSUFDaVd4aW1FTVZZb0ROZUw1Vk9EaDNLc2htVXZ1andHdXVJQktCU095QUFwNmlydUhSczREdW51TW9mdHpFQ1d0YlZsL1VSczZzb1k2QzBQUU8rS21QUm9JVXg2QkFTUXVkOC9hQ0RMYWdMVWF2MXM5d002QnJyaEFlakplMUVKUGEycTJieW1iMnpRZkVieDFGays4TFRhTnFJYlhvSmVQdDhYeFpNSlZWV3lHS3ZZODhQMVFqdFhXZjhBWkcyMUhyVGJyVitjUVR4TDl1cjV2dWo5WkFvTGx0SHpCbGFzc2hjUVBBMTRtaXlmZHJ2VGVlYXdaSnhOL2Z1VEE2TGxsSnJWQURLS0ZSUTgxUnJ5b1IyOWhRS28xZWxzYno5emJPckx4Q1BSQitvcU5wbHh2MWl1bFBmeW9acmhCb01HK1d3RDFQM1ZhZHRmSkY2SlBxUnpvM0Fmb2lvN0VKdDFpeGFMcDQxOEhuWlIveFpkSEFPZEo5NkpOR3g2YzdOQzQ2RWUxS2gvT2dnSStYUzNkM1pla0FOMTNubTRjb2crV3NjZTI5eGtHeDdGTnJ3MUJJSHpjSHVudTdQVGUvUmk2bkE5U2J3VFBmMTR2V0NXMlg1bkc3N0o4a0UvZHhBUERhalg2L1YvSTZONmJReDBqSGdwK3NRc2xzdXNmNXFzZlNpSWN0b1VOT1QwK29OOTBUSHVLNnlENkROY0VSdXNmeG9XMis1REQyc2ZnUHI5L21EdytPWGtLK3dNOFZiMGVhbTZOeThzeG5rQVVCdWdJUWVlM21BdzZJOUVNL2JQSUc3UjB3T2llbjAwTUZwMFlBdzVYZlJ6cjl2clBScjB3ZG5kM1gwMTZSbUVoNklIOWNjQjBaZVVNMXF2djdzNTM5WW1naUNNeDVTK0tQNFJGVVJFQktGYUZTcWlTTFdDVlZTd0JkRUtJcjVRUDZJZ3RZcllpTmU3dW5wdWRsZVdwSGxyeGRSdjRjd09teVlWbVN1ZGc2WHpDWDdNUG5ONXNqc3orUDBCb0NYSXorREFzaXpQaWtCMFQrYXZORVAwbXZ3UDhkRDNCdzVzbVdnUUJ6SlVGQ0ZIVjVqTEJpR2lOK1IvSVBEM0FyL1BwR2Nzc0N6N25DTlBvZFFHWFRZdzF6RWlSRy9qOTVuMFBCQjAwRFB5S09BcDlRWmR4L0EyWHlCSDVIOUlQd0NFY2c0RkZzOUxsV3RhcXdmTWxaNGcwVHZTYzhCQlFiZWluaUUvR2VTbmhORG1vdHlsSjA5RStVRUJZWDBCelVmQVFRR2hmQUJJSzIxT3lWMEw4MFFmeVArOGgxaEduaGJWRitBVU9mSm9iWjZOU1Y2YzgwVGtmMGpQK0gybStxSUVLZUF4VnlXZUZwajR1VVhVWFFrL1lMRytTTTVaRVdoSzVESEhHLytKeDRKRXY0Wnl0RUwrQjNGSVB3V0VXcVB6TXVhUjhQTVVUOVQ5dEJSL1VHTzVGMEUrQ25pc1BTL3pnTWNUZGJlSVZzbi9vSDVBejNtUUR5V29iVjhjRVgvaTVJbldWMXNEL1dSNFhzUmpNRUUzK1VmZ1dvakkvMlN4dkVKOXRZSEhIWk43SnVlSjFpTlE3eXY1bjNCZU9lR1V4Z0xQclJvYUNYaWkzcmZvZjBKK0ZNb25DTnE0RTdLdEZqd1I4UXo1bnlobkF6VE8zWlZ2UnVHSmVsOUcvQThkbUduamdiblREU1p1eUJOaGZrYjhUNm1OQmh4bm5iOHUzOURFRTMzL3gvOW9Bd0ZFL3ZuK0Jodm4va2pINzN5Ny85RVdjYXozWit0cGl1T2lYMnp6UDhiaWlYbi9zQ25mTmxpUmFNVC9BSkJ6d1BQeXBIeGpaVlVpTmV4L3FMNmN2eVRmZWxxZHFCenlQNlNmenYxbVhjMjVsWWowd1ArMHJZUHdUdy9XMXI1Y2pjaEUvd004b09oWForcHI4SzVPcENrOWNGNytjbzB0OEpXSmduNU1JTHEyTDRFaGdUN3lCQngvZXl5Sk1ZcStDencvT2d2amlReWE5RzNJeitKRU1xTTQvWTcxbmNYRENRMHJiWGI4d2tSUzQxeWJkOGJUSDNoTGZ5UXcvYUhKdXNaS0R5VS9lTHNIUnBNcFNWTzdIOTZlYXNxT3Q4L3VqbWYyd0Y1ZkFKRGdpb1FFbDBqUW1vMGRlWUFuRjQ2bXY0Z2svVlV0S1MyemtWLzNNems5TXpjZjEvM016ODFNVHdxdCsva0xjNVc1UjVKb0d6MEFBQUFBU1VWT1JLNUNZSUk9KSAyeCk7Cn0KCmJvZHkgewogIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7CiAgY29sb3I6ICM2NDY0NjQ7Cn0KCmJvZHkuc2FmZS1icm93c2luZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIwNiwgNTIsIDM4KTsKICBjb2xvcjogd2hpdGU7Cn0KCmJ1dHRvbiB7CiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICBiYWNrZ3JvdW5kOiByZ2IoNjYsIDEzMywgMjQ0KTsKICBib3JkZXI6IDA7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgY29sb3I6ICNmZmY7CiAgY3Vyc29yOiBwb2ludGVyOwogIGZsb2F0OiByaWdodDsKICBmb250LXNpemU6IC44NzVlbTsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMTBweCAyNHB4OwogIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTsKfQoKW2Rpcj0ncnRsJ10gYnV0dG9uIHsKICBmbG9hdDogbGVmdDsKfQoKYnV0dG9uOmFjdGl2ZSB7CiAgYmFja2dyb3VuZDogcmdiKDUwLCAxMDIsIDIxMyk7CiAgb3V0bGluZTogMDsKfQoKYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAuNTApOwp9CgojZGVidWdnaW5nIHsKICBkaXNwbGF5OiBpbmxpbmU7CiAgb3ZlcmZsb3c6IGF1dG87Cn0KCi5kZWJ1Z2dpbmctY29udGVudCB7CiAgbGluZS1oZWlnaHQ6IDFlbTsKICBtYXJnaW4tYm90dG9tOiAwOwogIG1hcmdpbi10b3A6IDFlbTsKfQoKLmRlYnVnZ2luZy1jb250ZW50LWZpeGVkLXdpZHRoIHsKICBkaXNwbGF5OiBibG9jazsKICBmb250LWZhbWlseTogbW9ub3NwYWNlOwogIGZvbnQtc2l6ZTogMS4yZW07CiAgbWFyZ2luLXRvcDogMC41ZW07Cn0KCi5kZWJ1Z2dpbmctdGl0bGUgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgojZGV0YWlscyB7CiAgY29sb3I6ICM2OTY5Njk7CiAgbWFyZ2luOiA0NXB4IDAgNTBweDsKfQoKI2RldGFpbHMgcDpub3QoOmZpcnN0LW9mLXR5cGUpIHsKICBtYXJnaW4tdG9wOiAyMHB4Owp9CgojZGV0YWlscy1idXR0b24gewogIGJhY2tncm91bmQ6IGluaGVyaXQ7CiAgYm9yZGVyOiAwOwogIGZsb2F0OiBub25lOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAxMHB4IDA7CiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKfQoKI2RldGFpbHMtYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiBpbmhlcml0OwogIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwp9CgouZXJyb3ItY29kZSB7CiAgY29sb3I6ICM2NDY0NjQ7CiAgZGlzcGxheTogaW5saW5lOwogIGZvbnQtc2l6ZTogLjg2NjY3ZW07CiAgbWFyZ2luLXRvcDogMTVweDsKICBvcGFjaXR5OiAxOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cn0KCiNlcnJvci1kZWJ1Z2dpbmctaW5mbyB7CiAgZm9udC1zaXplOiAwLjhlbTsKfQoKaDEgewogIGNvbG9yOiAjMzMzOwogIGZvbnQtc2l6ZTogMS42ZW07CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBsaW5lLWhlaWdodDogMS4yNWVtOwogIG1hcmdpbi1ib3R0b206IDE2cHg7Cn0KCmgyIHsKICBmb250LXNpemU6IDEuMmVtOwogIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5oaWRkZW4gewogIGRpc3BsYXk6IG5vbmU7Cn0KCmh0bWwgewogIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsKICBmb250LXNpemU6IDEyNSU7Cn0KCi5pY29uIHsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQtc2l6ZTogMTAwJTsKICBoZWlnaHQ6IDcycHg7CiAgbWFyZ2luOiAwIDAgNDBweDsKICB3aWR0aDogNzJweDsKfQoKaW5wdXRbdHlwZT1jaGVja2JveF0gewogIG9wYWNpdHk6IDA7Cn0KCmlucHV0W3R5cGU9Y2hlY2tib3hdOmZvY3VzIH4gLmNoZWNrYm94IHsKICBvdXRsaW5lOiAtd2Via2l0LWZvY3VzLXJpbmctY29sb3IgYXV0byA1cHg7Cn0KCi5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBmb250LXNpemU6IDFlbTsKICBsaW5lLWhlaWdodDogMS42ZW07CiAgbWFyZ2luOiAxMDBweCBhdXRvIDA7CiAgbWF4LXdpZHRoOiA2MDBweDsKICB3aWR0aDogMTAwJTsKfQoKI21haW4tbWVzc2FnZSA+IHAgewogIGRpc3BsYXk6IGlubGluZTsKfQoKI2V4dGVuZGVkLXJlcG9ydGluZy1vcHQtaW4gewogIGZvbnQtc2l6ZTogLjg3NWVtOwogIG1hcmdpbi10b3A6IDM5cHg7Cn0KCiNleHRlbmRlZC1yZXBvcnRpbmctb3B0LWluIGxhYmVsIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKfQoKLm5hdi13cmFwcGVyIHsKICBtYXJnaW4tdG9wOiA1MXB4Owp9CgoubmF2LXdyYXBwZXI6OmFmdGVyIHsKICBjbGVhcjogYm90aDsKICBjb250ZW50OiAnJzsKICBkaXNwbGF5OiB0YWJsZTsKICB3aWR0aDogMTAwJTsKfQoKLnNhZmUtYnJvd3NpbmcgOi13ZWJraXQtYW55KAogICAgYSwgI2RldGFpbHMsICNkZXRhaWxzLWJ1dHRvbiwgaDEsIGgyLCBwLCAuc21hbGwtbGluaykgewogIGNvbG9yOiB3aGl0ZTsKfQoKLnNhZmUtYnJvd3NpbmcgYnV0dG9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC4xNSk7Cn0KCi5zYWZlLWJyb3dzaW5nIGJ1dHRvbjphY3RpdmUgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjI1KTsKfQoKLnNhZmUtYnJvd3NpbmcgYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDJweCAzcHggcmdiYSgwLCAwLCAwLCAuNSk7Cn0KCi5zYWZlLWJyb3dzaW5nIC5lcnJvci1jb2RlIHsKICBkaXNwbGF5OiBub25lOwp9Cgouc2FmZS1icm93c2luZyAuaWNvbiB7CiAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVnQUFBQklDQU1BQUFCaU0wTjFBQUFBK1ZCTVZFVUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzkvZjMvLy8vOS9mMzYrdnI4L1B6NysvdjcrL3Y3Ky92Nysvdi8vLy9yNit2bjUrZms1T1Q1K2ZuMTlmWDQrUGp1N3U3djcrL282T2p4OGZIMDlQVHk4dkx6OC9QajQrUDM5L2ZtNXVicDZlbmk0dUw4L1B6dzhQRHQ3ZTMyOXZiczdPemc0T0RoNGVIZTN0N2w1ZVg2K3ZyZDNkM3E2dXJmMzkvYzNOemJSRGY3Ky92YjI5dlcxdGJaMmRrK0Q5YXJBQUFBTFhSU1RsTUEvZUl4QmZBQ0hqM1l3aFlKRHlmT3RmcjJXSE9iZ0VxcGplbGxnWTZjNm1aTFYzTDJxS2pPWmVtTityVXY3TnBBQUFBQ2NVbEVRVlI0WHUyVTUzYmFRQlFHQXhpTWFRWlQzV3Q2cm5xbDl1S1c5djRQazVYRXNwRzRXRm1KL0dNZVlNNjM1Y3k3Lzh5ZVBYdjIzTjd1eG5Od2RIU3dFMUVOb0xZTFR6NE5rTTd2UUhRRmhLdjRubFFDQ0lsVWJGRU9YSEp4UFZWWVVZM25LU1NwS0ZtSUpicUFOUmR4UEljblRIUnlHRVBVQWdhMG9udXk0Q01iMVpNNUJoL0htWWlpR3dod0U4MVR2SVlBMThWSW9rdlk0REtLcDFTQkRTcWxDS0l5SUpUNVBVMUFhZkwzRlZDNHExdURMZFM0KzRyQ1hkMDZiS1hPMjFmS2R4Y05LRnpWelVGUTlLb0RKUmVocjB6MHRCZ0JwY3JmVnlaYXZBeE03dW8yQUJITk84czJOVFc0KzhwRXM0SFVNeFMrNnJZQUVaRkJZbCtZOEZRM0M1aG9JSW1HTU5WVnZMcDRYMUZSWjJuMEJVMDM1WCt1N2ptZ29tV3YvenpXUjIzbEI3aWNoL2IxREJlUlFWTk50eTFGSFlMRFdWaDFUd0VYaWM0Z3M2MTA1VWZQZE1yZDEvSENmZnJucVRheXJZa3FQM3FtU29tN3I5cTg0eHlNRExJVXg3TXlsZm43T3ZJR21iWXlVWW1HYm1yeTk5VVduWU9aN3NGYzVPSGIxYjJITGJTOVFWMXZFRDNkUFg5ZlFYRnVXaUVlRjlrenBmTWNmYVVaa2J5bjkrYlFUZlh3dm00VzBpQTNSTmRRVXlJVjFsZWtrRE9oU3gzc2RHaDE3K0F0MGN0QTBwbERwci9nTHFTdlNJK2tYdDhtQWo5RFZsMjByM2hHQk0waU93S21CdFpYSE9QWDc5ZkZYQ0ovVXJlNzlHeHI0ME93dXU5aEs4TFBwMW1uUjdKbVd1djdac00rb0gzRkdaT2JGb1d4M2lZL1VsMUoyTFZuMGI3aTZCMlJaTTFXdW13TDgzM01vSDNGTVExaFBISUdzYWRudms5NFgzRXNjdFBFNHhLOHA4OUZ2Szg0RXhJUnVvVWE2UHQ5OGZVMURKVU1vc2orMy9TMTVPdHJHT3NCOUxuWXFtK2U1dytlczRKQWhZUURkZ0FBQUFCSlJVNUVya0pnZ2c9PSkgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFCUGxCTVZFVUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzYrdnI3Ky92NysvdjcrL3Y5L2YzNit2cjcrL3Y3Ky92Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzkvZjMvLy8vLy8vLy8vLy84L1B6Ly8vLzUrZm4vLy8vLy8vLzYrdnIvLy8vLy8vLzgvUHo3Ky92Nysvdi8vLy9rNU9UaDRlSGYzOS9lM3Q3ZzRPRDYrdnJiUkRmNStmbnY3Ky94OGZIMDlQVFkyTmpjM056MzkvZnE2dXI0K1BqejgvUG41K2Y3Ky92WjJkblcxdGJ0N2UzVTFOVFYxZFhsNWVYcjYrdjE5Zlh5OHZMczdPejI5dmJhMnRyYjI5dm82T2ptNXVidTd1N2QzZDM4L1B6cDZlbmo0K1BpNHVMdzhQRC8vLytCUTMwbkFBQUFRSFJTVGxNQUhoWUZEekVKQWlmaXd2Yjk4TTc2UGRqcXRvR3BabGwwYzQ2cWoxaWNUSjFLUzQyQTZXV2IyV2RhZFlLMWN2Q2IvY0pYVitLQTlxaW9QYzVsNlkzNnVSanlTZ0FBQlhWSlJFRlVlRjdzMWt1S3dsQVVCTkRTK0p0cWdna2ttT0RJSDRnUFJJZ0QxMVA3MzBCREk2SFYyNjBaMVd1NFp4VUgvNHR6empubm5IUE9PZWVjcTJ0RUpkbHNFc1JrVCs0UmtlR1JQQTRSajRZa0cwUmpmQ0xKMHhpeENQd1dFSWtkNzNhSXd1VE11L01FTVRpd2M0QWVCaGQyTGdQb2xmeWhoRnpMQnkzRXBsYyt1RTZodGVXVExhUkdDejVaaktCVThVVUZvZG1OTDI0ejZLUTBwSkNwYWFvaGtzeHBtaWZRS0doaklYdXJTYmJaaHI5cVJHODF5VFliYUpKdE51ZWZjc0ZiVGJMTlpud2pFN3pWSU50c3liZEs0VnR0cmV5dEhkbG1sL3pJVXZUV2pteXpGVDlVU2Q3YWtXMDJwVW0yMlRWN1dPdmVLdHRzd1Y0SzFWdGxtMTJ4cDVYbXJiTE5CdllXaEcrMTVZSzNxamFiMFNUYjdGY3Y1dG1jT0JLRTRRMlhjN0tyVEpXM3locy8yUnN1Wnd2QmpzUVNoUGQwSnhDeUpWbUE1di8vZ2V0cGdZZXh0TFNZS2RIZitQYlVPOTNObzM2SHQ3N2VxSEN2Tm52QVNhQkxwNHJvb0NsdnBZR3VycHg5MlN4Nkt3M1V2ODczWmJPSHZBN1F0ZDEybTdaWjZhMDBVTisyMjVhN0Y1dHQ4WHBBN1k2MXJKaTFWaVBlU2dQWjdYWm51Vmg0emRzc2Vpc05oQUV0emdPdmFadDl5R3NDZFN3TGVKS2sxNkROU20rbGdTQ2doUUFheDlOR2JmYUkxd1FTRDdZSWduRThIMGEzaVk0YThGWVN5TUtBeGdKb01xQnMxdHhiYVNEczZBUjVadjZBc2xsemI2V0JJS0FraWVmekNRQTVBOEptamIyVkJ0b01LSFhjVVNNMmU4eDNBRG9QQUFoNEpyN3Y1RzdJVktMamhyMjFESFMrRHNoUDB4eUFlbDNDWmsyOWxRYTZlYkFVZUx4ZTc0S3dXVE52cFlHU0ZWRHFPSzRMUEZGMFFkaXNpYmZTUUJzZGpRRk5vOUVvSTJ6V3hGdHBJTmlKdytGczVoY0JUYWVEd2FpYkVUYXI3NjAwMEdaQW5nZ0llTHFTeU54bUQvbHVRT000TG5nY2VEQlA4QUNRU25UWStMMTExZ2VSdHF4bE1mTERBc2lGa1Y4SDFHV1N5TkJtVzd4TytlaUp5bzdPODdCNE1DYUExSXhhemQ5YlV3Z0lnRllkN2E4RHdvNEdJcVlRZ2MwMmYyOTFrRWNkK1lKSFZtWnVzeWU4ZGprQWxLeEhIbmpFaUVVSVZPVERGS0tUUGR4YlhkblJqZ2hJN0dqZ1VTcVRObXZ1clRSUmtNUUF0QnA1M0lrakp1TlJpWTcyY1c4Tml3ZExIZHlKZ21jZGtHVEtUR3oyR2QreFBPaG9HVkFValpnQ284emFzMzNjVzNsdmlGcVdoeUYyTkQ3WWJhWk0ycXk1dDlKRXM4SVRQZXhvSmxGa3NVelRabys1VGszRmlJV2g3S0FLcEV6YXJMbTMwdi8yY2tjemxZWGRzR1U2TnZ1WTZ3RmRKam4reTRPWEtSM0V5dFAvV01OYk5ZRDZZOUFnOFdDcy9GNHlvNTF0OW9CckFvR0p6SlYvK1dva0pEb3c5TmJhRjdRSkFLa05wTXliOUtQZmpMMlZCckx0em5McFEwRGxZTlRLZHJIWnAxd2ZxQTBpRWpoTVlzaXNsTjlJOUxTbXR6N1JCeExtR0NTeFc5azlwWXllMUxQWlI5d0FDTlFhZ0lidXRnYVNmdlRJM0Z2cCt4RHdnRGQ2WkVSQVZNOW1UN2tCMEhJWkpJbjRFa3A3VytLUlJLZkcza3FmWXlBZzRISHk2Wlp3cEIrZGFIZ3JWZkcvLy8zejV1MWwzOGFPRHNiRnJjSDFvcEo3VlBnUmFiTm5mUGVhSTgrMTNSRWRQVjRGQkE0Q1JrUXlaV2VrdDJyVThNM2xWUkVRbnM5QUc0WG1neExSamMwK3YwZDRxMVpOVmp6bk53OFdnc1RpdmlhUlhtaDVLLzE5anpzYUwrYml3Vndoc2JlWGRMVWZmZmErbnJmU1g5UDRyWWpuUmNkRkJXR1NRK0tVZjMveWJwN3Z1WDZsRnA3d29hTjllREJ4aVVFSXdDREgvd2ZDV3pVclh3VHJnTENqMTRyR3VoVFN4eDhRM3FwWkxuU1E0TWxYSFMySGU4dSt4dnFKOEZiZENtRUZUWHhjUWRGQUprUFAycWZWTnZzTE55MXZqZzlXQktRc1FNS1BmaVc4VmJ0NlNrZExGa2I1MFZlRXQyclgxTUdBNE1IVWxoa1JmdlRGaDRTM2FsY0VIYVNjem1yMjBSK0V0K3JYQ0R1NjNESnN1eC85K1I3aHJRWkUwTkZFSGxWaC9VVjRxMEYxQjZ6U0VkbFdGL2xTc2RuL0FjY0xnS2N0akJoZUFBQUFBRWxGVGtTdVFtQ0MpIDJ4KTsKfQoKLnNtYWxsLWxpbmsgewogIGNvbG9yOiAjNjk2OTY5OwogIGZvbnQtc2l6ZTogLjg3NWVtOwp9Cgouc3NsIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBTUFBQUJpTTBOMUFBQUJBbEJNVkVVQUFBRGNSVGZjUkRmZFJFVC9nSURjUmpyL1ptYmpWVG5jUkRmY1JUZmNSRGZkUkR6Z1NUbmNSRGplU0R2Y1JUamJSRGZiUkRqZVJ6dmNSamZiUmpqY1JUamNSVGpjUlRmZFJUZmNSRGpkUlRqY1JUamJSRGpiUlRqYlJUamJSVGZjUmpqZFJEcmNSamZiUlRqWlF6ZmNSRGpaUkRmWlJ6YldRelhYUkRYWFF6YlhRemJXUWpYWVNEdldRamJiUkRmT1FEUFNRVFRVUWpYQ1BERE5QelBKUGpMR1BUSFZRalhNUHpQUlFUVFdRalhMUHpQRFBESFlRemJBT3pEVFFUWEhQVExJUGpLOE9pKytPeS9GUFRIRVBUSFBRRFRRUURUVVFUWEJQRERLUGpLL096QzlPaS8vLy8vUFFEUFJRRFMzT1M2Nk9TN1RRVFRFUERIWFFqYk1Qak1CaExhV0FBQUFMM1JTVGxNQTR0Z1BBaFlGQ2NMOThCNHg5aWUxK3M0OVdJQ2JxWE5LWlkzcGp1cWNnVmRMWm5MMnFLZzl6bVhwamZvbnRWOExBTnNBQUFKclNVUkJWSGhlN1pUbmR1SXdGQVkzQVJJZ0JBZzl2VzF2MTczUk95bGJ5L3UveXNvMkZ4M01OYXhzOWgvekFITStTZmE4K00vczJMRmp4KzN0ZGp3SCsvc0hXeEhWQWVyYjhLU3lBTm5VRmtSWHdMaUs3OGxsZ0pISnhSYWx3U01kMTFPR09lVjRuc005Rk8wZHhoSmR3NExyT0o2all5NDZQb29ocWdFSGF0RTlKVmlpRk5XVFBJRWxUcElSUlhjUTRDNmFKM0VKQVM0VGtVUVhzTUpGRkUrK0NDc1U4eEZFQlNBb2lIc2FRTklRN3l1UUNGZTNEaUhVaGZ0S0lsemRLb1JTRmUwcjhzWERBa1NvdW1rSWlnWWFJT2tJZmVXaTU2RUVTRm04cjF3MGZGSWw0ZXBXZ0JBOXFPTXBtaXJDZmVXaWp0b2E5V1N4NnRhQUVMRkJSbC92aWxTM0JKUkliUms5L1ZGVHNMcmlmVVhSdU5mWExVMHkvN202cDBDS3hxTit2NmxKVS9rM2VKeHU3T3M1TFdLREhpMXRZc3RLRzF6T04xWDNER2lSTVI4ME14M2ZkQ2JjMStiUWUzbzJTSnJZWGNWMGZGTXhMOXhYaXowOTg3QkJ0dXg2NXFhQ2VGOGxIQ1IzRmFiQlRRM3h2azRNMXlONUIvTXcyK3VyZXc4aFRQMUJNMzhRbnU1ZXZLOGdNdys3SWNmSDlFM1psRUJmTVNPLy9LZjM1K0NtNnVhK3JoYlNZRGVFYTlDVXlXM3FLMUhJamo1REJ6OGRXZDBiV0NkNlVsdC91TVBFcitCbWJWL0pIclZHL2E5TXNFeWJWNWZzSzUwUjNmcm1CRlh0Q3RWWG10NzNINFBoUTR0OWs5cmtKNTV0WVh3WnJPNHJDRVVmUEhmVUVjdWFaQy91bXc5N1RmYVZwc2x1MnRDYjJsUlduQmxLRnRmK2h1d3JqYWE2UHh2N1JmZ1c3bnViSlB0S0kvWDBwdVFPNGsvUGZlL292dExZN0tieFZ3dmUwL3NFM1ZlYUxvc0lia0VEdnQ4SG9xL2hLR3dRWXZvcTVPTW5vcS9oTEFiZ2MvRlZuMzNQWDdwQWZFNVFIUjZmQUFBQUFFbEZUa1N1UW1DQykgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFCVFZCTVZFVUFBQURjUkRmL1ptYmNSanJqVlRuL2dJRGRSRVRkUkR6WlF6YlhRelhXUXpiWFFqYldRelhaUkRiYlJEbldRalhXUXpYWVNEdmJSVGpjUlRqYlJUZmNSamZjUlRqY1JUamRSam5jUlRmZFJUbmRSVGZkUkRyYlJUamNSRG5iUkRmYlJEamJSamZjUmpmYlJUamNSVGpkUlRqYlJqamNSVGpjUkRqY1JqbmNSVG5jUlRuZFJEbmJSVGpjUkRmWlF6YmNSVGZnU1RuY1JEZmNSampaUXpqY1JUZlZSRGJjUkRqY1JEaldRelhlUnp2YlJEalhSRFhYUXpiWFF6YmJSRGZlU0R2V1FqYlZRalhJUGpMT1FEUFhRamJDUERETlB6UFVRVFhSUVRTNU9TN1FRRFRVUWpXM09TN1NRVFRQUURURlBESEpQaksyT0MyNk9TN0hQakhPUHpQTFBqTE1QalBSUURUR1BESFRRVFRFUFRITFB6UEdQVEc3T2kvSFBUTEtQakxUUVRYWVF6YTlPaS9NUHpQRlBUSERQREhCUERDL096QytPeSs4T2kvQU96RFdRalgvLy8vYlJEZDN1bmRIQUFBQVFuUlNUbE1BMkFVV0NRSVBIajM5d3ZiTzhESDY0aWZxcVlGbXRyVk1jMWxLUzV4MG5ZNlBXS3FiallEcFpYV0NaMXB5OEp2OU1jSlhWK0tBOXFpb1BjNWw2WTM2SjdWbWNIZThBQUFGV1VsRVFWUjRYdXpXUzRyQ1FCU0cwZXV6NTZJU2dpYUVqSHdnR2hBaERuUkYzLzZIRFkxSWE1V1BqUDRhM0xPS1kyODU1NXh6empubm5IUE91U3l6cFBSN3ZiNmxaQVVyUzhoZ0I3dUJwYU1FS0MwWmh6M0EvbUNwYVBqVFdDSzIzR3d0Q2NNak44ZWhwV0ROM2RvUzhIUGk3dlJqZWpYLzFDYlg4cUExc2RHWkIrZVJhVzE0c2pHcDhZUW5rN0VwVlFRcUU3cGVDRnl1cGpNblltNHlHVkdaN3ExRXlUWmJFRWNoZTJ1VWJMTWxMNVc2dDRaa20yMklrbTAyNTYxYzg5YVFiTE5UUHBncTNocVNiYmJtbzFyNDFyaFc4TmFBYUxNenZqSVR2RFVnMld6Rmx5ckJXd09DemM2SmttMTJRUWNMM1Z0bG15M29wRkM5VmJiWkpSMHROVytWYmJhaHMwYjQxcmhjOEZiVlpxZEV5VGI3MjR0NS9iWU5BM0c0ZSs4ME5ZSTBnR0ZrdmFSNzc5S0taVVd1RktlN25sSXNUNVgvLzJNNVZNWmlaQjlEUWo3NHhXOGZmcndqUDkwTWIvMDdWZjVDYlhZSmcwQnRPNHRvS1M5dmhZSEdZMXZEWmcyOEZRWTZ0Qlpsczh0WUJlaHdOTFR5dDFuaHJURFFhRFFjV0F1eDJTSldBeHBPQnBXTVdTdm00cTB3MEdnNG5GUXFGVGQvbTcySGxZQllRSlYrdzgzYlp1OWpSYURKWUVCNG9zakowMmFGdDhKQVNVQlJxK1BsYXJNcldCR0k4bFFhalZhblhBNWtvcFVjdkJVRUdyQ0FXaFNvWHMzUFp0ZXdLaEEvTU1iVGJjcEVhN2w0S3d3VVJaU0hBTm5Wbkd6MkNWWUdtZzZvWjF1MVhHeTJoTldCQ0E4Qm9nRTFtN1psK1NoTlZNcmRXMldnL3YrQW1yMmVSWUNjR0xCWlUyK0ZnY1NCRVNEZmRaeGR3R2JOdkJVR2loS2duazFPalBBRXdTNWdzeWJlQ2dOTmRUUUx5QXRxdFJDd1dRTnZoWUg0bmRqdE5ubEFubGV0MXVJUXNGbDliNFdCcGdOeWFVQ0VKNDVEd0dhMXZSVUdhblU2bk1jbUIrWlNubG9zRVMzbnZtL3RVcEdtMXRGUGQ1RERBeUtGQkpHcHpSYXhTalc1SjBvOC9NQVE0WkV5S3VhL2IrME5wMTc1YmxNRVJEdWFFQ0ZCWkdxekJheFk5aUFqSU1iREswMVUwT1ZaeGNwbEU2QklqTHpGUml4Z1FEd2ZsQ0phWGNDKzFUb0t5T1lIRnZDT2xqUGlObXZ1clRCUkkrb1FvR1RrMloxWVF5SWVpV2hsRWZ0V254OFlmOFJjeWlNQ0VreWhpYzJ1NHhPV1N3OU1CQlFFTlRRRkk4M2EraUwycmRncEoxcm1zNDVtQnlZemhiRE53dDZxVHRUbFFDN3I2RlQvQ0xSUTAyWkxXS2M4T21LK0x6b29DeWtoS3BsNHE3cCs3Qi9kMFNqTmdnUmJxR096bTFnUHFMM1BYM25pWmFrT1FzZW5mMVBEV3pXQXhyK0pCdEVEUXhubkpUSVNObXZ1cmZCSzc1dDQ1Yk9SQk5HU29iY3FiOURxQkNqZFFPbDVFMzcweHRoYllhRFJpSWpSRHhLUXdKazlhK28ydTQzMWdZWkVSQm8va2NCSWZ2Si9UclN0NksxYitrRFVITWtyYTJWM2o1elJscHJOYm1BRElMYlE2NVMvejJnZ3lZODJ6TDBWWHNkUW5uTGRoU09LUXpXYkxXQURJTXBEZ09yZDNxOTU4UWlpZ3JHM3d1c1l6bU5iWG1ZNHNoK3RhbmdyVkoyRGd5OTdYOXYwQ21JTHp6SUhjajNaUFRMK2g2RE43bWhZUjVueEhJNG10S05iTENBbWFYOVFEREtGTzZDMzZoRHR0Y2RKUUZHTGVUV1JJdXBvY0dPajYyY0JiOVdxZXNMVEZ3Zm0wMDBNUWdxejlsRExXK0h2ZTM1SE05Rm5xdzlIZXRCa05zRjYrWWFldDhKZjAreGJrYTBYYllzcFNNSWcrNUQ4Lzhwc25xZFl2M3FzbzF2c1M5SHk2U2FHUTZBWUhQOW5nTGRxbGxWcGlJQjhSeWdSUWpHRWRPc2M0SzI2Ukd6azZZVHhqaGJERGR6WGNmd0M4RmJkOGdsUG5SNFk2MmdCQU0vYTFXeWJmWVZOeXlVQmlaRlBYWUNBSDcwR3ZGVzduRlJISDdFZ3lJOHVBZDZxWFo3TkFxb2lsRzZaS3VCSDE4NEQzcXBkQVFsSVdwMHA5ZEU3d0Z2MXE4WTYrbmpMb1BsKzlQNEM0SzBHUktTamdUeXl3dm9BZUt0QnhWV1U2WWhvcm92Y3ZBMTRxMEh0b3V3VTBGdy8ranpOOHcvY1Evemc2dWcyL1FBQUFBQkpSVTVFcmtKZ2dnPT0pIDJ4KTsKfQoKLmNhcHRpdmUtcG9ydGFsIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBUUFBQUQvNUh2TUFBQUV5RWxFUVZSNFh1M2FmV2hWWlJ3SDhMdmRtalZTakt5UWJLYXppYTFrMXNMNll6WG9aZHkyOC9KOGY1WFJDN2h3RVZrMGhaUUNYWTJTaXBDZ1lnYXBwWE1RNVlhOUVMWnFvRU0zVkhxeEJrYXBtMjFqT0JXbWJMZnVkayswUGVldTIrbWMzems5NTE0V2JOOS96ejE4ZHM3NVBjL3ZQTStKVFA5Tlp6clQrYjlGbjJuR3hIcmFpbmI4Z2dFYVJnTG4wSU9qYU1Gcm9sb1UvU3NnMXl4QkxacHhCRDAwUXVmcE9EclJpRlg2SWlVS1hZOFhjUkFKc3J5QzNuUkw3RXBzUUovcjBWM2lTUzAvTUtVNEQ2dW9Rd0xZL1AxcTRpMGFZWDl4VnF5UFJIMWpicjhVdGZTYkU4Q0RxSUs2MHdCak9FYjdhRGYyNENCTy9nTjEyTGpKRjRkTStkUEFvTmdNZE5rVXhMRU5RbHRBRlZpSmRiVFdmRlRjYVJiaU1YeUNwRTFDTTR2UjV1QXpkd0IvaGN4Q0RJNWpYcUdGZUFhZE5Kb0dIMEVyVmhnM1lQczQ2QWQ5SmxkTlMzR0NBYkRQa0ZHRy9lSkdXa3RuM1BBNElVQjNveFB6R1k0QVhTQkxDU1RMZ2ZaeHgyTUxWMVE1dEZIZVd4V1FETmFsSHVsV2VvNHE5R1c0VlZTaG5nNUowS2daOCtia1lwY0VxSUprNkgyeTBDaVc0SDU4Z0dNWVFoeW44RGxxVVVsdFpJazFYRjAxa0tVVzV5aG0zZ1ZCM1E3Nk1EYVJ5WEJRUjFhSUlKbnlpNmpOWlVnczh1VFFmVWlHREpJeFo5T1BmeEV3aEFPMEY3MFRvNU5SNXNreHJzVWdXYUdEWkxRQ0hCSFZ4bkt4V2p3dWl2UlM3TWNLN25hMWtwVVprRXdVelhiRmlaZlpjVms4cEU2eFozdTM0QVY1VEZKVXNWMk9iQkhVMCtRNXd1MGVKMjFrcncrZUQ0bHpCdk9ZZjd3TGV5STVERWZMeDJsMURQcW9TWEs4U0l0aXMvZ200MW1sYWdvLzlQMlVBcGtsWkUwcGtIaGRBdjZZSWlCOE53RVFMOUh2VXdDa3paSHoxNWc1R3c4am1SMFF0c2l6dk9vQUNVakFJZGxPWlFVa0hwQ2dEcWQxZ3dSc2xoWDNkalpBbURzQndwQVRKUHREVVpQcUdGdXlVV1U0NTNJV3U3ZkZIWk92aGppUSthcWlEaGVRL2JKalhwZjJvUCtjYVJBK2NnUEpwa3hja2VaZmlJSE1nbWlyQzhnZWU0cnowcUY2S1YzSUpFaTg2UjhrZzBvYXpRNkl2MlV5b2lhanQ0eC9xSjFCZmNDZTZKUVpDL0JRODJYdkRMWUhKUFVFSzN0bVlIVG1sb3RwYnpDU3dzRG9tRHBjK21ENlZnSEVUQjNNNU9yMmM1eFVCdkdUcTdQOThEakJFanFyQk9MYkQyZURaajdvK2FKZGhuaG9vSnhVYmQvcjFjSit5bDFtSk1NQkdXVVNQNnpsZXpUNVNJaXJHTkthY0VCNGJ3S0VYY3hyRU43Z1RoVUdTQ3RJTGFaWE1DK0tpR04rNWtIWUlUbmRrU2o3S28zR1RJUE1FdnRKRkt0OUxEWWdpWnRWUVRMbnFVUFVPSmNWOEtXRTk1ZGY0bTg1cHMwK0NRL2lnNjh4TjcybHNjRjR5dmVDRlRhNWc5QVhuRFI1bGN6QzFKcis0VWh1Q3NBdjZZbEgzRURVUkZiZ1BDRzNZMmFsdG1QRzlGSUo4TG5vT1lMYlhORHpnaStNeXZrcWlpOXNJdW9jQUhaWnVOOXRBS2k2aG5haUJ3a2E5Zjk0MnkycnpGY3V0NHRaT08rM3I1SjZ4Y1ZtWUVlS2M5eGxQdUMzRmhESHluQkE2TFE1R0dBMmZ0bk5sODJScURySURnYjFaVTRBbnh6VVRjN3JhRGVXaHdQQ1VXMEJBL0M3Z1llUDljV3FJTFNVWDhZQWdteHhJb0YzdFlML0RrSzlZL3pud204Q0k0bHZSTFYrZFZBUVRoT3BPUGh0OHArb2daNFc5L2ppakZGRDVlWGhXUGdQQ1hqTWgvcFNWWUQ2cHhheXdQR09LT0lCV2ZrWWhYWUtvemd2eTUvcllCdmE4YXZ6Y3gxOXNTcmdUMmpKbmpKTVZNaVVBQUFBQUVsRlRrU3VRbUNDKSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUNBUUFBQUJOVHlvekFBQUtTVWxFUVZSNFh1MmRlMndVeHgzSGZ4aGo1ZGtTSWdPaHBJQ0RXaWxIMUFqVEdFd2RuYUNOZGJpKzIvbitFR2xLQXZTQm9wUklLYStLU0M1dENVK1pvS2FLUTlXU05paHFnc1hEcVJNa0hCUkJERGkwNFE5a0dRRkc0SkFFcUYxVElrd1NQK0JjakJYSzd6QzM1NTFaZTN6ZHovN05uZmZEM3V6OEhqTkQvaEFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFT0FNamVXcE9WakY1ZGpGQjdnV0RXam1ObTVETXhxNGxnOWdGNWRqbFpvVHkzT0drbWNldXpOV29CYWlERHU1RG1mNE0yNi9lbjJHTTF5SG5TaFRDMk1GajkxSk5oRyt5NGx3S1ZlamtUdFR2OURJMVZ6cVJNSjNVYW9NeGxTMUJvZjVpdXVuWDhGaHRRWlRhVEQxSjZFc05VMnRSQTA2dU5QN2hRN1VrQ3V4QjNrRE4vWDYwNXQ0USt4QjZnOHdHV1Y4bmp2TlhKUVVub0g5T3ArTy9UeUQrZzVuTEVwd1hBandVUkNLK0pDUjd6aUVJdktmNkNSVUlDNEUrQ2lJYzdEVDVMZGdKK2VRZjhRS3VFb0k4RmRRQmkvakw0MS8wNWU4akRMSVBNNTByaFlDZkJhRSsvQ2VpNERMK0NlMm9neS80V2U0aTJmd0c1UmhLMy9JbDVOTHdudTRqMHlDMGRncUJmZ3ZLS21lSS93U29wR3YwUzM0L3RjUnhSLzRTREpGWklwd3BsckNMZHpaNTRMRzlEaW5hbEcvTHg1SDErQVFQNGROcU9TRGZJb3ZYYjFPOFVGVVloTS94Nkd2UmpCK2lTLzFOUC9DR0RJREh1VTZEUUZhWTVDYWdsWnhXMmQ1V2RFOVJNVjNxRG44T3A5TEt2d2N2NjdtVExtZHFPZ2VQSSt6UWsrcm1tTG8yZUcxT3U4ci9iZVk4K1IxQVcxNFBwUkZGTWxXdjBOenF0THhiL3cya2swVXlzTHozUGFWSU9kSk1rSHNmbzJwbWJIWFBGWjF6MkE0UlBURGIvQkcvcUxYNnIvQUs5RlJSQnpxbmsxaEZaa0FSZUwvcWQ4RTBTQzhpWkp3SmhHZXdnWFArdi9UOWRTRU0xR0NOMmtRYVpPQmRUby9MZk9oaGhxT0N0M1B4dzQxM0ZENGlTMUNnQVdDc052RU4yQTM2Uk85Vy93eGxnZ3EvdVl0MHlqSCtEVzFSaTFVczY5ZUM5VWEvSldQQ1MxbVgrMXF1QWdMclJGRUZNdm5Obkc3Y2J5RGVSaDlpMm50UEx5VE1FaTBZU3JwZ2pHbzUwNTdCRWt3NzRhYi9VdDNoaWVTalpuOE12YnlFVzdpZG03aUk5akxMMk5tSlB0YTl1alYvMGxWUHpIdzlBZzlWZ2lTY0dsM1pzZDVnQ2gzaVBNRWFzUlRJcCt2R3ZXamNLYnpBUFoxNmNGNkEyT1ArSEZaS1lneWVMdGFRaG1Vd2MveXB5bEkvNVNmRFdkaU1XK25ETzAzbHhpYUxSTWs0UkErU0YwN1B1QVFhWk1oWHV5V0M4S09YcXJmVHJwZ0hYZmFMVWdXZkhvMUdCelNMditnQ0hIYkJVbG1qTVJIcWVuQlJ6Tkdhb2VrSXVheVdKQXNBTjBRbDdWakwxYmdhV2NXbnNZTGVKL2JyK3U1b0YzdUNXZUtpTjFxUVJJbjNEWEhRVE4rWFhRUENRcUg4ZkpyeGFnMkoweTY4Rm9od0hKQkVqVWJsV280VVN3ZnIrQW90M0FManFLc094VVdIY0Z2cTlrR3NvV0lXeVBvRW5tZ1MwU2lhRlJHUjVqS0Y5Ylo4L3p3S2ZJQTN1OUpOdmFTQ1hpcFJYbzZzWU04b0NiMGtKSy9wQ1lZS2VSd2l3MWlkSU5KUEg2VDZzZkpCTmhta3g2Y0xiNkRQS0plRktKZk5GVWw3YlRwVWo4bDd3em1QZGNGN1RIVURjVFZOdW5CSnRJaWtvMVB1dlRnazBpMm9SWUVtL1R3bjNLSGtDYk9JMmhGcS9NSW1ZR3JiSkdEai9FVUdVSE5WL09OOWZkWW9LWUY5ZGlDSDRkdkkvdEFoUVdoZzcwNFl4RVBCQ1VCSmNrRkJJTHFBMEZKd09Ua0FnSkJaWUdncE1VZFBoOElTb0thbGx4QUlHaWxiTTdIdmtDUUFEVkN3S0xDWVh3c0VIVERnaVc1SXNkNStOcTA4Vi9wSjhoNVdLNGtTbkd4bFJNUi82eTV1MWZQeWVWTDZTYUlCc2xhbnhPaFZPQlNJV2piRFF1Tk9xd1dwSjh2TGZXUUpGTUw2RHI0ZWJvSlVndUVvR3BLQmRubEp6UC9XR0ZhRHk3MHE2QUpzanN4cGFXMmN1Qkt6T0x4YTRZRnZVLzlTTzRRT1d5a3NIdzRsaWNFMWZmd2tlOGFGTlNHNzlvVWxNZnl5QTAxVjl6QTJ6MDJBQjgySXVjYy9zNGg2bWRrU1ZyTklUZXdXanhCNjZrSG9xUHdjYm9FRWxndjduZTF1OUZ5WVhUK0xmdi9McVNISURWZjNFRjVieXNaaGNuNmJ0SkJFQmNLUVZXOWpNT1NMU2h6bmtBOERaNmdLV0pJcVhFM1dpdEc5WWNvQ2ZqVndCY1VlMGpjUVMyNWdRWVJuWXpWelR6YVg3MFJUMUFEdVNIRE4zV3ZhMC83V3dOYmtMbzNJVFIzUXc2OW9TeHlZY3J0ZkhBZ0N3cGx5WW1ySVVHeVo0SlBwSmtnL1orWUpEcWVtOUx2SjZZL1NNc0k3b3MwRzZUMVgvTVNGZU1yL3hldmVUNGdCT1ZUeXVBWFBoZUl6bUVyNXhnWGxDOEVIU0Ezc0V1R0dwYjE0N2VvYi9rWmFtQ1hUckRxemlCK3cyOUZxUFEzV05WTmQ3aS9OUGY0cktqSjEzVEhLbmVqYzF3U1pxNHBXNzhYTHZpYk1QT1Fjdld3c3V5TXJZTGNVNjRhU2Z2VVVkL0J4WUVoS0hjSVg1WkpleTlsSHcrb0gzQzdIWUwweXo3dWhVTlBxTGxXQ05JdkhMcVhubTFyQS9XejlLelJ2T0FGL05rQ1Fmck5DKzd0THhwTGdYZGFJRWkzL2NXOWdZbzhJQmIzV3lxSUY4bUV2ZGNXdkgya1FYUUVHbXdWSkZzTDFVcnZUWnc1V29xK3plZHRGTVE1VXJ5YTVyME5lRGxwb2I3SFgxb29hTGtRZEQ2VTViMlIvQVJwZ3BsOHhUWkJNcE9PTXEybENMRjgwZ1MvdEV0UUxGOXF4MlRxSFhJZmNXd21iZXdTaE0xQ3ozSE5lVEE2aXNlbGs2RGljWEt1aHhMOUJYVWIwMGtRL2lqMHhKMngya3N5MFJvZGxTNkNvcVBRS2dSVm1GblV1eUZkQlBFR3FUdzZ5Y2l5Y0h5T01la2dDR01TaXB4VjVqWVdlSXMwOEczaCtIRit3NW1WK2pRdnNSOGxWbUJ3YXdvVTJTTklYampKVENtQW9nVEIxV1kzTnpubGZZbS8vNnNZc2Q1dEo4M3diWHhLQ25LbWt4Nkp4MEJnQlhrRS8vQmJrSHNkRHk5SVBkaHFmSU1sZEhnNEtVQ2tjbjIrT0ZuREpqcmsrSVhScEk5YUlxM3o2Y0poNUFFbnR5OEU0YVFvVk1sdEFVOUxtV3FKMFUzZTlPdmplTGN2RkRtenFFZFFtU0N6THB4SkFvUGJCR0t4dHlvVVd2MFhoTDlSRDJDeDFJTTRIaVdCMlkwbTI3Mk4vbXAySHdnNjN1UGJPTEdRdVpZRXhyY3F4VVZNSkEvZ1o5enVkdzhSSllDSmlhVnc3SGY5ZWVsdmRvdkc2SGlQKzRKODZLK2l4QlpUTkVvOWFJN2RUKzdvYjVlTWt4NDNHUjdrUlBoVkhNVkZ2c0tYL1JVMFkyVGkxQkJ4bDNqQTZJYmJ0VUtSSlNHSTBGT2JxQS9yeUFXalc3YmpaSFM4cllLaTQzSHlKajFiWE1JUjg1ditveEVUYlJTRWlXaThTYzl1dDZqZmwyTWpjTkdaYnBzZ1ozb1BUVnlIb25lVEJqb0hqN1R6SXBzRThhS2JKeE9vMXpyMVNmL29HbFFXRHJORDBQV2dRdWpSeUljYU8vem90SnFpSWNqUDY1REcwMlB5K0N4MFlFWDROdHNFWWJmTzJHUCtBTFpUS0xKSkVMYm92N25NSCtIM0ZzYllJQWh4ck5PWTkvaDVDQ1ErNXczUlVmMHJDTTI2UVlYUHg0aWlsVGNXaitzdlFkaHZJaVQxL1NCYWRHQnpMTCt2QlNIT2EwMG1OUHcveXZnRUwrZWNQaE5VSjdPRjlqeEhTNU1mTVlGOXZNaDVtQWI1S3FpRmw0WXp5Vll3R3R0U0dEcTNxUVZxUXU0UTg0S3dEYVBKRHZRUDVFY0g2dmx0ckRlbXAxcUV6SFlUSytqakF3T3FZZ1UwMEloT1FvWC8yNzRqamdyUjN6UGdkc1l2UWIxdmN1cFI0b3lsZ1E4bW84eHdiOGQ1bEdFeXBST2hMRFZOclVTTjNuYW42RUNOV3FtbWhiSW9YUW5mNVVTNGxLdlIyQ3N4alZ6TnBVNUVMRmhLZDV5aHNUdzFGNnU1bkt0UXc3Vm9RRE8zY1J1YTBjQzFxT0VxTHNkcU5UZVc1d3dsYS9ndnBYekplbzdHVG5jQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKfQoKLmNoZWNrYm94ZXMgewogIGZsZXg6IDAgMCAyNHB4Owp9CgouY2hlY2tib3ggewogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBkaXNwbGF5OiBibG9jazsKICBoZWlnaHQ6IDE0cHg7CiAgbGVmdDogMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IDA7CiAgdG9wOiAzcHg7CiAgd2lkdGg6IDE0cHg7Cn0KCi5jaGVja2JveDo6YmVmb3JlIHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTsKICBib3JkZXItcmlnaHQtd2lkdGg6IDA7CiAgYm9yZGVyLXRvcC13aWR0aDogMDsKICBjb250ZW50OiAnJzsKICBoZWlnaHQ6IDRweDsKICBsZWZ0OiAycHg7CiAgb3BhY2l0eTogMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAzcHg7CiAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsKICB3aWR0aDogOXB4Owp9Cgouc3NsLW9wdC1pbiAuY2hlY2tib3ggewogIGJvcmRlci1jb2xvcjogIzY5Njk2OTsKfQoKLnNzbC1vcHQtaW4gLmNoZWNrYm94OjpiZWZvcmUgewogIGJvcmRlci1jb2xvcjogIzY5Njk2OTsKfQoKaW5wdXRbdHlwZT1jaGVja2JveF06Y2hlY2tlZCB+IC5jaGVja2JveDo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9CgpAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHsKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgcGFkZGluZzogMCAxMCU7CiAgfQoKICAjZXJyb3ItZGVidWdnaW5nLWluZm8gewogICAgb3ZlcmZsb3c6IGF1dG87CiAgfQp9CgpAbWVkaWEgKG1heC1oZWlnaHQ6IDYwMHB4KSB7CiAgLmVycm9yLWNvZGUgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA0MjBweCkgewogIGJ1dHRvbiwKICBbZGlyPSdydGwnXSBidXR0b24sCiAgLnNtYWxsLWxpbmsgewogICAgZmxvYXQ6IG5vbmU7CiAgICBmb250LXNpemU6IC44MjVlbTsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBtYXJnaW46IDA7CiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogICAgd2lkdGg6IDEwMCU7CiAgfQoKICAjZGV0YWlscyB7CiAgICBtYXJnaW46IDIwcHggMCAyMHB4IDA7CiAgfQoKICAjZGV0YWlscyBwOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CgogICNkZXRhaWxzLWJ1dHRvbiB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB3aWR0aDogMTAwJTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAwIDUlOwogIH0KCiAgI2V4dGVuZGVkLXJlcG9ydGluZy1vcHQtaW4gewogICAgbWFyZ2luLXRvcDogMjRweDsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiAzMHB4OwogIH0KfQoKLyoqCiAqIE1vYmlsZSBzcGVjaWZpYyBzdHlsaW5nLgogKiBOYXZpZ2F0aW9uIGJ1dHRvbnMgYXJlIGFuY2hvcmVkIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbi4KICogRGV0YWlscyBtZXNzYWdlIHJlcGxhY2VzIHRoZSB0b3AgY29udGVudCBpbiBpdHMgb3duIHNjcm9sbGFibGUgYXJlYS4KICovCgpAbWVkaWEgKG1heC13aWR0aDogNDIwcHgpIGFuZCAobWF4LWhlaWdodDogNzM2cHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7CiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIGJvcmRlcjogMDsKICAgIG1hcmdpbjogOHB4IDAgMDsKICB9CgogIC5zZWNvbmRhcnktYnV0dG9uIHsKICAgIC13ZWJraXQtbWFyZ2luLWVuZDogMDsKICAgIG1hcmdpbi10b3A6IDE2cHg7CiAgfQp9CgovKiBGaXhlZCBuYXYuICovCkBtZWRpYSAobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQKICAgICAgIChtaW4taGVpZ2h0OiA0MDFweCkgYW5kIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjpwb3J0cmFpdCksCiAgICAgICAobWluLXdpZHRoOiA0MjFweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQKICAgICAgIChtYXgtaGVpZ2h0OiA0MjBweCkgYW5kIChvcmllbnRhdGlvbjpsYW5kc2NhcGUpIHsKICBib2R5IC5uYXYtd3JhcHBlciB7CiAgICBiYWNrZ3JvdW5kOiAjZjdmN2Y3OwogICAgYm90dG9tOiAwOwogICAgYm94LXNoYWRvdzogMCAtMjJweCA0MHB4IHJnYigyNDcsIDI0NywgMjQ3KTsKICAgIGxlZnQ6IDA7CiAgICBtYXJnaW46IDA7CiAgICBtYXgtd2lkdGg6IDczNnB4OwogICAgcGFkZGluZy1sZWZ0OiAyNHB4OwogICAgcGFkZGluZy1yaWdodDogMjRweDsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIHotaW5kZXg6IDI7CiAgfQoKICBib2R5LnNhZmUtYnJvd3NpbmcgLm5hdi13cmFwcGVyIHsKICAgIGJhY2tncm91bmQ6IHJnYigyMDYsIDUyLCAzOCk7CiAgICBib3gtc2hhZG93OiAwIC0yMnB4IDQwcHggcmdiKDIwNiwgNTIsIDM4KTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXgtd2lkdGg6IDczNnB4OwogIH0KCiAgI2RldGFpbHMsCiAgI21haW4tY29udGVudCB7CiAgICBwYWRkaW5nLWJvdHRvbTogNDBweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA0MjBweCkgYW5kIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpLAogICAgICAgKG1heC13aWR0aDogNzM2cHgpIGFuZCAobWF4LWhlaWdodDogNDIwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkgewogIGJvZHkgewogICAgbWFyZ2luOiAwIGF1dG87CiAgfQoKICBidXR0b24sCiAgW2Rpcj0ncnRsJ10gYnV0dG9uLAogIGJ1dHRvbi5zbWFsbC1saW5rIHsKICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8tUmVndWxhcixIZWx2ZXRpY2E7CiAgICBmb250LXNpemU6IC45MzNlbTsKICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICBtYXJnaW46IDZweCAwOwogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRleigwKTsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgcGFkZGluZy1ib3R0b206IDhweDsKICAgIHdpZHRoOiAxMDAlOwogIH0KCiAgLmVycm9yLWNvZGUgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogICNkZXRhaWxzIHsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBoZWlnaHQ6IGF1dG87CiAgICBtYXJnaW46IDA7CiAgICBvcGFjaXR5OiAxOwogICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpOwogIH0KCiAgI2RldGFpbHMuaGlkZGVuLAogICNtYWluLWNvbnRlbnQuaGlkZGVuIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgaGVpZ2h0OiAwOwogICAgb3BhY2l0eTogMDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICB0cmFuc2l0aW9uOiBub25lOwogIH0KCiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIHBhZGRpbmctYm90dG9tOiAxNnB4OwogICAgcGFkZGluZy10b3A6IDE2cHg7CiAgfQoKICBoMSB7CiAgICBmb250LXNpemU6IDEuNWVtOwogICAgbWFyZ2luLWJvdHRvbTogOHB4OwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgbWFyZ2luOiAyNHB4IGF1dG8gMTJweDsKICAgIHBhZGRpbmc6IDAgMjRweDsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciBwIHsKICAgIGZvbnQtc2l6ZTogLjk1ZW07CiAgICBsaW5lLWhlaWdodDogMS42MWVtOwogICAgbWFyZ2luLXRvcDogOHB4OwogIH0KCiAgI21haW4tY29udGVudCB7CiAgICBtYXJnaW46IDA7CiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7CiAgfQoKICAuc21hbGwtbGluayB7CiAgICBib3JkZXI6IDA7CiAgfQoKICAuc3VnZ2VzdGVkLWxlZnQgPiAjY29udHJvbC1idXR0b25zLAogIC5zdWdnZXN0ZWQtcmlnaHQgPiAjY29udHJvbC1idXR0b25zIHsKICAgIGZsb2F0OiBub25lOwogICAgbWFyZ2luOiAwOwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA0MDBweCkgYW5kIChvcmllbnRhdGlvbjpwb3J0cmFpdCkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiAxNDVweDsKICB9Cn0KCkBtZWRpYSAobWluLWhlaWdodDogMjk5cHgpIGFuZCAob3JpZW50YXRpb246cG9ydHJhaXQpIHsKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZy1ib3R0b206IDE2cHg7CiAgfQp9CgpAbWVkaWEgKG1pbi1oZWlnaHQ6IDQwNXB4KSBhbmQgKG1heC1oZWlnaHQ6IDczNnB4KSBhbmQKICAgICAgIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgKG9yaWVudGF0aW9uOnBvcnRyYWl0KSB7CiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMjRweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiA2NHB4OwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA0ODBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQKICAgICAgIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpLAogICAgICAgKG1pbi1oZWlnaHQ6IDMzOHB4KSBhbmQgKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1heC13aWR0aDogNzM2cHgpIGFuZAogICAgICAgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAuaWNvbiB7CiAgICBtYXJnaW4tYm90dG9tOiAyNHB4OwogIH0KCiAgLm5hdi13cmFwcGVyIHsKICAgIHBhZGRpbmctYm90dG9tOiAyNHB4OwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA1MDBweCkgYW5kIChtYXgtd2lkdGg6IDQxNHB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiA5NnB4OwogIH0KfQoKLyogUGhhYmxldCBzaXppbmcgKi8KQG1lZGlhIChtaW4td2lkdGg6IDM3NXB4KSBhbmQgKG1pbi1oZWlnaHQ6IDY0MXB4KSBhbmQgKG1heC1oZWlnaHQ6IDczNnB4KSBhbmQKICAgICAgIChtYXgtd2lkdGg6IDQxNHB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogIGJ1dHRvbiwKICBbZGlyPSdydGwnXSBidXR0b24sCiAgLnNtYWxsLWxpbmsgewogICAgZm9udC1zaXplOiAxZW07CiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDsKICAgIHBhZGRpbmctdG9wOiAxMnB4OwogIH0KCiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogODBweDsKICAgIHdpZHRoOiA4MHB4OwogIH0KCiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIG1hcmdpbi10b3A6IDI4cHg7CiAgfQoKICBoMSB7CiAgICBmb250LXNpemU6IDEuN2VtOwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMjhweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAyOHB4OwogIH0KCiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHAgewogICAgZm9udC1zaXplOiAxLjA1ZW07CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZzogMjhweDsKICB9Cn0KCkBtZWRpYSAobWluLXdpZHRoOiA0MjBweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQKICAgICAgIChtaW4taGVpZ2h0OiAyNDBweCkgYW5kIChtYXgtaGVpZ2h0OiAyOThweCkgYW5kCiAgICAgICAob3JpZW50YXRpb246bGFuZHNjYXBlKSB7CiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogNTBweDsKICAgIHdpZHRoOiA1MHB4OwogIH0KCiAgLmljb24gewogICAgcGFkZGluZy10b3A6IDA7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMTZweDsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAwIDI0cHggOHB4OwogIH0KfQoKQG1lZGlhIChtaW4td2lkdGg6IDQyMHB4KSBhbmQgKG1heC13aWR0aDogNzM2cHgpIGFuZAogICAgICAgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQKICAgICAgIChvcmllbnRhdGlvbjpsYW5kc2NhcGUpIHsKICAjZGV0YWlscy1idXR0b24gewogICAgbWFyZ2luOiAwOwogIH0KCiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHsKICAgIG1hcmdpbi1ib3R0b206IDcwcHg7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogICNleHRlbmRlZC1yZXBvcnRpbmctb3B0LWluIHsKICAgIG1hcmdpbi10b3A6IDA7CiAgfQp9CgovKiBQaGFibGV0IGxhbmRzY2FwZSAqLwpAbWVkaWEgKG1pbi13aWR0aDogNjgwcHgpIGFuZCAobWF4LWhlaWdodDogNDE0cHgpIHsKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luOiAyNHB4IGF1dG87CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luOiAxNnB4IGF1dG8gMDsKICB9Cn0KCkBtZWRpYSAobWF4LWhlaWdodDogMjQwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksCiAgICAgICAobWF4LWhlaWdodDogNDgwcHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSwKICAgICAgIChtYXgtd2lkdGg6IDQxOXB4KSBhbmQgKG1heC1oZWlnaHQ6IDMyM3B4KSB7CiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogNTZweDsKICAgIHdpZHRoOiA1NnB4OwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMTZweDsKICB9Cn0KCi8qIFNtYWxsIG1vYmlsZSBzY3JlZW5zLiBObyBmaXhlZCBuYXYuICovCkBtZWRpYSAobWF4LWhlaWdodDogNDAwcHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSwKICAgICAgIChtYXgtaGVpZ2h0OiAyMzlweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSwKICAgICAgIChtYXgtd2lkdGg6IDQxOXB4KSBhbmQgKG1heC1oZWlnaHQ6IDM5OXB4KSB7CiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgbWFyZ2luLWJvdHRvbTogMDsKICB9CgogICNkZXRhaWxzIHsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgb3JkZXI6IDA7CiAgfQoKICAjbWFpbi1jb250ZW50IHsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgb3JkZXI6IDA7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgZmxleDogMCAxIGF1dG87CiAgICBtYXJnaW4tdG9wOiA4cHg7CiAgICBvcmRlcjogMTsKICAgIHBhZGRpbmctbGVmdDogMDsKICAgIHBhZGRpbmctcmlnaHQ6IDA7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB3aWR0aDogMTAwJTsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiAyMzlweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHsKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZy1sZWZ0OiAwOwogICAgcGFkZGluZy1yaWdodDogMDsKICB9Cn0KCiAgLyogQ29weXJpZ2h0IDIwMTMgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4gKi8KCi8qIERvbid0IHVzZSB0aGUgbWFpbiBmcmFtZSBkaXYgd2hlbiB0aGUgZXJyb3IgaXMgaW4gYSBzdWJmcmFtZS4gKi8KaHRtbFtzdWJmcmFtZV0gI21haW4tZnJhbWUtZXJyb3IgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi8qIERvbid0IHVzZSB0aGUgc3ViZnJhbWUgZXJyb3IgZGl2IHdoZW4gdGhlIGVycm9yIGlzIGluIGEgbWFpbiBmcmFtZS4gKi8KaHRtbDpub3QoW3N1YmZyYW1lXSkgI3N1Yi1mcmFtZS1lcnJvciB7CiAgZGlzcGxheTogbm9uZTsKfQoKI2RpYWdub3NlLWJ1dHRvbiB7CiAgLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDA7CiAgZmxvYXQ6IG5vbmU7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBtYXJnaW4tdG9wOiAyMHB4Owp9CgpoMSB7CiAgbWFyZ2luLXRvcDogMDsKICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7Cn0KCmgxIHNwYW4gewogIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KCmgyIHsKICBjb2xvcjogIzY2NjsKICBmb250LXNpemU6IDEuMmVtOwogIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgbWFyZ2luOiAxMHB4IDA7Cn0KCmEgewogIGNvbG9yOiByZ2IoMTcsIDg1LCAyMDQpOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKLmljb24gewogIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouaWNvbi1nZW5lcmljIHsKICAvKioKICAgKiBDYW4ndCBhY2Nlc3MgY2hyb21lOi8vdGhlbWUvSURSX0VSUk9SX05FVFdPUktfR0VORVJJQyBmcm9tIGFuIHVudHJ1c3RlZAogICAqIHJlbmRlcmVyIHByb2Nlc3MsIHNvIGVtYmVkIHRoZSByZXNvdXJjZSBtYW51YWxseS4KICAgKi8KICBjb250ZW50OiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUFRTUFBQUJ2SXlFRUFBQUFCbEJNVkVVQUFBQlRVMU9vYVNmL0FBQUFBWFJTVGxNQVFPYllaZ0FBQUVOSlJFRlVlRjd0emJFSkFDRVFSTkdCTGVBYXNCQ3phMmxMRUd4MEN4RkdHOWhCTUREeFJ5LzcyTzlGTW5JRmFwR3lsc3UxZmdvQmRrWGZVSExyUWdkZnJsSk4xQmRZQmpRUW0zVUFBQUFBU1VWT1JLNUNZSUk9KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUFRTUFBQURkaUhEN0FBQUFCbEJNVkVVQUFBQlRVMU9vYVNmL0FBQUFBWFJTVGxNQVFPYllaZ0FBQUZKSlJFRlVlRjd0MGNFTmdEQU1ROUZ3WWd4RzZXanBhSXpDQ0F4UXhWZ2dGdURpQ3ZsTE9lUmRIUjl5empuY0hWb3EzbnB1K3dRVXJVdUpIeWxTVG1CYWVzcEp5SlFvT2JVZXl4RFFiM2JFbTVBdTgxYzBwU0NEOEhZQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKfQoKLmljb24tb2ZmbGluZSB7CiAgY29udGVudDogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVnQUFBQklBUU1BQUFCdkl5RUVBQUFBQmxCTVZFVUFBQUJUVTFPb2FTZi9BQUFBQVhSU1RsTUFRT2JZWmdBQUFHeEpSRUZVZUY3dHlNRUp3a0FRUnVGZjVpcE1LeFlRaUozWjJuU3dyV3dCQTArRFFaY2R4RU91ZWFlUHA5K2RRWkZCN0dwVWNVUlNWVTY2eVZORmo2TEZJQ2F0VGhaQjZyL2tvL3BiUnBVZ2lsWTBDYnc1c05tYjl0eEdYVUt5dUg3ZVYyNXgzOUR0SlhVTlBRR0p0V0ZWK0JUL1FBQUFBQUJKUlU1RXJrSmdnZz09KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUJBTUFBQUFWYVArTEFBQUFHRkJNVkVVQUFBQlRVMU5OVFUxVFUxTlBUMDlTVWxKU1VsSlRVMU84QjdERUFBQUFCM1JTVGxNQW9BclZLdlZnQnVFZEtnQUFBSjFKUkVGVWVGN3QxVEVPd3lBTVFORzBRNi9VRStSTVhEOWQvdEM2d29tSUZTTDlQK01uQVlPWGVUSXpNek16TXpNemF6OEo5Umk2SG9JVG11SFhoSVNFOG5FaDl5eERoNTVhQ0VVb1RHYmJRd2pxSHdJa1JBRWlJYUcwKzBBQTlWQk1hRTg5Um9nZW93dzkzNk1RcldkQnI0R04vejBJQWRRNm5RL0ZJcFJYRHdIY0ErSklKY1Fvd1FBbEZVQTBNZlFwWExsVlFma3pSNGlnUzZFTmprbm0vd2lhR2hzQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5pY29uLWRpc2FibGVkIHsKICBjb250ZW50OiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSEFBQUFCSUNBTUFBQUFaRjRHNUFBQUFCbEJNVkVWTWFYRlRVMU9YVWo4dEFBQUFBWFJTVGxNQVFPYllaZ0FBQVNaSlJFRlVlQUhkMTFGcTdqQU1SR0dmL1cvNlBvV0I2N1lNcXY1RHlid0cvQ0ZqUnVSOEpCdzMrQnlpUmpnVjlXL1RKMzFQMHRCZkM2K2NqMWhhVUZYS0htVkpvNXdQOThXd1EwWkNiZlVjNkxRNlZ1VUJ6MzFpa0FEa0xNa0RyZlVDNHJSNlFHVytnRjZyeDdOYUhXQ2oxWS9XNmxmNEw3dXR2Z0JTdDNyQkZTUy9YQk1QVUlMY0pJTkhDQldZVWZwV240TkJpMVpmdWRJYzNyZjYvTkdFdkVBK0FzWVRKb3ptWGVtalhlTFpBb3YrbW5rTjJIZnpYcE1TVlFEbkd3Kys1N3FOSjREMXhpdEEyc0orVkFXTXlnU0VhWWYybVlQVGpaZmsySzh3bVA3SExJSDVNZzQvcFArUEVjRHpVdkRNdllicy8yTld3UE81dkJkTVpFNEVFNVVUUUxpQkZEYVVsVERQQlJvSjlIZEFZSWtJbzA2b2czQk5YdEN6eTd6QTFhWGs1eCt0SkFScTYzZUF5Z0FBQUFCSlJVNUVya0pnZ2c9PSkgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU9BQUFBQ1FBUU1BQUFBcndmVmpBQUFBQmxCTVZFVk1hWEZUVTFPWFVqOHRBQUFBQVhSU1RsTUFRT2JZWmdBQUFZZEpSRUZVZUY3RjFFRnF3ekFVQk5BUkFtVmowRlplNVFvQkg2QlgrZG40R2xZMlBZTnpHeC9BMEN2a0NJSnV2SXJhS0pLYmdCdnpmMmc2MndlREdEN0NZZ2dwZkZSZWlzNEowZXk5RUdGSWlFUVFvakZTbEE5a1NJaXFkMEtrRmpLc2V3Z1JiU3RFTjE5bXhVUFR0bVc5SFEvaDZ0eXFOUThObFNNWmR6eUU2cWtvRTB0clZZR0ZtMG4xV1llQmhkdXp3YndCQzd2b1Mrdkl4ZmVNamVhaUx4c01NdFFOd01QdHVldytEanpjVEhrOFlNZkRrbkVjSVVPdGYybFZmZ1ZIM0s0WHY1UFJZQVhSVk10SXRJSjNyZmFDSVZuOURzVEgyTnhpc0FWUmV4MkhoM2hYKy9tUlVSMDhiQXdQRVlzSTUxWnhXSDRRMFNwaWNRUlhleUVhSXVnNDhGRWRlZ0FSZk16L3RBRFZzUmNpd1RBeFczMDhlaG1DMmdMcmFDK1lDYlYzUW9UWmV4YSt6ZWdBRVc1UGhoZ1lmbWJ2SmdjUnFuZ0dCeU9TWGRGSmNMazJKZURQRU4wa3hlMUpoSXQ1RmlGQSt3K0l0TUVMc1V5UEYySWFKNGFJTHFiNEZieFB3aEltd2o2SmF1S2dEVUNZYXhtWUlzZDRLWGRNaklDOUl0QjVCbjRCTlJ3c0cwWE0ybndBQUFBQVNVVk9SSzVDWUlJPSkgMngpOwogIHdpZHRoOiAxMTJweDsKfQoKLmVycm9yLWNvZGUgewogIGRpc3BsYXk6IGJsb2NrOwogIGZvbnQtc2l6ZTogLjhlbTsKfQoKI2NvbnRlbnQtdG9wIHsKICBtYXJnaW46IDIwcHg7Cn0KCiNoZWxwLWJveC1pbm5lciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTsKICBib3JkZXItdG9wOiAxcHggc29saWQgI0VFRTsKICBjb2xvcjogIzQ0NDsKICBwYWRkaW5nOiAyMHB4OwogIHRleHQtYWxpZ246IHN0YXJ0Owp9CgouaGlkZGVuIHsKICBkaXNwbGF5OiBub25lOwp9Cgojc3VnZ2VzdGlvbiB7CiAgbWFyZ2luLXRvcDogMTVweDsKfQoKI3N1Z2dlc3Rpb25zLWxpc3QgcCB7CiAgLXdlYmtpdC1tYXJnaW4tYWZ0ZXI6IDA7Cn0KCiNzdWdnZXN0aW9ucy1saXN0IHVsIHsKICBtYXJnaW4tdG9wOiAwOwp9Cgouc2luZ2xlLXN1Z2dlc3Rpb24gewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBwYWRkaW5nLWxlZnQ6IDA7Cn0KCiNzaG9ydC1zdWdnZXN0aW9uIHsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KCiNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CgogIGNvbG9yOiAjOEY4RjhGOwoKICAvKiBOb3QgZG9uZSBvbiBtb2JpbGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuICovCiAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgcmdiYSgyNTUsMjU1LDI1NSwwLjMpOwoKfQoKW2pzY29udGVudD1ob3N0TmFtZV0sCltqc2NvbnRlbnQ9ZmFpbGVkVXJsXSB7CiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDsKfQoKI3NlYXJjaC1jb250YWluZXIgewogIC8qIFByZXZlbnRzIGEgc3BhY2UgYmV0d2VlbiBjb250cm9scy4gKi8KICBkaXNwbGF5OiBmbGV4OwogIG1hcmdpbi10b3A6IDIwcHg7Cn0KCiNzZWFyY2gtYm94IHsKICBib3JkZXI6IDFweCBzb2xpZCAjY2RjZGNkOwogIGZsZXgtZ3JvdzogMTsKICBmb250LXNpemU6IDFlbTsKICBoZWlnaHQ6IDI2cHg7CiAgbWFyZ2luLXJpZ2h0OiAwOwogIHBhZGRpbmc6IDFweCA5cHg7Cn0KCiNzZWFyY2gtYm94OmZvY3VzIHsKICBib3JkZXI6IDFweCBzb2xpZCByZ2IoOTMsIDE1NCwgMjU1KTsKICBvdXRsaW5lOiBub25lOwp9Cgojc2VhcmNoLWJ1dHRvbiB7CiAgYm9yZGVyOiBub25lOwogIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7CiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDsKICBib3gtc2hhZG93OiBub25lOwogIGRpc3BsYXk6IGZsZXg7CiAgaGVpZ2h0OiAzMHB4OwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwogIHdpZHRoOiA2MHB4Owp9Cgojc2VhcmNoLWltYWdlIHsKICBjb250ZW50OgogICAgICAtd2Via2l0LWltYWdlLXNldCgKICAgICAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUE0QUFBQVBDQVFBQUFCK0hUYi9BQUFBckVsRVFWUjRYbjNOc1VvQ1VCekcwWHZCM1UwY2hSNGdlbzVxaWhwdDZna0N4MGJYRnNNRVJXajJLV3FJYW5Bdm1sVVVvUWFwd1U2ZzRsOEg1YmQ5Wi9pU1BTMGh1L1JxWnFybmNCdXpMbDdVM1JuNGNTcFFGVGVyb2VqSmwxTGdzN2Y0Y2VEUGRlQk1YWXA4NmdhT05ZSmtZODNBbnFIaUdrOXdIbmprMTZQS2dvNU45QlVDa3pQZjVqNk0wUGZ1Vmc1TXltb2V0RndvYUtBbEIyNldkWEF2Sjd1NW1leml0cXRrVC8vN1N2L3U5NkNhTFFBQUFBQkpSVTVFcmtKZ2dnPT0pIDF4LAogICAgICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQndBQUFBZUNBUUFBQUNWekxZVUFBQUJZRWxFUVZSNFhyM1ZNVXVWVVJ6SDhYTzk4amdrR2lrRU5rUkQwS1JHRFVWRFF5MGgyU2lDNEl1SWlrdEw0QXZRdDFDREJKVUp3bzFLWFhTNmNXZEh3N3Rjald3b0M1SHJ4K1VaZ25OTzVDWGlPLzc1akQvK1FaZjlNempza1ZVN0RyVTF6UnY5RzlpcjVoc0E0TmlpODMrR0E5WkkxbkkxRDZ0V0FFMVRSbFFNdXV1RkR0aHpNUWVmZ280bktyK2YzZElHRGRVVUhQWUQxSVNvTVFkZ0pnVWZncWFLRU9jeFdFL0JWVEFySkJ2d0MwY0dZN2dOTGdpWk5zRDFHUDRFUFZuNEV0eUxZUnVjemNKMzRIWU1QNEU3R2RhakRTN0ZjQjQ4ejhBSjhGbUk0VGpvdUJreloyeUJ1UlFNbHNCdXRJWitkZkRWVUJxT2FJSHZhdnBMVkhYZkZtQXF2NDVyOWdFSE5yM3kzaGNBZkxTZ1NNUGdpaVpSKzZaOUFNdUtOQXdxcGpVY0EyaDU1cHhnQWZCV2tZUmxRMjU0WU1KbG9heFBIYkNraUdDeW1MNVJsTEE3R25SRFh5dUM3dWhpY0xvS2RSeWFERTVQbDAwSy8vOTNuQUJxUGdCREs4c2ZXZ0FBQUFCSlJVNUVya0pnZ2c9PSkgMngpOwogIG1hcmdpbjogYXV0bzsKfQoKLnNlY29uZGFyeS1idXR0b24gewogIC13ZWJraXQtbWFyZ2luLWVuZDogMTZweDsKICBiYWNrZ3JvdW5kOiAjZDlkOWQ5OwogIGNvbG9yOiAjNjk2OTY5Owp9Cgouc25hY2tiYXIgewogIGJhY2tncm91bmQ6ICMzMjMyMzI7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGJvdHRvbTogMjRweDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGNvbG9yOiAjZmZmOwogIGZvbnQtc2l6ZTogLjg3ZW07CiAgbGVmdDogMjRweDsKICBtYXgtd2lkdGg6IDU2OHB4OwogIG1pbi13aWR0aDogMjg4cHg7CiAgb3BhY2l0eTogMDsKICBwYWRkaW5nOiAxNnB4IDI0cHggMTJweDsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDkwcHgpOwogIHdpbGwtY2hhbmdlOiBvcGFjaXR5LCB0cmFuc2Zvcm07CiAgei1pbmRleDogOTk5Owp9Cgouc25hY2tiYXItc2hvdyB7CiAgLXdlYmtpdC1hbmltYXRpb246CiAgICBzaG93LXNuYWNrYmFyIC4yNXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpIGZvcndhcmRzLAogICAgaGlkZS1zbmFja2JhciAuMjVzIGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSkgZm9yd2FyZHMgNXM7Cn0KCkAtd2Via2l0LWtleWZyYW1lcyBzaG93LXNuYWNrYmFyIHsKICAxMDAlIHsKICAgIG9wYWNpdHk6IDE7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7CiAgfQp9CgpALXdlYmtpdC1rZXlmcmFtZXMgaGlkZS1zbmFja2JhciB7CiAgMCUgewogICAgb3BhY2l0eTogMTsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OiAwOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDkwcHgpOwogIH0KfQoKLnN1Z2dlc3Rpb25zIHsKICBtYXJnaW4tdG9wOiAxOHB4Owp9Cgouc3VnZ2VzdGlvbi1oZWFkZXIgewogIGZvbnQtd2VpZ2h0OiBib2xkOwogIG1hcmdpbi1ib3R0b206IDRweDsKfQoKLnN1Z2dlc3Rpb24tYm9keSB7CiAgY29sb3I6ICM3Nzc7Cn0KCi8qIEluY3JlYXNlIGxpbmUgaGVpZ2h0IGF0IGhpZ2hlciByZXNvbHV0aW9ucy4gKi8KQG1lZGlhIChtaW4td2lkdGg6IDY0MXB4KSBhbmQgKG1pbi1oZWlnaHQ6IDY0MXB4KSB7CiAgI2hlbHAtYm94LWlubmVyIHsKICAgIGxpbmUtaGVpZ2h0OiAxOHB4OwogIH0KfQoKLyogRGVjcmVhc2UgcGFkZGluZyBhdCBsb3cgc2l6ZXMuICovCkBtZWRpYSAobWF4LXdpZHRoOiA2NDBweCksIChtYXgtaGVpZ2h0OiA2NDBweCkgewogIGgxIHsKICAgIG1hcmdpbjogMCAwIDE1cHg7CiAgfQogICNjb250ZW50LXRvcCB7CiAgICBtYXJnaW46IDE1cHg7CiAgfQogICNoZWxwLWJveC1pbm5lciB7CiAgICBwYWRkaW5nOiAyMHB4OwogIH0KICAuc3VnZ2VzdGlvbnMgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CiAgLnN1Z2dlc3Rpb24taGVhZGVyIHsKICAgIG1hcmdpbi1ib3R0b206IDA7CiAgfQp9CgovKiBEb24ndCBhbGxvdyBvdmVyZmxvdyB3aGVuIGluIGEgc3ViZnJhbWUuICovCmh0bWxbc3ViZnJhbWVdIGJvZHkgewogIG92ZXJmbG93OiBoaWRkZW47Cn0KCiNzdWItZnJhbWUtZXJyb3IgewogIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREOwogIGRpc3BsYXk6IC13ZWJraXQtZmxleDsKICAtd2Via2l0LWZsZXgtZmxvdzogY29sdW1uOwogIGhlaWdodDogMTAwJTsKICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyOwogIGxlZnQ6IDA7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB0b3A6IDA7CiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgZWFzZS1pbi1vdXQ7CiAgd2lkdGg6IDEwMCU7Cn0KCiNzdWItZnJhbWUtZXJyb3I6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNFRUU7Cn0KCiNzdWItZnJhbWUtZXJyb3IgLmljb24tZ2VuZXJpYyB7CiAgbWFyZ2luOiAwIDAgMTZweDsKfQoKI3N1Yi1mcmFtZS1lcnJvci1kZXRhaWxzIHsKICBtYXJnaW46IDAgMTBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgdmlzaWJpbGl0eTogaGlkZGVuOwp9CgovKiBTaG93IGRldGFpbHMgb25seSB3aGVuIGhvdmVyaW5nLiAqLwojc3ViLWZyYW1lLWVycm9yOmhvdmVyICNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CiAgdmlzaWJpbGl0eTogdmlzaWJsZTsKfQoKLyogSWYgdGhlIGlmcmFtZSBpcyB0b28gc21hbGwsIGFsd2F5cyBoaWRlIHRoZSBlcnJvciBjb2RlLiAqLwovKiBUT0RPKG1tZW5rZSk6IFNlZSBpZiBvdmVyZmxvdzogbm8tZGlzcGxheSB3b3JrcyBiZXR0ZXIsIG9uY2Ugc3VwcG9ydGVkLiAqLwpAbWVkaWEgKG1heC13aWR0aDogMjAwcHgpLCAobWF4LWhlaWdodDogOTVweCkgewogICNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CiAgICBkaXNwbGF5OiBub25lOwogIH0KfQoKLyogQWRqdXN0IGljb24gZm9yIHNtYWxsIGVtYmVkZGVkIGZyYW1lcyBpbiBhcHBzLiAqLwpAbWVkaWEgKG1heC1oZWlnaHQ6IDEwMHB4KSB7CiAgI3N1Yi1mcmFtZS1lcnJvciAuaWNvbi1nZW5lcmljIHsKICAgIGhlaWdodDogYXV0bzsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmctdG9wOiAwOwogICAgd2lkdGg6IDI1cHg7CiAgfQp9CgovKiBkZXRhaWxzLWJ1dHRvbiBpcyBzcGVjaWFsOyBpdCdzIGEgPGJ1dHRvbj4gZWxlbWVudCB0aGF0IGxvb2tzIGxpa2UgYSBsaW5rLiAqLwojZGV0YWlscy1idXR0b24gewogIGJveC1zaGFkb3c6IG5vbmU7CiAgbWluLXdpZHRoOiAwOwp9CgovKiBTdHlsZXMgZm9yIHBsYXRmb3JtIGRlcGVuZGVudCBzZXBhcmF0aW9uIG9mIGNvbnRyb2xzIGFuZCBkZXRhaWxzIGJ1dHRvbi4gKi8KLnN1Z2dlc3RlZC1sZWZ0ID4gI2NvbnRyb2wtYnV0dG9ucywKLnN1Z2dlc3RlZC1sZWZ0ICNzdGFsZS1sb2FkLWJ1dHRvbiwKLnN1Z2dlc3RlZC1yaWdodCA+ICNkZXRhaWxzLWJ1dHRvbiB7CiAgZmxvYXQ6IGxlZnQ7Cn0KCi5zdWdnZXN0ZWQtcmlnaHQgPiAjY29udHJvbC1idXR0b25zLAouc3VnZ2VzdGVkLXJpZ2h0ICNzdGFsZS1sb2FkLWJ1dHRvbiwKLnN1Z2dlc3RlZC1sZWZ0ID4gI2RldGFpbHMtYnV0dG9uIHsKICBmbG9hdDogcmlnaHQ7Cn0KCi5zdWdnZXN0ZWQtbGVmdCAuc2Vjb25kYXJ5LWJ1dHRvbiB7CiAgLXdlYmtpdC1tYXJnaW4tZW5kOiAwcHg7CiAgLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDE2cHg7Cn0KCiNkZXRhaWxzLWJ1dHRvbi5zaW5ndWxhciB7CiAgZmxvYXQ6IG5vbmU7Cn0KCi8qIGRvd25sb2FkLWJ1dHRvbiBzaG93cyBib3RoIGljb24gYW5kIHRleHQuICovCiNkb3dubG9hZC1idXR0b24gewogIGJveC1zaGFkb3c6IG5vbmU7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgojZG93bmxvYWQtYnV0dG9uOmJlZm9yZSB7CiAgLXdlYmtpdC1tYXJnaW4tZW5kOiA0cHg7CiAgYmFja2dyb3VuZDogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQVlDQVFBQUFCS2Z2VnpBQUFBTzBsRVFWUTR5Mk5nR0FyZ1B4SVkxWUNoc09FL0x0QkFtcFlHMG14cElPU0RCcEtVbzJscElEWnhOSkNrSEtxbFlaQWxhM1JBSFExREZnQUFSUnJvSHlMTlR3d0FBQUFBU1VWT1JLNUNZSUk9KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBREFBQUFBd0NBUUFBQUQ5Q3pFTUFBQUFaRWxFUVZSWXcrM1J1dzNBTUF3RFVZM096WlVtUlJENEU5aWltOXdOd0FkYkVVUkh5azRBQUFBQVRpQ1ZLOGxMeVBzS2VUOUszbHNvd25udW5ma1B4Tzc4aEtpWUh4QlY4eDJpY3I1QlZNKy9DTWY4ZzNETjM0UnpuczZWaXdIVUFVUS82d0lBZDVLbTdsNmM4QUFBQUFCSlJVNUVya0pnZ2c9PSkgMngpCiAgICBuby1yZXBlYXQ7CiAgY29udGVudDogJyc7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIHdpZHRoOiAyNHB4OwogIGhlaWdodDogMjRweDsKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9CgojZG93bmxvYWQtYnV0dG9uOmRpc2FibGVkIHsKICBiYWNrZ3JvdW5kOiByZ2IoMTgwLCAyMDYsIDI0OSk7CiAgY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTsKfQoKI2J1dHRvbnM6OmFmdGVyIHsKICBjbGVhcjogYm90aDsKICBjb250ZW50OiAnJzsKICBkaXNwbGF5OiBibG9jazsKICB3aWR0aDogMTAwJTsKfQoKLyogT2ZmbGluZSBwYWdlICovCi5vZmZsaW5lIHsKICB0cmFuc2l0aW9uOiAtd2Via2l0LWZpbHRlciAxLjVzIGN1YmljLWJlemllcigwLjY1LCAwLjA1LCAwLjM2LCAxKSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEuNXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuMDUsIDAuMzYsIDEpOwogIHdpbGwtY2hhbmdlOiAtd2Via2l0LWZpbHRlciwgYmFja2dyb3VuZC1jb2xvcjsKfQoKLm9mZmxpbmUgI21haW4tbWVzc2FnZSA+IHAgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5vZmZsaW5lLmludmVydGVkIHsKICAtd2Via2l0LWZpbHRlcjogaW52ZXJ0KDEwMCUpOwogIGJhY2tncm91bmQtY29sb3I6ICMwMDA7Cn0KCi5vZmZsaW5lIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgY29sb3I6ICMyYjJiMmI7CiAgZm9udC1zaXplOiAxZW07CiAgbGluZS1oZWlnaHQ6IDEuNTU7CiAgbWFyZ2luOiAwIGF1dG87CiAgbWF4LXdpZHRoOiA2MDBweDsKICBwYWRkaW5nLXRvcDogMTAwcHg7CiAgd2lkdGg6IDEwMCU7Cn0KCi5vZmZsaW5lIC5ydW5uZXItY29udGFpbmVyIHsKICBkaXJlY3Rpb246IGx0cjsKICBoZWlnaHQ6IDE1MHB4OwogIG1heC13aWR0aDogNjAwcHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAzNXB4OwogIHdpZHRoOiA0NHB4Owp9Cgoub2ZmbGluZSAucnVubmVyLWNhbnZhcyB7CiAgaGVpZ2h0OiAxNTBweDsKICBtYXgtd2lkdGg6IDYwMHB4OwogIG9wYWNpdHk6IDE7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIHotaW5kZXg6IDI7Cn0KCi5vZmZsaW5lIC5jb250cm9sbGVyIHsKICBiYWNrZ3JvdW5kOiByZ2JhKDI0NywyNDcsMjQ3LCAuMSk7CiAgaGVpZ2h0OiAxMDB2aDsKICBsZWZ0OiAwOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgd2lkdGg6IDEwMHZ3OwogIHotaW5kZXg6IDE7Cn0KCiNvZmZsaW5lLXJlc291cmNlcyB7CiAgZGlzcGxheTogbm9uZTsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDQyMHB4KSB7CiAgLnN1Z2dlc3RlZC1sZWZ0ID4gI2NvbnRyb2wtYnV0dG9ucywKICAuc3VnZ2VzdGVkLXJpZ2h0ID4gI2NvbnRyb2wtYnV0dG9ucyB7CiAgICBmbG9hdDogbm9uZTsKICB9CgogIC5zbmFja2JhciB7CiAgICBsZWZ0OiAwOwogICAgYm90dG9tOiAwOwogICAgd2lkdGg6IDEwMCU7CiAgICBib3JkZXItcmFkaXVzOiAwOwogIH0KfQoKQG1lZGlhIChtYXgtaGVpZ2h0OiAzNTBweCkgewogIGgxIHsKICAgIG1hcmdpbjogMCAwIDE1cHg7CiAgfQoKICAuaWNvbi1vZmZsaW5lIHsKICAgIG1hcmdpbjogMCAwIDEwcHg7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogNSU7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMzBweDsKICB9Cn0KCkBtZWRpYSAobWluLXdpZHRoOiA2MDBweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAub2ZmbGluZSAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLWxlZnQ6IDA7CiAgICBtYXJnaW4tcmlnaHQ6IDA7CiAgfQp9CgpAbWVkaWEgKG1pbi13aWR0aDogNDIwcHgpIGFuZCAobWF4LXdpZHRoOiA3MzZweCkgYW5kCiAgICAgICAobWluLWhlaWdodDogMjQwcHgpIGFuZCAobWF4LWhlaWdodDogNDIwcHgpIGFuZAogICAgICAgKG9yaWVudGF0aW9uOmxhbmRzY2FwZSkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiAxMDBweDsKICB9Cn0KCkBtZWRpYSAobWluLWhlaWdodDogMjQwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkgewogIC5vZmZsaW5lIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiA5MHB4OwogIH0KCiAgLmljb24tb2ZmbGluZSB7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIH0KfQoKQG1lZGlhIChtYXgtaGVpZ2h0OiAzMjBweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgLmljb24tb2ZmbGluZSB7CiAgICBtYXJnaW4tYm90dG9tOiAwOwogIH0KCiAgLm9mZmxpbmUgLnJ1bm5lci1jb250YWluZXIgewogICAgdG9wOiAxMHB4OwogIH0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDI0MHB4KSB7CiAgYnV0dG9uIHsKICAgIHBhZGRpbmctbGVmdDogMTJweDsKICAgIHBhZGRpbmctcmlnaHQ6IDEycHg7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgb3ZlcmZsb3c6IGluaGVyaXQ7CiAgICBwYWRkaW5nOiAwIDhweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiAxMjBweCkgewogIGJ1dHRvbiB7CiAgICB3aWR0aDogYXV0bzsKICB9Cn0KCiAgLy8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwoKICAvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2hyb21pdW0gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZQovLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLgoKZnVuY3Rpb24gdG9nZ2xlSGVscEJveCgpIHsKICB2YXIgaGVscEJveE91dGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGFpbHMnKTsKICBoZWxwQm94T3V0ZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgdmFyIGRldGFpbHNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscy1idXR0b24nKTsKICBpZiAoaGVscEJveE91dGVyLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpCiAgICBkZXRhaWxzQnV0dG9uLmlubmVyVGV4dCA9IGRldGFpbHNCdXR0b24uZGV0YWlsc1RleHQ7CiAgZWxzZQogICAgZGV0YWlsc0J1dHRvbi5pbm5lclRleHQgPSBkZXRhaWxzQnV0dG9uLmhpZGVEZXRhaWxzVGV4dDsKCiAgLy8gRGV0YWlscyBhcHBlYXJzIG92ZXIgdGhlIG1haW4gY29udGVudCBvbiBzbWFsbCBzY3JlZW5zLgogIGlmIChtb2JpbGVOYXYpIHsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLWNvbnRlbnQnKS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTsKICAgIHZhciBydW5uZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucnVubmVyLWNvbnRhaW5lcicpOwogICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICBydW5uZXJDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBkaWFnbm9zZUVycm9ycygpIHsKLy8gCiAgICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpCiAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuZGlhZ25vc2VFcnJvcnNCdXR0b25DbGljaygpOwovLyAKLy8gCn0KCi8vIFN1YmZyYW1lcyB1c2UgYSBkaWZmZXJlbnQgbGF5b3V0IGJ1dCB0aGUgc2FtZSBodG1sIGZpbGUuICBUaGlzIGlzIHRvIG1ha2UgaXQKLy8gZWFzaWVyIHRvIHN1cHBvcnQgcGxhdGZvcm1zIHRoYXQgbG9hZCB0aGUgZXJyb3IgcGFnZSB2aWEgZGlmZmVyZW50Ci8vIG1lY2hhbmlzbXMgKEN1cnJlbnRseSBqdXN0IGlPUykuCmlmICh3aW5kb3cudG9wLmxvY2F0aW9uICE9IHdpbmRvdy5sb2NhdGlvbikKICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdWJmcmFtZScsICcnKTsKCi8vIFJlLXJlbmRlcnMgdGhlIGVycm9yIHBhZ2UgdXNpbmcgfHN0cmluZ3N8IGFzIHRoZSBkaWN0aW9uYXJ5IG9mIHZhbHVlcy4KLy8gVXNlZCBieSBOZXRFcnJvclRhYkhlbHBlciB0byB1cGRhdGUgRE5TIGVycm9yIHBhZ2VzIHdpdGggcHJvYmUgcmVzdWx0cy4KZnVuY3Rpb24gdXBkYXRlRm9yRG5zUHJvYmUoc3RyaW5ncykgewogIHZhciBjb250ZXh0ID0gbmV3IEpzRXZhbENvbnRleHQoc3RyaW5ncyk7CiAganN0UHJvY2Vzcyhjb250ZXh0LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndCcpKTsKfQoKLy8gR2l2ZW4gdGhlIGNsYXNzTGlzdCBwcm9wZXJ0eSBvZiBhbiBlbGVtZW50LCBhZGRzIGFuIGljb24gY2xhc3MgdG8gdGhlIGxpc3QKLy8gYW5kIHJlbW92ZXMgdGhlIHByZXZpb3VzbHktCmZ1bmN0aW9uIHVwZGF0ZUljb25DbGFzcyhjbGFzc0xpc3QsIG5ld0NsYXNzKSB7CiAgdmFyIG9sZENsYXNzOwoKICBpZiAoY2xhc3NMaXN0Lmhhc093blByb3BlcnR5KCdsYXN0X2ljb25fY2xhc3MnKSkgewogICAgb2xkQ2xhc3MgPSBjbGFzc0xpc3RbJ2xhc3RfaWNvbl9jbGFzcyddOwogICAgaWYgKG9sZENsYXNzID09IG5ld0NsYXNzKQogICAgICByZXR1cm47CiAgfQoKICBjbGFzc0xpc3QuYWRkKG5ld0NsYXNzKTsKICBpZiAob2xkQ2xhc3MgIT09IHVuZGVmaW5lZCkKICAgIGNsYXNzTGlzdC5yZW1vdmUob2xkQ2xhc3MpOwoKICBjbGFzc0xpc3RbJ2xhc3RfaWNvbl9jbGFzcyddID0gbmV3Q2xhc3M7CgogIGlmIChuZXdDbGFzcyA9PSAnaWNvbi1vZmZsaW5lJykgewogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvZmZsaW5lJyk7CiAgICBuZXcgUnVubmVyKCcuaW50ZXJzdGl0aWFsLXdyYXBwZXInKTsKICB9IGVsc2UgewogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCduZXRlcnJvcicpOwogIH0KfQoKLy8gRG9lcyBhIHNlYXJjaCB1c2luZyB8YmFzZVNlYXJjaFVybHwgYW5kIHRoZSB0ZXh0IGluIHRoZSBzZWFyY2ggYm94LgpmdW5jdGlvbiBzZWFyY2goYmFzZVNlYXJjaFVybCkgewogIHZhciBzZWFyY2hUZXh0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtYm94Jyk7CiAgZG9jdW1lbnQubG9jYXRpb24gPSBiYXNlU2VhcmNoVXJsICsgc2VhcmNoVGV4dE5vZGUudmFsdWU7CiAgcmV0dXJuIGZhbHNlOwp9CgovLyBVc2UgdG8gdHJhY2sgY2xpY2tzIG9uIGVsZW1lbnRzIGdlbmVyYXRlZCBieSB0aGUgbmF2aWdhdGlvbiBjb3JyZWN0aW9uCi8vIHNlcnZpY2UuICBJZiB8dHJhY2tpbmdJZHwgaXMgbmVnYXRpdmUsIHRoZSBlbGVtZW50IGRvZXMgbm90IGNvbWUgZnJvbSB0aGUKLy8gY29ycmVjdGlvbiBzZXJ2aWNlLgpmdW5jdGlvbiB0cmFja0NsaWNrKHRyYWNraW5nSWQpIHsKICAvLyBUaGlzIGNhbid0IGJlIGRvbmUgd2l0aCBYSFJzIGJlY2F1c2UgWEhScyBhcmUgY2FuY2VsbGVkIG9uIG5hdmlnYXRpb24KICAvLyBzdGFydCwgYW5kIGJlY2F1c2UgdGhlc2UgYXJlIGNyb3NzLXNpdGUgcmVxdWVzdHMuCiAgaWYgKHRyYWNraW5nSWQgPj0gMCAmJiBlcnJvclBhZ2VDb250cm9sbGVyKQogICAgZXJyb3JQYWdlQ29udHJvbGxlci50cmFja0NsaWNrKHRyYWNraW5nSWQpOwp9CgovLyBDYWxsZWQgd2hlbiBhbiA8YT4gdGFnIGdlbmVyYXRlZCBieSB0aGUgbmF2aWdhdGlvbiBjb3JyZWN0aW9uIHNlcnZpY2UgaXMKLy8gY2xpY2tlZC4gIFNlcGFyYXRlIGZ1bmN0aW9uIGZyb20gdHJhY2tDbGljayBzbyB0aGUgcmVzb3VyY2VzIGRvbid0IGhhdmUgdG8KLy8gYmUgdXBkYXRlZCBpZiBuZXcgZGF0YSBpcyBhZGRlZCB0byBqc3RkYXRhLgpmdW5jdGlvbiBsaW5rQ2xpY2tlZChqc3RkYXRhKSB7CiAgdHJhY2tDbGljayhqc3RkYXRhLnRyYWNraW5nSWQpOwp9CgovLyBJbXBsZW1lbnRzIGJ1dHRvbiBjbGlja3MuICBUaGlzIGZ1bmN0aW9uIGlzIG5lZWRlZCBkdXJpbmcgdGhlIHRyYW5zaXRpb24KLy8gYmV0d2VlbiBpbXBsZW1lbnRpbmcgdGhlc2UgaW4gdHJ1bmsgY2hyb21pdW0gYW5kIGltcGxlbWVudGluZyB0aGVtIGluCi8vIGlPUy4KZnVuY3Rpb24gcmVsb2FkQnV0dG9uQ2xpY2sodXJsKSB7CiAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICBlcnJvclBhZ2VDb250cm9sbGVyLnJlbG9hZEJ1dHRvbkNsaWNrKCk7CiAgfSBlbHNlIHsKICAgIGxvY2F0aW9uID0gdXJsOwogIH0KfQoKZnVuY3Rpb24gc2hvd1NhdmVkQ29weUJ1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5zaG93U2F2ZWRDb3B5QnV0dG9uQ2xpY2soKTsKICB9Cn0KCmZ1bmN0aW9uIGRvd25sb2FkQnV0dG9uQ2xpY2soKSB7CiAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRvd25sb2FkQnV0dG9uQ2xpY2soKTsKICAgIHZhciBkb3dubG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb3dubG9hZC1idXR0b24nKTsKICAgIGRvd25sb2FkQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsKICAgIGRvd25sb2FkQnV0dG9uLnRleHRDb250ZW50ID0gZG93bmxvYWRCdXR0b24uZGlzYWJsZWRUZXh0OwogIH0KfQoKZnVuY3Rpb24gZGV0YWlsc0J1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuZGV0YWlsc0J1dHRvbkNsaWNrKCk7Cn0KCi8qKgogKiBSZXBsYWNlIHRoZSByZWxvYWQgYnV0dG9uIHdpdGggdGhlIEdvb2dsZSBjYWNoZWQgY29weSBzdWdnZXN0aW9uLgogKi8KZnVuY3Rpb24gc2V0VXBDYWNoZWRCdXR0b24oYnV0dG9uU3RyaW5ncykgewogIHZhciByZWxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVsb2FkLWJ1dHRvbicpOwoKICByZWxvYWRCdXR0b24udGV4dENvbnRlbnQgPSBidXR0b25TdHJpbmdzLm1zZzsKICB2YXIgdXJsID0gYnV0dG9uU3RyaW5ncy5jYWNoZVVybDsKICB2YXIgdHJhY2tpbmdJZCA9IGJ1dHRvblN0cmluZ3MudHJhY2tpbmdJZDsKICByZWxvYWRCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIHRyYWNrQ2xpY2sodHJhY2tpbmdJZCk7CiAgICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpIHsKICAgICAgZXJyb3JQYWdlQ29udHJvbGxlci50cmFja0NhY2hlZENvcHlCdXR0b25DbGljaygpOwogICAgfQogICAgbG9jYXRpb24gPSB1cmw7CiAgfTsKICByZWxvYWRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICcnOwogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sLWJ1dHRvbnMnKS5oaWRkZW4gPSBmYWxzZTsKfQoKdmFyIHByaW1hcnlDb250cm9sT25MZWZ0ID0gdHJ1ZTsKLy8gCgpmdW5jdGlvbiBvbkRvY3VtZW50TG9hZCgpIHsKICB2YXIgY29udHJvbEJ1dHRvbkRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sLWJ1dHRvbnMnKTsKICB2YXIgcmVsb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbG9hZC1idXR0b24nKTsKICB2YXIgZGV0YWlsc0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzLWJ1dHRvbicpOwogIHZhciBzaG93U2F2ZWRDb3B5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3ctc2F2ZWQtY29weS1idXR0b24nKTsKICB2YXIgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtYnV0dG9uJyk7CgogIHZhciByZWxvYWRCdXR0b25WaXNpYmxlID0gbG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdyZWxvYWRCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ3JlbG9hZEJ1dHRvbicpLm1zZzsKICB2YXIgc2hvd1NhdmVkQ29weUJ1dHRvblZpc2libGUgPQogICAgICBsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ3Nob3dTYXZlZENvcHlCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ3Nob3dTYXZlZENvcHlCdXR0b24nKS5tc2c7CiAgdmFyIGRvd25sb2FkQnV0dG9uVmlzaWJsZSA9CiAgICAgIGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygnZG93bmxvYWRCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2Rvd25sb2FkQnV0dG9uJykubXNnOwoKICB2YXIgcHJpbWFyeUJ1dHRvbiwgc2Vjb25kYXJ5QnV0dG9uOwogIGlmIChzaG93U2F2ZWRDb3B5QnV0dG9uLnByaW1hcnkpIHsKICAgIHByaW1hcnlCdXR0b24gPSBzaG93U2F2ZWRDb3B5QnV0dG9uOwogICAgc2Vjb25kYXJ5QnV0dG9uID0gcmVsb2FkQnV0dG9uOwogIH0gZWxzZSB7CiAgICBwcmltYXJ5QnV0dG9uID0gcmVsb2FkQnV0dG9uOwogICAgc2Vjb25kYXJ5QnV0dG9uID0gc2hvd1NhdmVkQ29weUJ1dHRvbjsKICB9CgogIC8vIFNldHMgdXAgdGhlIHByb3BlciBidXR0b24gbGF5b3V0IGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybS4KICBpZiAocHJpbWFyeUNvbnRyb2xPbkxlZnQpIHsKICAgIGJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgnc3VnZ2VzdGVkLWxlZnQnKTsKICAgIGNvbnRyb2xCdXR0b25EaXYuaW5zZXJ0QmVmb3JlKHNlY29uZGFyeUJ1dHRvbiwgcHJpbWFyeUJ1dHRvbik7CiAgfSBlbHNlIHsKICAgIGJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgnc3VnZ2VzdGVkLXJpZ2h0Jyk7CiAgICBjb250cm9sQnV0dG9uRGl2Lmluc2VydEJlZm9yZShwcmltYXJ5QnV0dG9uLCBzZWNvbmRhcnlCdXR0b24pOwogIH0KCiAgLy8gQ2hlY2sgZm9yIEdvb2dsZSBjYWNoZWQgY29weSBzdWdnZXN0aW9uLgogIGlmIChsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ2NhY2hlQnV0dG9uJykpIHsKICAgIHNldFVwQ2FjaGVkQnV0dG9uKGxvYWRUaW1lRGF0YS5nZXRWYWx1ZSgnY2FjaGVCdXR0b24nKSk7CiAgfQoKICBpZiAocmVsb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICYmCiAgICAgIHNob3dTYXZlZENvcHlCdXR0b24uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgJiYKICAgICAgZG93bmxvYWRCdXR0b24uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgIGRldGFpbHNCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2luZ3VsYXInKTsKICB9CgogIC8vIFNob3cgY29udHJvbCBidXR0b25zLgogIGlmIChyZWxvYWRCdXR0b25WaXNpYmxlIHx8IHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlIHx8CiAgICAgIGRvd25sb2FkQnV0dG9uVmlzaWJsZSkgewogICAgY29udHJvbEJ1dHRvbkRpdi5oaWRkZW4gPSBmYWxzZTsKCiAgICAvLyBTZXQgdGhlIHNlY29uZGFyeSBidXR0b24gc3RhdGUgaW4gdGhlIGNhc2VzIG9mIHR3byBjYWxsIHRvIGFjdGlvbnMuCiAgICBpZiAoKHJlbG9hZEJ1dHRvblZpc2libGUgfHwgZG93bmxvYWRCdXR0b25WaXNpYmxlKSAmJgogICAgICAgIHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlKSB7CiAgICAgIHNlY29uZGFyeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWNvbmRhcnktYnV0dG9uJyk7CiAgICB9CiAgfQp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgb25Eb2N1bWVudExvYWQpOwoKICAvLyBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KKGZ1bmN0aW9uKCkgewondXNlIHN0cmljdCc7Ci8qKgogKiBULVJleCBydW5uZXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRlckNvbnRhaW5lcklkIE91dGVyIGNvbnRhaW5pbmcgZWxlbWVudCBpZC4KICogQHBhcmFtIHtPYmplY3R9IG9wdF9jb25maWcKICogQGNvbnN0cnVjdG9yCiAqIEBleHBvcnQKICovCmZ1bmN0aW9uIFJ1bm5lcihvdXRlckNvbnRhaW5lcklkLCBvcHRfY29uZmlnKSB7CiAgLy8gU2luZ2xldG9uCiAgaWYgKFJ1bm5lci5pbnN0YW5jZV8pIHsKICAgIHJldHVybiBSdW5uZXIuaW5zdGFuY2VfOwogIH0KICBSdW5uZXIuaW5zdGFuY2VfID0gdGhpczsKCiAgdGhpcy5vdXRlckNvbnRhaW5lckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvdXRlckNvbnRhaW5lcklkKTsKICB0aGlzLmNvbnRhaW5lckVsID0gbnVsbDsKICB0aGlzLnNuYWNrYmFyRWwgPSBudWxsOwoKICB0aGlzLmNvbmZpZyA9IG9wdF9jb25maWcgfHwgUnVubmVyLmNvbmZpZzsKCiAgdGhpcy5kaW1lbnNpb25zID0gUnVubmVyLmRlZmF1bHREaW1lbnNpb25zOwoKICB0aGlzLmNhbnZhcyA9IG51bGw7CiAgdGhpcy5jYW52YXNDdHggPSBudWxsOwoKICB0aGlzLnRSZXggPSBudWxsOwoKICB0aGlzLmRpc3RhbmNlTWV0ZXIgPSBudWxsOwogIHRoaXMuZGlzdGFuY2VSYW4gPSAwOwoKICB0aGlzLmhpZ2hlc3RTY29yZSA9IDA7CgogIHRoaXMudGltZSA9IDA7CiAgdGhpcy5ydW5uaW5nVGltZSA9IDA7CiAgdGhpcy5tc1BlckZyYW1lID0gMTAwMCAvIEZQUzsKICB0aGlzLmN1cnJlbnRTcGVlZCA9IHRoaXMuY29uZmlnLlNQRUVEOwoKICB0aGlzLm9ic3RhY2xlcyA9IFtdOwoKICB0aGlzLmFjdGl2YXRlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIHRoZSBlYXN0ZXIgZWdnIGhhcyBiZWVuIGFjdGl2YXRlZC4KICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsgLy8gV2hldGhlciB0aGUgZ2FtZSBpcyBjdXJyZW50bHkgaW4gcGxheSBzdGF0ZS4KICB0aGlzLmNyYXNoZWQgPSBmYWxzZTsKICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogIHRoaXMuaW52ZXJ0ZWQgPSBmYWxzZTsKICB0aGlzLmludmVydFRpbWVyID0gMDsKICB0aGlzLnJlc2l6ZVRpbWVySWRfID0gbnVsbDsKCiAgdGhpcy5wbGF5Q291bnQgPSAwOwoKICAvLyBTb3VuZCBGWC4KICB0aGlzLmF1ZGlvQnVmZmVyID0gbnVsbDsKICB0aGlzLnNvdW5kRnggPSB7fTsKCiAgLy8gR2xvYmFsIHdlYiBhdWRpbyBjb250ZXh0IGZvciBwbGF5aW5nIHNvdW5kcy4KICB0aGlzLmF1ZGlvQ29udGV4dCA9IG51bGw7CgogIC8vIEltYWdlcy4KICB0aGlzLmltYWdlcyA9IHt9OwogIHRoaXMuaW1hZ2VzTG9hZGVkID0gMDsKCiAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7CiAgICB0aGlzLnNldHVwRGlzYWJsZWRSdW5uZXIoKTsKICB9IGVsc2UgewogICAgdGhpcy5sb2FkSW1hZ2VzKCk7CiAgfQp9CndpbmRvd1snUnVubmVyJ10gPSBSdW5uZXI7CgoKLyoqCiAqIERlZmF1bHQgZ2FtZSB3aWR0aC4KICogQGNvbnN0CiAqLwp2YXIgREVGQVVMVF9XSURUSCA9IDYwMDsKCi8qKgogKiBGcmFtZXMgcGVyIHNlY29uZC4KICogQGNvbnN0CiAqLwp2YXIgRlBTID0gNjA7CgovKiogQGNvbnN0ICovCnZhciBJU19ISURQSSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMTsKCi8qKiBAY29uc3QgKi8KdmFyIElTX0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0pOwoKLyoqIEBjb25zdCAqLwp2YXIgSVNfTU9CSUxFID0gL0FuZHJvaWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHx8IElTX0lPUzsKCi8qKiBAY29uc3QgKi8KdmFyIElTX1RPVUNIX0VOQUJMRUQgPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7CgovKioKICogRGVmYXVsdCBnYW1lIGNvbmZpZ3VyYXRpb24uCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpSdW5uZXIuY29uZmlnID0gewogIEFDQ0VMRVJBVElPTjogMC4wMDEsCiAgQkdfQ0xPVURfU1BFRUQ6IDAuMiwKICBCT1RUT01fUEFEOiAxMCwKICBDTEVBUl9USU1FOiAzMDAwLAogIENMT1VEX0ZSRVFVRU5DWTogMC41LAogIEdBTUVPVkVSX0NMRUFSX1RJTUU6IDc1MCwKICBHQVBfQ09FRkZJQ0lFTlQ6IDAuNiwKICBHUkFWSVRZOiAwLjYsCiAgSU5JVElBTF9KVU1QX1ZFTE9DSVRZOiAxMiwKICBJTlZFUlRfRkFERV9EVVJBVElPTjogMTIwMDAsCiAgSU5WRVJUX0RJU1RBTkNFOiA3MDAsCiAgTUFYX0JMSU5LX0NPVU5UOiAzLAogIE1BWF9DTE9VRFM6IDYsCiAgTUFYX09CU1RBQ0xFX0xFTkdUSDogMywKICBNQVhfT0JTVEFDTEVfRFVQTElDQVRJT046IDIsCiAgTUFYX1NQRUVEOiAxMywKICBNSU5fSlVNUF9IRUlHSFQ6IDM1LAogIE1PQklMRV9TUEVFRF9DT0VGRklDSUVOVDogMS4yLAogIFJFU09VUkNFX1RFTVBMQVRFX0lEOiAnYXVkaW8tcmVzb3VyY2VzJywKICBTUEVFRDogNiwKICBTUEVFRF9EUk9QX0NPRUZGSUNJRU5UOiAzCn07CgoKLyoqCiAqIERlZmF1bHQgZGltZW5zaW9ucy4KICogQGVudW0ge3N0cmluZ30KICovClJ1bm5lci5kZWZhdWx0RGltZW5zaW9ucyA9IHsKICBXSURUSDogREVGQVVMVF9XSURUSCwKICBIRUlHSFQ6IDE1MAp9OwoKCi8qKgogKiBDU1MgY2xhc3MgbmFtZXMuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuY2xhc3NlcyA9IHsKICBDQU5WQVM6ICdydW5uZXItY2FudmFzJywKICBDT05UQUlORVI6ICdydW5uZXItY29udGFpbmVyJywKICBDUkFTSEVEOiAnY3Jhc2hlZCcsCiAgSUNPTjogJ2ljb24tb2ZmbGluZScsCiAgSU5WRVJURUQ6ICdpbnZlcnRlZCcsCiAgU05BQ0tCQVI6ICdzbmFja2JhcicsCiAgU05BQ0tCQVJfU0hPVzogJ3NuYWNrYmFyLXNob3cnLAogIFRPVUNIX0NPTlRST0xMRVI6ICdjb250cm9sbGVyJwp9OwoKCi8qKgogKiBTcHJpdGUgZGVmaW5pdGlvbiBsYXlvdXQgb2YgdGhlIHNwcml0ZXNoZWV0LgogKiBAZW51bSB7T2JqZWN0fQogKi8KUnVubmVyLnNwcml0ZURlZmluaXRpb24gPSB7CiAgTERQSTogewogICAgQ0FDVFVTX0xBUkdFOiB7eDogMzMyLCB5OiAyfSwKICAgIENBQ1RVU19TTUFMTDoge3g6IDIyOCwgeTogMn0sCiAgICBDTE9VRDoge3g6IDg2LCB5OiAyfSwKICAgIEhPUklaT046IHt4OiAyLCB5OiA1NH0sCiAgICBNT09OOiB7eDogNDg0LCB5OiAyfSwKICAgIFBURVJPREFDVFlMOiB7eDogMTM0LCB5OiAyfSwKICAgIFJFU1RBUlQ6IHt4OiAyLCB5OiAyfSwKICAgIFRFWFRfU1BSSVRFOiB7eDogNjU1LCB5OiAyfSwKICAgIFRSRVg6IHt4OiA4NDgsIHk6IDJ9LAogICAgU1RBUjoge3g6IDY0NSwgeTogMn0KICB9LAogIEhEUEk6IHsKICAgIENBQ1RVU19MQVJHRToge3g6IDY1MiwgeTogMn0sCiAgICBDQUNUVVNfU01BTEw6IHt4OiA0NDYsIHk6IDJ9LAogICAgQ0xPVUQ6IHt4OiAxNjYsIHk6IDJ9LAogICAgSE9SSVpPTjoge3g6IDIsIHk6IDEwNH0sCiAgICBNT09OOiB7eDogOTU0LCB5OiAyfSwKICAgIFBURVJPREFDVFlMOiB7eDogMjYwLCB5OiAyfSwKICAgIFJFU1RBUlQ6IHt4OiAyLCB5OiAyfSwKICAgIFRFWFRfU1BSSVRFOiB7eDogMTI5NCwgeTogMn0sCiAgICBUUkVYOiB7eDogMTY3OCwgeTogMn0sCiAgICBTVEFSOiB7eDogMTI3NiwgeTogMn0KICB9Cn07CgoKLyoqCiAqIFNvdW5kIEZYLiBSZWZlcmVuY2UgdG8gdGhlIElEIG9mIHRoZSBhdWRpbyB0YWcgb24gaW50ZXJzdGl0aWFsIHBhZ2UuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuc291bmRzID0gewogIEJVVFRPTl9QUkVTUzogJ29mZmxpbmUtc291bmQtcHJlc3MnLAogIEhJVDogJ29mZmxpbmUtc291bmQtaGl0JywKICBTQ09SRTogJ29mZmxpbmUtc291bmQtcmVhY2hlZCcKfTsKCgovKioKICogS2V5IGNvZGUgbWFwcGluZy4KICogQGVudW0ge09iamVjdH0KICovClJ1bm5lci5rZXljb2RlcyA9IHsKICBKVU1QOiB7JzM4JzogMSwgJzMyJzogMX0sICAvLyBVcCwgc3BhY2ViYXIKICBEVUNLOiB7JzQwJzogMX0sICAvLyBEb3duCiAgUkVTVEFSVDogeycxMyc6IDF9ICAvLyBFbnRlcgp9OwoKCi8qKgogKiBSdW5uZXIgZXZlbnQgbmFtZXMuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuZXZlbnRzID0gewogIEFOSU1fRU5EOiAnd2Via2l0QW5pbWF0aW9uRW5kJywKICBDTElDSzogJ2NsaWNrJywKICBLRVlET1dOOiAna2V5ZG93bicsCiAgS0VZVVA6ICdrZXl1cCcsCiAgTU9VU0VET1dOOiAnbW91c2Vkb3duJywKICBNT1VTRVVQOiAnbW91c2V1cCcsCiAgUkVTSVpFOiAncmVzaXplJywKICBUT1VDSEVORDogJ3RvdWNoZW5kJywKICBUT1VDSFNUQVJUOiAndG91Y2hzdGFydCcsCiAgVklTSUJJTElUWTogJ3Zpc2liaWxpdHljaGFuZ2UnLAogIEJMVVI6ICdibHVyJywKICBGT0NVUzogJ2ZvY3VzJywKICBMT0FEOiAnbG9hZCcKfTsKCgpSdW5uZXIucHJvdG90eXBlID0gewogIC8qKgogICAqIFdoZXRoZXIgdGhlIGVhc3RlciBlZ2cgaGFzIGJlZW4gZGlzYWJsZWQuIENyT1MgZW50ZXJwcmlzZSBlbnJvbGxlZCBkZXZpY2VzLgogICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICovCiAgaXNEaXNhYmxlZDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gbG9hZFRpbWVEYXRhICYmIGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygnZGlzYWJsZWRFYXN0ZXJFZ2cnKTsKICB9LAoKICAvKioKICAgKiBGb3IgZGlzYWJsZWQgaW5zdGFuY2VzLCBzZXQgdXAgYSBzbmFja2JhciB3aXRoIHRoZSBkaXNhYmxlZCBtZXNzYWdlLgogICAqLwogIHNldHVwRGlzYWJsZWRSdW5uZXI6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5jb250YWluZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy5jb250YWluZXJFbC5jbGFzc05hbWUgPSBSdW5uZXIuY2xhc3Nlcy5TTkFDS0JBUjsKICAgIHRoaXMuY29udGFpbmVyRWwudGV4dENvbnRlbnQgPSBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2Rpc2FibGVkRWFzdGVyRWdnJyk7CiAgICB0aGlzLm91dGVyQ29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXJFbCk7CgogICAgLy8gU2hvdyBub3RpZmljYXRpb24gd2hlbiB0aGUgYWN0aXZhdGlvbiBrZXkgaXMgcHJlc3NlZC4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlET1dOLCBmdW5jdGlvbihlKSB7CiAgICAgIGlmIChSdW5uZXIua2V5Y29kZXMuSlVNUFtlLmtleUNvZGVdKSB7CiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QuYWRkKFJ1bm5lci5jbGFzc2VzLlNOQUNLQkFSX1NIT1cpOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pY29uJykuY2xhc3NMaXN0LmFkZCgnaWNvbi1kaXNhYmxlZCcpOwogICAgICB9CiAgICB9LmJpbmQodGhpcykpOwogIH0sCgogIC8qKgogICAqIFNldHRpbmcgaW5kaXZpZHVhbCBzZXR0aW5ncyBmb3IgZGVidWdnaW5nLgogICAqIEBwYXJhbSB7c3RyaW5nfSBzZXR0aW5nCiAgICogQHBhcmFtIHsqfSB2YWx1ZQogICAqLwogIHVwZGF0ZUNvbmZpZ1NldHRpbmc6IGZ1bmN0aW9uKHNldHRpbmcsIHZhbHVlKSB7CiAgICBpZiAoc2V0dGluZyBpbiB0aGlzLmNvbmZpZyAmJiB2YWx1ZSAhPSB1bmRlZmluZWQpIHsKICAgICAgdGhpcy5jb25maWdbc2V0dGluZ10gPSB2YWx1ZTsKCiAgICAgIHN3aXRjaCAoc2V0dGluZykgewogICAgICAgIGNhc2UgJ0dSQVZJVFknOgogICAgICAgIGNhc2UgJ01JTl9KVU1QX0hFSUdIVCc6CiAgICAgICAgY2FzZSAnU1BFRURfRFJPUF9DT0VGRklDSUVOVCc6CiAgICAgICAgICB0aGlzLnRSZXguY29uZmlnW3NldHRpbmddID0gdmFsdWU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdJTklUSUFMX0pVTVBfVkVMT0NJVFknOgogICAgICAgICAgdGhpcy50UmV4LnNldEp1bXBWZWxvY2l0eSh2YWx1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdTUEVFRCc6CiAgICAgICAgICB0aGlzLnNldFNwZWVkKHZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ2FjaGUgdGhlIGFwcHJvcHJpYXRlIGltYWdlIHNwcml0ZSBmcm9tIHRoZSBwYWdlIGFuZCBnZXQgdGhlIHNwcml0ZSBzaGVldAogICAqIGRlZmluaXRpb24uCiAgICovCiAgbG9hZEltYWdlczogZnVuY3Rpb24oKSB7CiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgUnVubmVyLmltYWdlU3ByaXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29mZmxpbmUtcmVzb3VyY2VzLTJ4Jyk7CiAgICAgIHRoaXMuc3ByaXRlRGVmID0gUnVubmVyLnNwcml0ZURlZmluaXRpb24uSERQSTsKICAgIH0gZWxzZSB7CiAgICAgIFJ1bm5lci5pbWFnZVNwcml0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvZmZsaW5lLXJlc291cmNlcy0xeCcpOwogICAgICB0aGlzLnNwcml0ZURlZiA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkxEUEk7CiAgICB9CgogICAgaWYgKFJ1bm5lci5pbWFnZVNwcml0ZS5jb21wbGV0ZSkgewogICAgICB0aGlzLmluaXQoKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIElmIHRoZSBpbWFnZXMgYXJlIG5vdCB5ZXQgbG9hZGVkLCBhZGQgYSBsaXN0ZW5lci4KICAgICAgUnVubmVyLmltYWdlU3ByaXRlLmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5MT0FELAogICAgICAgICAgdGhpcy5pbml0LmJpbmQodGhpcykpOwogICAgfQogIH0sCgogIC8qKgogICAqIExvYWQgYW5kIGRlY29kZSBiYXNlIDY0IGVuY29kZWQgc291bmRzLgogICAqLwogIGxvYWRTb3VuZHM6IGZ1bmN0aW9uKCkgewogICAgaWYgKCFJU19JT1MpIHsKICAgICAgdGhpcy5hdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7CgogICAgICB2YXIgcmVzb3VyY2VUZW1wbGF0ZSA9CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbmZpZy5SRVNPVVJDRV9URU1QTEFURV9JRCkuY29udGVudDsKCiAgICAgIGZvciAodmFyIHNvdW5kIGluIFJ1bm5lci5zb3VuZHMpIHsKICAgICAgICB2YXIgc291bmRTcmMgPQogICAgICAgICAgICByZXNvdXJjZVRlbXBsYXRlLmdldEVsZW1lbnRCeUlkKFJ1bm5lci5zb3VuZHNbc291bmRdKS5zcmM7CiAgICAgICAgc291bmRTcmMgPSBzb3VuZFNyYy5zdWJzdHIoc291bmRTcmMuaW5kZXhPZignLCcpICsgMSk7CiAgICAgICAgdmFyIGJ1ZmZlciA9IGRlY29kZUJhc2U2NFRvQXJyYXlCdWZmZXIoc291bmRTcmMpOwoKICAgICAgICAvLyBBc3luYywgc28gbm8gZ3VhcmFudGVlIG9mIG9yZGVyIGluIGFycmF5LgogICAgICAgIHRoaXMuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShidWZmZXIsIGZ1bmN0aW9uKGluZGV4LCBhdWRpb0RhdGEpIHsKICAgICAgICAgICAgdGhpcy5zb3VuZEZ4W2luZGV4XSA9IGF1ZGlvRGF0YTsKICAgICAgICAgIH0uYmluZCh0aGlzLCBzb3VuZCkpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogU2V0cyB0aGUgZ2FtZSBzcGVlZC4gQWRqdXN0IHRoZSBzcGVlZCBhY2NvcmRpbmdseSBpZiBvbiBhIHNtYWxsZXIgc2NyZWVuLgogICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRfc3BlZWQKICAgKi8KICBzZXRTcGVlZDogZnVuY3Rpb24ob3B0X3NwZWVkKSB7CiAgICB2YXIgc3BlZWQgPSBvcHRfc3BlZWQgfHwgdGhpcy5jdXJyZW50U3BlZWQ7CgogICAgLy8gUmVkdWNlIHRoZSBzcGVlZCBvbiBzbWFsbGVyIG1vYmlsZSBzY3JlZW5zLgogICAgaWYgKHRoaXMuZGltZW5zaW9ucy5XSURUSCA8IERFRkFVTFRfV0lEVEgpIHsKICAgICAgdmFyIG1vYmlsZVNwZWVkID0gc3BlZWQgKiB0aGlzLmRpbWVuc2lvbnMuV0lEVEggLyBERUZBVUxUX1dJRFRIICoKICAgICAgICAgIHRoaXMuY29uZmlnLk1PQklMRV9TUEVFRF9DT0VGRklDSUVOVDsKICAgICAgdGhpcy5jdXJyZW50U3BlZWQgPSBtb2JpbGVTcGVlZCA+IHNwZWVkID8gc3BlZWQgOiBtb2JpbGVTcGVlZDsKICAgIH0gZWxzZSBpZiAob3B0X3NwZWVkKSB7CiAgICAgIHRoaXMuY3VycmVudFNwZWVkID0gb3B0X3NwZWVkOwogICAgfQogIH0sCgogIC8qKgogICAqIEdhbWUgaW5pdGlhbGlzZXIuCiAgICovCiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAvLyBIaWRlIHRoZSBzdGF0aWMgaWNvbi4KICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgUnVubmVyLmNsYXNzZXMuSUNPTikuc3R5bGUudmlzaWJpbGl0eSA9CiAgICAgICAgJ2hpZGRlbic7CgogICAgdGhpcy5hZGp1c3REaW1lbnNpb25zKCk7CiAgICB0aGlzLnNldFNwZWVkKCk7CgogICAgdGhpcy5jb250YWluZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy5jb250YWluZXJFbC5jbGFzc05hbWUgPSBSdW5uZXIuY2xhc3Nlcy5DT05UQUlORVI7CgogICAgLy8gUGxheWVyIGNhbnZhcyBjb250YWluZXIuCiAgICB0aGlzLmNhbnZhcyA9IGNyZWF0ZUNhbnZhcyh0aGlzLmNvbnRhaW5lckVsLCB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLkhFSUdIVCwgUnVubmVyLmNsYXNzZXMuUExBWUVSKTsKCiAgICB0aGlzLmNhbnZhc0N0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICB0aGlzLmNhbnZhc0N0eC5maWxsU3R5bGUgPSAnI2Y3ZjdmNyc7CiAgICB0aGlzLmNhbnZhc0N0eC5maWxsKCk7CiAgICBSdW5uZXIudXBkYXRlQ2FudmFzU2NhbGluZyh0aGlzLmNhbnZhcyk7CgogICAgLy8gSG9yaXpvbiBjb250YWlucyBjbG91ZHMsIG9ic3RhY2xlcyBhbmQgdGhlIGdyb3VuZC4KICAgIHRoaXMuaG9yaXpvbiA9IG5ldyBIb3Jpem9uKHRoaXMuY2FudmFzLCB0aGlzLnNwcml0ZURlZiwgdGhpcy5kaW1lbnNpb25zLAogICAgICAgIHRoaXMuY29uZmlnLkdBUF9DT0VGRklDSUVOVCk7CgogICAgLy8gRGlzdGFuY2UgbWV0ZXIKICAgIHRoaXMuZGlzdGFuY2VNZXRlciA9IG5ldyBEaXN0YW5jZU1ldGVyKHRoaXMuY2FudmFzLAogICAgICAgICAgdGhpcy5zcHJpdGVEZWYuVEVYVF9TUFJJVEUsIHRoaXMuZGltZW5zaW9ucy5XSURUSCk7CgogICAgLy8gRHJhdyB0LXJleAogICAgdGhpcy50UmV4ID0gbmV3IFRyZXgodGhpcy5jYW52YXMsIHRoaXMuc3ByaXRlRGVmLlRSRVgpOwoKICAgIHRoaXMub3V0ZXJDb250YWluZXJFbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lckVsKTsKCiAgICBpZiAoSVNfTU9CSUxFKSB7CiAgICAgIHRoaXMuY3JlYXRlVG91Y2hDb250cm9sbGVyKCk7CiAgICB9CgogICAgdGhpcy5zdGFydExpc3RlbmluZygpOwogICAgdGhpcy51cGRhdGUoKTsKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlJFU0laRSwKICAgICAgICB0aGlzLmRlYm91bmNlUmVzaXplLmJpbmQodGhpcykpOwogIH0sCgogIC8qKgogICAqIENyZWF0ZSB0aGUgdG91Y2ggY29udHJvbGxlci4gQSBkaXYgdGhhdCBjb3ZlcnMgd2hvbGUgc2NyZWVuLgogICAqLwogIGNyZWF0ZVRvdWNoQ29udHJvbGxlcjogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy50b3VjaENvbnRyb2xsZXIuY2xhc3NOYW1lID0gUnVubmVyLmNsYXNzZXMuVE9VQ0hfQ09OVFJPTExFUjsKICB9LAoKICAvKioKICAgKiBEZWJvdW5jZSB0aGUgcmVzaXplIGV2ZW50LgogICAqLwogIGRlYm91bmNlUmVzaXplOiBmdW5jdGlvbigpIHsKICAgIGlmICghdGhpcy5yZXNpemVUaW1lcklkXykgewogICAgICB0aGlzLnJlc2l6ZVRpbWVySWRfID0KICAgICAgICAgIHNldEludGVydmFsKHRoaXMuYWRqdXN0RGltZW5zaW9ucy5iaW5kKHRoaXMpLCAyNTApOwogICAgfQogIH0sCgogIC8qKgogICAqIEFkanVzdCBnYW1lIHNwYWNlIGRpbWVuc2lvbnMgb24gcmVzaXplLgogICAqLwogIGFkanVzdERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlc2l6ZVRpbWVySWRfKTsKICAgIHRoaXMucmVzaXplVGltZXJJZF8gPSBudWxsOwoKICAgIHZhciBib3hTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm91dGVyQ29udGFpbmVyRWwpOwogICAgdmFyIHBhZGRpbmcgPSBOdW1iZXIoYm94U3R5bGVzLnBhZGRpbmdMZWZ0LnN1YnN0cigwLAogICAgICAgIGJveFN0eWxlcy5wYWRkaW5nTGVmdC5sZW5ndGggLSAyKSk7CgogICAgdGhpcy5kaW1lbnNpb25zLldJRFRIID0gdGhpcy5vdXRlckNvbnRhaW5lckVsLm9mZnNldFdpZHRoIC0gcGFkZGluZyAqIDI7CgogICAgLy8gUmVkcmF3IHRoZSBlbGVtZW50cyBiYWNrIG9udG8gdGhlIGNhbnZhcy4KICAgIGlmICh0aGlzLmNhbnZhcykgewogICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5XSURUSDsKICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLkhFSUdIVDsKCiAgICAgIFJ1bm5lci51cGRhdGVDYW52YXNTY2FsaW5nKHRoaXMuY2FudmFzKTsKCiAgICAgIHRoaXMuZGlzdGFuY2VNZXRlci5jYWxjWFBvcyh0aGlzLmRpbWVuc2lvbnMuV0lEVEgpOwogICAgICB0aGlzLmNsZWFyQ2FudmFzKCk7CiAgICAgIHRoaXMuaG9yaXpvbi51cGRhdGUoMCwgMCwgdHJ1ZSk7CiAgICAgIHRoaXMudFJleC51cGRhdGUoMCk7CgogICAgICAvLyBPdXRlciBjb250YWluZXIgYW5kIGRpc3RhbmNlIG1ldGVyLgogICAgICBpZiAodGhpcy5wbGF5aW5nIHx8IHRoaXMuY3Jhc2hlZCB8fCB0aGlzLnBhdXNlZCkgewogICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUud2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuV0lEVEggKyAncHgnOwogICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuaGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLkhFSUdIVCArICdweCc7CiAgICAgICAgdGhpcy5kaXN0YW5jZU1ldGVyLnVwZGF0ZSgwLCBNYXRoLmNlaWwodGhpcy5kaXN0YW5jZVJhbikpOwogICAgICAgIHRoaXMuc3RvcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudFJleC5kcmF3KDAsIDApOwogICAgICB9CgogICAgICAvLyBHYW1lIG92ZXIgcGFuZWwuCiAgICAgIGlmICh0aGlzLmNyYXNoZWQgJiYgdGhpcy5nYW1lT3ZlclBhbmVsKSB7CiAgICAgICAgdGhpcy5nYW1lT3ZlclBhbmVsLnVwZGF0ZURpbWVuc2lvbnModGhpcy5kaW1lbnNpb25zLldJRFRIKTsKICAgICAgICB0aGlzLmdhbWVPdmVyUGFuZWwuZHJhdygpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUGxheSB0aGUgZ2FtZSBpbnRyby4KICAgKiBDYW52YXMgY29udGFpbmVyIHdpZHRoIGV4cGFuZHMgb3V0IHRvIHRoZSBmdWxsIHdpZHRoLgogICAqLwogIHBsYXlJbnRybzogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuYWN0aXZhdGVkICYmICF0aGlzLmNyYXNoZWQpIHsKICAgICAgdGhpcy5wbGF5aW5nSW50cm8gPSB0cnVlOwogICAgICB0aGlzLnRSZXgucGxheWluZ0ludHJvID0gdHJ1ZTsKCiAgICAgIC8vIENTUyBhbmltYXRpb24gZGVmaW5pdGlvbi4KICAgICAgdmFyIGtleWZyYW1lcyA9ICdALXdlYmtpdC1rZXlmcmFtZXMgaW50cm8geyAnICsKICAgICAgICAgICAgJ2Zyb20geyB3aWR0aDonICsgVHJleC5jb25maWcuV0lEVEggKyAncHggfScgKwogICAgICAgICAgICAndG8geyB3aWR0aDogJyArIHRoaXMuZGltZW5zaW9ucy5XSURUSCArICdweCB9JyArCiAgICAgICAgICAnfSc7CiAgICAgIGRvY3VtZW50LnN0eWxlU2hlZXRzWzBdLmluc2VydFJ1bGUoa2V5ZnJhbWVzLCAwKTsKCiAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLkFOSU1fRU5ELAogICAgICAgICAgdGhpcy5zdGFydEdhbWUuYmluZCh0aGlzKSk7CgogICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLndlYmtpdEFuaW1hdGlvbiA9ICdpbnRybyAuNHMgZWFzZS1vdXQgMSBib3RoJzsKICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5XSURUSCArICdweCc7CgogICAgICBpZiAodGhpcy50b3VjaENvbnRyb2xsZXIpIHsKICAgICAgICB0aGlzLm91dGVyQ29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy50b3VjaENvbnRyb2xsZXIpOwogICAgICB9CiAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICAgIHRoaXMuYWN0aXZhdGVkID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAodGhpcy5jcmFzaGVkKSB7CiAgICAgIHRoaXMucmVzdGFydCgpOwogICAgfQogIH0sCgoKICAvKioKICAgKiBVcGRhdGUgdGhlIGdhbWUgc3RhdHVzIHRvIHN0YXJ0ZWQuCiAgICovCiAgc3RhcnRHYW1lOiBmdW5jdGlvbigpIHsKICAgIHRoaXMucnVubmluZ1RpbWUgPSAwOwogICAgdGhpcy5wbGF5aW5nSW50cm8gPSBmYWxzZTsKICAgIHRoaXMudFJleC5wbGF5aW5nSW50cm8gPSBmYWxzZTsKICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUud2Via2l0QW5pbWF0aW9uID0gJyc7CiAgICB0aGlzLnBsYXlDb3VudCsrOwoKICAgIC8vIEhhbmRsZSB0YWJiaW5nIG9mZiB0aGUgcGFnZS4gUGF1c2UgdGhlIGN1cnJlbnQgZ2FtZS4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5WSVNJQklMSVRZLAogICAgICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKSk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5CTFVSLAogICAgICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKSk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5GT0NVUywKICAgICAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlLmJpbmQodGhpcykpOwogIH0sCgogIGNsZWFyQ2FudmFzOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuY2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLkhFSUdIVCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBnYW1lIGZyYW1lIGFuZCBzY2hlZHVsZXMgdGhlIG5leHQgb25lLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnVwZGF0ZVBlbmRpbmcgPSBmYWxzZTsKCiAgICB2YXIgbm93ID0gZ2V0VGltZVN0YW1wKCk7CiAgICB2YXIgZGVsdGFUaW1lID0gbm93IC0gKHRoaXMudGltZSB8fCBub3cpOwogICAgdGhpcy50aW1lID0gbm93OwoKICAgIGlmICh0aGlzLnBsYXlpbmcpIHsKICAgICAgdGhpcy5jbGVhckNhbnZhcygpOwoKICAgICAgaWYgKHRoaXMudFJleC5qdW1waW5nKSB7CiAgICAgICAgdGhpcy50UmV4LnVwZGF0ZUp1bXAoZGVsdGFUaW1lKTsKICAgICAgfQoKICAgICAgdGhpcy5ydW5uaW5nVGltZSArPSBkZWx0YVRpbWU7CiAgICAgIHZhciBoYXNPYnN0YWNsZXMgPSB0aGlzLnJ1bm5pbmdUaW1lID4gdGhpcy5jb25maWcuQ0xFQVJfVElNRTsKCiAgICAgIC8vIEZpcnN0IGp1bXAgdHJpZ2dlcnMgdGhlIGludHJvLgogICAgICBpZiAodGhpcy50UmV4Lmp1bXBDb3VudCA9PSAxICYmICF0aGlzLnBsYXlpbmdJbnRybykgewogICAgICAgIHRoaXMucGxheUludHJvKCk7CiAgICAgIH0KCiAgICAgIC8vIFRoZSBob3Jpem9uIGRvZXNuJ3QgbW92ZSB1bnRpbCB0aGUgaW50cm8gaXMgb3Zlci4KICAgICAgaWYgKHRoaXMucGxheWluZ0ludHJvKSB7CiAgICAgICAgdGhpcy5ob3Jpem9uLnVwZGF0ZSgwLCB0aGlzLmN1cnJlbnRTcGVlZCwgaGFzT2JzdGFjbGVzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWx0YVRpbWUgPSAhdGhpcy5hY3RpdmF0ZWQgPyAwIDogZGVsdGFUaW1lOwogICAgICAgIHRoaXMuaG9yaXpvbi51cGRhdGUoZGVsdGFUaW1lLCB0aGlzLmN1cnJlbnRTcGVlZCwgaGFzT2JzdGFjbGVzLAogICAgICAgICAgICB0aGlzLmludmVydGVkKTsKICAgICAgfQoKICAgICAgLy8gQ2hlY2sgZm9yIGNvbGxpc2lvbnMuCiAgICAgIHZhciBjb2xsaXNpb24gPSBoYXNPYnN0YWNsZXMgJiYKICAgICAgICAgIGNoZWNrRm9yQ29sbGlzaW9uKHRoaXMuaG9yaXpvbi5vYnN0YWNsZXNbMF0sIHRoaXMudFJleCk7CgogICAgICBpZiAoIWNvbGxpc2lvbikgewogICAgICAgIHRoaXMuZGlzdGFuY2VSYW4gKz0gdGhpcy5jdXJyZW50U3BlZWQgKiBkZWx0YVRpbWUgLyB0aGlzLm1zUGVyRnJhbWU7CgogICAgICAgIGlmICh0aGlzLmN1cnJlbnRTcGVlZCA8IHRoaXMuY29uZmlnLk1BWF9TUEVFRCkgewogICAgICAgICAgdGhpcy5jdXJyZW50U3BlZWQgKz0gdGhpcy5jb25maWcuQUNDRUxFUkFUSU9OOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdhbWVPdmVyKCk7CiAgICAgIH0KCiAgICAgIHZhciBwbGF5QWNoaWV2ZW1lbnRTb3VuZCA9IHRoaXMuZGlzdGFuY2VNZXRlci51cGRhdGUoZGVsdGFUaW1lLAogICAgICAgICAgTWF0aC5jZWlsKHRoaXMuZGlzdGFuY2VSYW4pKTsKCiAgICAgIGlmIChwbGF5QWNoaWV2ZW1lbnRTb3VuZCkgewogICAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuc291bmRGeC5TQ09SRSk7CiAgICAgIH0KCiAgICAgIC8vIE5pZ2h0IG1vZGUuCiAgICAgIGlmICh0aGlzLmludmVydFRpbWVyID4gdGhpcy5jb25maWcuSU5WRVJUX0ZBREVfRFVSQVRJT04pIHsKICAgICAgICB0aGlzLmludmVydFRpbWVyID0gMDsKICAgICAgICB0aGlzLmludmVydFRyaWdnZXIgPSBmYWxzZTsKICAgICAgICB0aGlzLmludmVydCgpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaW52ZXJ0VGltZXIpIHsKICAgICAgICB0aGlzLmludmVydFRpbWVyICs9IGRlbHRhVGltZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgYWN0dWFsRGlzdGFuY2UgPQogICAgICAgICAgICB0aGlzLmRpc3RhbmNlTWV0ZXIuZ2V0QWN0dWFsRGlzdGFuY2UoTWF0aC5jZWlsKHRoaXMuZGlzdGFuY2VSYW4pKTsKCiAgICAgICAgaWYgKGFjdHVhbERpc3RhbmNlID4gMCkgewogICAgICAgICAgdGhpcy5pbnZlcnRUcmlnZ2VyID0gIShhY3R1YWxEaXN0YW5jZSAlCiAgICAgICAgICAgICAgdGhpcy5jb25maWcuSU5WRVJUX0RJU1RBTkNFKTsKCiAgICAgICAgICBpZiAodGhpcy5pbnZlcnRUcmlnZ2VyICYmIHRoaXMuaW52ZXJ0VGltZXIgPT09IDApIHsKICAgICAgICAgICAgdGhpcy5pbnZlcnRUaW1lciArPSBkZWx0YVRpbWU7CiAgICAgICAgICAgIHRoaXMuaW52ZXJ0KCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKHRoaXMucGxheWluZyB8fCAoIXRoaXMuYWN0aXZhdGVkICYmCiAgICAgICAgdGhpcy50UmV4LmJsaW5rQ291bnQgPCBSdW5uZXIuY29uZmlnLk1BWF9CTElOS19DT1VOVCkpIHsKICAgICAgdGhpcy50UmV4LnVwZGF0ZShkZWx0YVRpbWUpOwogICAgICB0aGlzLnNjaGVkdWxlTmV4dFVwZGF0ZSgpOwogICAgfQogIH0sCgogIC8qKgogICAqIEV2ZW50IGhhbmRsZXIuCiAgICovCiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHsKICAgIHJldHVybiAoZnVuY3Rpb24oZXZ0VHlwZSwgZXZlbnRzKSB7CiAgICAgIHN3aXRjaCAoZXZ0VHlwZSkgewogICAgICAgIGNhc2UgZXZlbnRzLktFWURPV046CiAgICAgICAgY2FzZSBldmVudHMuVE9VQ0hTVEFSVDoKICAgICAgICBjYXNlIGV2ZW50cy5NT1VTRURPV046CiAgICAgICAgICB0aGlzLm9uS2V5RG93bihlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgZXZlbnRzLktFWVVQOgogICAgICAgIGNhc2UgZXZlbnRzLlRPVUNIRU5EOgogICAgICAgIGNhc2UgZXZlbnRzLk1PVVNFVVA6CiAgICAgICAgICB0aGlzLm9uS2V5VXAoZSk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfS5iaW5kKHRoaXMpKShlLnR5cGUsIFJ1bm5lci5ldmVudHMpOwogIH0sCgogIC8qKgogICAqIEJpbmQgcmVsZXZhbnQga2V5IC8gbW91c2UgLyB0b3VjaCBsaXN0ZW5lcnMuCiAgICovCiAgc3RhcnRMaXN0ZW5pbmc6IGZ1bmN0aW9uKCkgewogICAgLy8gS2V5cy4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlET1dOLCB0aGlzKTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlVUCwgdGhpcyk7CgogICAgaWYgKElTX01PQklMRSkgewogICAgICAvLyBNb2JpbGUgb25seSB0b3VjaCBkZXZpY2VzLgogICAgICB0aGlzLnRvdWNoQ29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuVE9VQ0hTVEFSVCwgdGhpcyk7CiAgICAgIHRoaXMudG91Y2hDb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5UT1VDSEVORCwgdGhpcyk7CiAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQsIHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgLy8gTW91c2UuCiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5NT1VTRURPV04sIHRoaXMpOwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuTU9VU0VVUCwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMuCiAgICovCiAgc3RvcExpc3RlbmluZzogZnVuY3Rpb24oKSB7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuS0VZRE9XTiwgdGhpcyk7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuS0VZVVAsIHRoaXMpOwoKICAgIGlmIChJU19NT0JJTEUpIHsKICAgICAgdGhpcy50b3VjaENvbnRyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQsIHRoaXMpOwogICAgICB0aGlzLnRvdWNoQ29udHJvbGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuVE9VQ0hFTkQsIHRoaXMpOwogICAgICB0aGlzLmNvbnRhaW5lckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5UT1VDSFNUQVJULCB0aGlzKTsKICAgIH0gZWxzZSB7CiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5NT1VTRURPV04sIHRoaXMpOwogICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuTU9VU0VVUCwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUHJvY2VzcyBrZXlkb3duLgogICAqIEBwYXJhbSB7RXZlbnR9IGUKICAgKi8KICBvbktleURvd246IGZ1bmN0aW9uKGUpIHsKICAgIC8vIFByZXZlbnQgbmF0aXZlIHBhZ2Ugc2Nyb2xsaW5nIHdoaWxzdCB0YXBwaW5nIG9uIG1vYmlsZS4KICAgIGlmIChJU19NT0JJTEUgJiYgdGhpcy5wbGF5aW5nKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIH0KCiAgICBpZiAoIXRoaXMuY3Jhc2hlZCAmJiAhdGhpcy5wYXVzZWQpIHsKICAgICAgaWYgKFJ1bm5lci5rZXljb2Rlcy5KVU1QW2Uua2V5Q29kZV0gfHwKICAgICAgICAgIGUudHlwZSA9PSBSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgLy8gU3RhcnRpbmcgdGhlIGdhbWUgZm9yIHRoZSBmaXJzdCB0aW1lLgogICAgICAgIGlmICghdGhpcy5wbGF5aW5nKSB7CiAgICAgICAgICB0aGlzLmxvYWRTb3VuZHMoKTsKICAgICAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICAgICAgICB0aGlzLnVwZGF0ZSgpOwogICAgICAgICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICAgICAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tFYXN0ZXJFZ2coKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gU3RhcnQganVtcC4KICAgICAgICBpZiAoIXRoaXMudFJleC5qdW1waW5nICYmICF0aGlzLnRSZXguZHVja2luZykgewogICAgICAgICAgdGhpcy5wbGF5U291bmQodGhpcy5zb3VuZEZ4LkJVVFRPTl9QUkVTUyk7CiAgICAgICAgICB0aGlzLnRSZXguc3RhcnRKdW1wKHRoaXMuY3VycmVudFNwZWVkKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhpcy5wbGF5aW5nICYmIFJ1bm5lci5rZXljb2Rlcy5EVUNLW2Uua2V5Q29kZV0pIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgaWYgKHRoaXMudFJleC5qdW1waW5nKSB7CiAgICAgICAgICAvLyBTcGVlZCBkcm9wLCBhY3RpdmF0ZWQgb25seSB3aGVuIGp1bXAga2V5IGlzIG5vdCBwcmVzc2VkLgogICAgICAgICAgdGhpcy50UmV4LnNldFNwZWVkRHJvcCgpOwogICAgICAgIH0gZWxzZSBpZiAoIXRoaXMudFJleC5qdW1waW5nICYmICF0aGlzLnRSZXguZHVja2luZykgewogICAgICAgICAgLy8gRHVjay4KICAgICAgICAgIHRoaXMudFJleC5zZXREdWNrKHRydWUpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmICh0aGlzLmNyYXNoZWQgJiYgZS50eXBlID09IFJ1bm5lci5ldmVudHMuVE9VQ0hTVEFSVCAmJgogICAgICAgIGUuY3VycmVudFRhcmdldCA9PSB0aGlzLmNvbnRhaW5lckVsKSB7CiAgICAgIHRoaXMucmVzdGFydCgpOwogICAgfQogIH0sCgoKICAvKioKICAgKiBQcm9jZXNzIGtleSB1cC4KICAgKiBAcGFyYW0ge0V2ZW50fSBlCiAgICovCiAgb25LZXlVcDogZnVuY3Rpb24oZSkgewogICAgdmFyIGtleUNvZGUgPSBTdHJpbmcoZS5rZXlDb2RlKTsKICAgIHZhciBpc2p1bXBLZXkgPSBSdW5uZXIua2V5Y29kZXMuSlVNUFtrZXlDb2RlXSB8fAogICAgICAgZS50eXBlID09IFJ1bm5lci5ldmVudHMuVE9VQ0hFTkQgfHwKICAgICAgIGUudHlwZSA9PSBSdW5uZXIuZXZlbnRzLk1PVVNFRE9XTjsKCiAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSAmJiBpc2p1bXBLZXkpIHsKICAgICAgdGhpcy50UmV4LmVuZEp1bXAoKTsKICAgIH0gZWxzZSBpZiAoUnVubmVyLmtleWNvZGVzLkRVQ0tba2V5Q29kZV0pIHsKICAgICAgdGhpcy50UmV4LnNwZWVkRHJvcCA9IGZhbHNlOwogICAgICB0aGlzLnRSZXguc2V0RHVjayhmYWxzZSk7CiAgICB9IGVsc2UgaWYgKHRoaXMuY3Jhc2hlZCkgewogICAgICAvLyBDaGVjayB0aGF0IGVub3VnaCB0aW1lIGhhcyBlbGFwc2VkIGJlZm9yZSBhbGxvd2luZyBqdW1wIGtleSB0byByZXN0YXJ0LgogICAgICB2YXIgZGVsdGFUaW1lID0gZ2V0VGltZVN0YW1wKCkgLSB0aGlzLnRpbWU7CgogICAgICBpZiAoUnVubmVyLmtleWNvZGVzLlJFU1RBUlRba2V5Q29kZV0gfHwgdGhpcy5pc0xlZnRDbGlja09uQ2FudmFzKGUpIHx8CiAgICAgICAgICAoZGVsdGFUaW1lID49IHRoaXMuY29uZmlnLkdBTUVPVkVSX0NMRUFSX1RJTUUgJiYKICAgICAgICAgIFJ1bm5lci5rZXljb2Rlcy5KVU1QW2tleUNvZGVdKSkgewogICAgICAgIHRoaXMucmVzdGFydCgpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMucGF1c2VkICYmIGlzanVtcEtleSkgewogICAgICAvLyBSZXNldCB0aGUganVtcCBzdGF0ZQogICAgICB0aGlzLnRSZXgucmVzZXQoKTsKICAgICAgdGhpcy5wbGF5KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBldmVudCB3YXMgYSBsZWZ0IGNsaWNrIG9uIGNhbnZhcy4KICAgKiBPbiBXaW5kb3dzIHJpZ2h0IGNsaWNrIGlzIHJlZ2lzdGVyZWQgYXMgYSBjbGljay4KICAgKiBAcGFyYW0ge0V2ZW50fSBlCiAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgKi8KICBpc0xlZnRDbGlja09uQ2FudmFzOiBmdW5jdGlvbihlKSB7CiAgICByZXR1cm4gZS5idXR0b24gIT0gbnVsbCAmJiBlLmJ1dHRvbiA8IDIgJiYKICAgICAgICBlLnR5cGUgPT0gUnVubmVyLmV2ZW50cy5NT1VTRVVQICYmIGUudGFyZ2V0ID09IHRoaXMuY2FudmFzOwogIH0sCgogIC8qKgogICAqIFJlcXVlc3RBbmltYXRpb25GcmFtZSB3cmFwcGVyLgogICAqLwogIHNjaGVkdWxlTmV4dFVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMudXBkYXRlUGVuZGluZykgewogICAgICB0aGlzLnVwZGF0ZVBlbmRpbmcgPSB0cnVlOwogICAgICB0aGlzLnJhcUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpOwogICAgfQogIH0sCgogIC8qKgogICAqIFdoZXRoZXIgdGhlIGdhbWUgaXMgcnVubmluZy4KICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGlzUnVubmluZzogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gISF0aGlzLnJhcUlkOwogIH0sCgogIC8qKgogICAqIEdhbWUgb3ZlciBzdGF0ZS4KICAgKi8KICBnYW1lT3ZlcjogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnBsYXlTb3VuZCh0aGlzLnNvdW5kRnguSElUKTsKICAgIHZpYnJhdGUoMjAwKTsKCiAgICB0aGlzLnN0b3AoKTsKICAgIHRoaXMuY3Jhc2hlZCA9IHRydWU7CiAgICB0aGlzLmRpc3RhbmNlTWV0ZXIuYWNoZWl2ZW1lbnQgPSBmYWxzZTsKCiAgICB0aGlzLnRSZXgudXBkYXRlKDEwMCwgVHJleC5zdGF0dXMuQ1JBU0hFRCk7CgogICAgLy8gR2FtZSBvdmVyIHBhbmVsLgogICAgaWYgKCF0aGlzLmdhbWVPdmVyUGFuZWwpIHsKICAgICAgdGhpcy5nYW1lT3ZlclBhbmVsID0gbmV3IEdhbWVPdmVyUGFuZWwodGhpcy5jYW52YXMsCiAgICAgICAgICB0aGlzLnNwcml0ZURlZi5URVhUX1NQUklURSwgdGhpcy5zcHJpdGVEZWYuUkVTVEFSVCwKICAgICAgICAgIHRoaXMuZGltZW5zaW9ucyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmdhbWVPdmVyUGFuZWwuZHJhdygpOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgaGlnaCBzY29yZS4KICAgIGlmICh0aGlzLmRpc3RhbmNlUmFuID4gdGhpcy5oaWdoZXN0U2NvcmUpIHsKICAgICAgdGhpcy5oaWdoZXN0U2NvcmUgPSBNYXRoLmNlaWwodGhpcy5kaXN0YW5jZVJhbik7CiAgICAgIHRoaXMuZGlzdGFuY2VNZXRlci5zZXRIaWdoU2NvcmUodGhpcy5oaWdoZXN0U2NvcmUpOwogICAgfQoKICAgIC8vIFJlc2V0IHRoZSB0aW1lIGNsb2NrLgogICAgdGhpcy50aW1lID0gZ2V0VGltZVN0YW1wKCk7CiAgfSwKCiAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsKICAgIHRoaXMucGF1c2VkID0gdHJ1ZTsKICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFxSWQpOwogICAgdGhpcy5yYXFJZCA9IDA7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuY3Jhc2hlZCkgewogICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlOwogICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogICAgICB0aGlzLnRSZXgudXBkYXRlKDAsIFRyZXguc3RhdHVzLlJVTk5JTkcpOwogICAgICB0aGlzLnRpbWUgPSBnZXRUaW1lU3RhbXAoKTsKICAgICAgdGhpcy51cGRhdGUoKTsKICAgIH0KICB9LAoKICByZXN0YXJ0OiBmdW5jdGlvbigpIHsKICAgIGlmICghdGhpcy5yYXFJZCkgewogICAgICB0aGlzLnBsYXlDb3VudCsrOwogICAgICB0aGlzLnJ1bm5pbmdUaW1lID0gMDsKICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTsKICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTsKICAgICAgdGhpcy5jcmFzaGVkID0gZmFsc2U7CiAgICAgIHRoaXMuZGlzdGFuY2VSYW4gPSAwOwogICAgICB0aGlzLnNldFNwZWVkKHRoaXMuY29uZmlnLlNQRUVEKTsKICAgICAgdGhpcy50aW1lID0gZ2V0VGltZVN0YW1wKCk7CiAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LnJlbW92ZShSdW5uZXIuY2xhc3Nlcy5DUkFTSEVEKTsKICAgICAgdGhpcy5jbGVhckNhbnZhcygpOwogICAgICB0aGlzLmRpc3RhbmNlTWV0ZXIucmVzZXQodGhpcy5oaWdoZXN0U2NvcmUpOwogICAgICB0aGlzLmhvcml6b24ucmVzZXQoKTsKICAgICAgdGhpcy50UmV4LnJlc2V0KCk7CiAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuc291bmRGeC5CVVRUT05fUFJFU1MpOwogICAgICB0aGlzLmludmVydCh0cnVlKTsKICAgICAgdGhpcy51cGRhdGUoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBQYXVzZSB0aGUgZ2FtZSBpZiB0aGUgdGFiIGlzIG5vdCBpbiBmb2N1cy4KICAgKi8KICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uKGUpIHsKICAgIGlmIChkb2N1bWVudC5oaWRkZW4gfHwgZG9jdW1lbnQud2Via2l0SGlkZGVuIHx8IGUudHlwZSA9PSAnYmx1cicgfHwKICAgICAgZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlICE9ICd2aXNpYmxlJykgewogICAgICB0aGlzLnN0b3AoKTsKICAgIH0gZWxzZSBpZiAoIXRoaXMuY3Jhc2hlZCkgewogICAgICB0aGlzLnRSZXgucmVzZXQoKTsKICAgICAgdGhpcy5wbGF5KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUGxheSBhIHNvdW5kLgogICAqIEBwYXJhbSB7U291bmRCdWZmZXJ9IHNvdW5kQnVmZmVyCiAgICovCiAgcGxheVNvdW5kOiBmdW5jdGlvbihzb3VuZEJ1ZmZlcikgewogICAgaWYgKHNvdW5kQnVmZmVyKSB7CiAgICAgIHZhciBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7CiAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gc291bmRCdWZmZXI7CiAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7CiAgICAgIHNvdXJjZU5vZGUuc3RhcnQoMCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogSW52ZXJ0cyB0aGUgY3VycmVudCBwYWdlIC8gY2FudmFzIGNvbG9ycy4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IFdoZXRoZXIgdG8gcmVzZXQgY29sb3JzLgogICAqLwogIGludmVydDogZnVuY3Rpb24ocmVzZXQpIHsKICAgIGlmIChyZXNldCkgewogICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoUnVubmVyLmNsYXNzZXMuSU5WRVJURUQsIGZhbHNlKTsKICAgICAgdGhpcy5pbnZlcnRUaW1lciA9IDA7CiAgICAgIHRoaXMuaW52ZXJ0ZWQgPSBmYWxzZTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuaW52ZXJ0ZWQgPSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoUnVubmVyLmNsYXNzZXMuSU5WRVJURUQsCiAgICAgICAgICB0aGlzLmludmVydFRyaWdnZXIpOwogICAgfQogIH0KfTsKCgovKioKICogVXBkYXRlcyB0aGUgY2FudmFzIHNpemUgdGFraW5nIGludG8KICogYWNjb3VudCB0aGUgYmFja2luZyBzdG9yZSBwaXhlbCByYXRpbyBhbmQKICogdGhlIGRldmljZSBwaXhlbCByYXRpby4KICoKICogU2VlIGFydGljbGUgYnkgUGF1bCBMZXdpczoKICogaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvY2FudmFzL2hpZHBpLwogKgogKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMKICogQHBhcmFtIHtudW1iZXJ9IG9wdF93aWR0aAogKiBAcGFyYW0ge251bWJlcn0gb3B0X2hlaWdodAogKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjYW52YXMgd2FzIHNjYWxlZC4KICovClJ1bm5lci51cGRhdGVDYW52YXNTY2FsaW5nID0gZnVuY3Rpb24oY2FudmFzLCBvcHRfd2lkdGgsIG9wdF9oZWlnaHQpIHsKICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwoKICAvLyBRdWVyeSB0aGUgdmFyaW91cyBwaXhlbCByYXRpb3MKICB2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IE1hdGguZmxvb3Iod2luZG93LmRldmljZVBpeGVsUmF0aW8pIHx8IDE7CiAgdmFyIGJhY2tpbmdTdG9yZVJhdGlvID0gTWF0aC5mbG9vcihjb250ZXh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8pIHx8IDE7CiAgdmFyIHJhdGlvID0gZGV2aWNlUGl4ZWxSYXRpbyAvIGJhY2tpbmdTdG9yZVJhdGlvOwoKICAvLyBVcHNjYWxlIHRoZSBjYW52YXMgaWYgdGhlIHR3byByYXRpb3MgZG9uJ3QgbWF0Y2gKICBpZiAoZGV2aWNlUGl4ZWxSYXRpbyAhPT0gYmFja2luZ1N0b3JlUmF0aW8pIHsKICAgIHZhciBvbGRXaWR0aCA9IG9wdF93aWR0aCB8fCBjYW52YXMud2lkdGg7CiAgICB2YXIgb2xkSGVpZ2h0ID0gb3B0X2hlaWdodCB8fCBjYW52YXMuaGVpZ2h0OwoKICAgIGNhbnZhcy53aWR0aCA9IG9sZFdpZHRoICogcmF0aW87CiAgICBjYW52YXMuaGVpZ2h0ID0gb2xkSGVpZ2h0ICogcmF0aW87CgogICAgY2FudmFzLnN0eWxlLndpZHRoID0gb2xkV2lkdGggKyAncHgnOwogICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IG9sZEhlaWdodCArICdweCc7CgogICAgLy8gU2NhbGUgdGhlIGNvbnRleHQgdG8gY291bnRlciB0aGUgZmFjdCB0aGF0IHdlJ3ZlIG1hbnVhbGx5IHNjYWxlZAogICAgLy8gb3VyIGNhbnZhcyBlbGVtZW50LgogICAgY29udGV4dC5zY2FsZShyYXRpbywgcmF0aW8pOwogICAgcmV0dXJuIHRydWU7CiAgfSBlbHNlIGlmIChkZXZpY2VQaXhlbFJhdGlvID09IDEpIHsKICAgIC8vIFJlc2V0IHRoZSBjYW52YXMgd2lkdGggLyBoZWlnaHQuIEZpeGVzIHNjYWxpbmcgYnVnIHdoZW4gdGhlIHBhZ2UgaXMKICAgIC8vIHpvb21lZCBhbmQgdGhlIGRldmljZVBpeGVsUmF0aW8gY2hhbmdlcyBhY2NvcmRpbmdseS4KICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGNhbnZhcy53aWR0aCArICdweCc7CiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gY2FudmFzLmhlaWdodCArICdweCc7CiAgfQogIHJldHVybiBmYWxzZTsKfTsKCgovKioKICogR2V0IHJhbmRvbSBudW1iZXIuCiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4KICogQHBhcmFtIHtudW1iZXJ9IG1heAogKiBAcGFyYW0ge251bWJlcn0KICovCmZ1bmN0aW9uIGdldFJhbmRvbU51bShtaW4sIG1heCkgewogIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOwp9CgoKLyoqCiAqIFZpYnJhdGUgb24gbW9iaWxlIGRldmljZXMuCiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBEdXJhdGlvbiBvZiB0aGUgdmlicmF0aW9uIGluIG1pbGxpc2Vjb25kcy4KICovCmZ1bmN0aW9uIHZpYnJhdGUoZHVyYXRpb24pIHsKICBpZiAoSVNfTU9CSUxFICYmIHdpbmRvdy5uYXZpZ2F0b3IudmlicmF0ZSkgewogICAgd2luZG93Lm5hdmlnYXRvci52aWJyYXRlKGR1cmF0aW9uKTsKICB9Cn0KCgovKioKICogQ3JlYXRlIGNhbnZhcyBlbGVtZW50LgogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgRWxlbWVudCB0byBhcHBlbmQgY2FudmFzIHRvLgogKiBAcGFyYW0ge251bWJlcn0gd2lkdGgKICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodAogKiBAcGFyYW0ge3N0cmluZ30gb3B0X2NsYXNzbmFtZQogKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH0KICovCmZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyhjb250YWluZXIsIHdpZHRoLCBoZWlnaHQsIG9wdF9jbGFzc25hbWUpIHsKICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgY2FudmFzLmNsYXNzTmFtZSA9IG9wdF9jbGFzc25hbWUgPyBSdW5uZXIuY2xhc3Nlcy5DQU5WQVMgKyAnICcgKwogICAgICBvcHRfY2xhc3NuYW1lIDogUnVubmVyLmNsYXNzZXMuQ0FOVkFTOwogIGNhbnZhcy53aWR0aCA9IHdpZHRoOwogIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhcyk7CgogIHJldHVybiBjYW52YXM7Cn0KCgovKioKICogRGVjb2RlcyB0aGUgYmFzZSA2NCBhdWRpbyB0byBBcnJheUJ1ZmZlciB1c2VkIGJ5IFdlYiBBdWRpby4KICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0cmluZwogKi8KZnVuY3Rpb24gZGVjb2RlQmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjRTdHJpbmcpIHsKICB2YXIgbGVuID0gKGJhc2U2NFN0cmluZy5sZW5ndGggLyA0KSAqIDM7CiAgdmFyIHN0ciA9IGF0b2IoYmFzZTY0U3RyaW5nKTsKICB2YXIgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGVuKTsKICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgfQogIHJldHVybiBieXRlcy5idWZmZXI7Cn0KCgovKioKICogUmV0dXJuIHRoZSBjdXJyZW50IHRpbWVzdGFtcC4KICogQHJldHVybiB7bnVtYmVyfQogKi8KZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkgewogIHJldHVybiBJU19JT1MgPyBuZXcgRGF0ZSgpLmdldFRpbWUoKSA6IHBlcmZvcm1hbmNlLm5vdygpOwp9CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCgovKioKICogR2FtZSBvdmVyIHBhbmVsLgogKiBAcGFyYW0geyFIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzCiAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0SW1nUG9zCiAqIEBwYXJhbSB7T2JqZWN0fSByZXN0YXJ0SW1nUG9zCiAqIEBwYXJhbSB7IU9iamVjdH0gZGltZW5zaW9ucyBDYW52YXMgZGltZW5zaW9ucy4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBHYW1lT3ZlclBhbmVsKGNhbnZhcywgdGV4dEltZ1BvcywgcmVzdGFydEltZ1BvcywgZGltZW5zaW9ucykgewogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy5jYW52YXNEaW1lbnNpb25zID0gZGltZW5zaW9uczsKICB0aGlzLnRleHRJbWdQb3MgPSB0ZXh0SW1nUG9zOwogIHRoaXMucmVzdGFydEltZ1BvcyA9IHJlc3RhcnRJbWdQb3M7CiAgdGhpcy5kcmF3KCk7Cn07CgoKLyoqCiAqIERpbWVuc2lvbnMgdXNlZCBpbiB0aGUgcGFuZWwuCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpHYW1lT3ZlclBhbmVsLmRpbWVuc2lvbnMgPSB7CiAgVEVYVF9YOiAwLAogIFRFWFRfWTogMTMsCiAgVEVYVF9XSURUSDogMTkxLAogIFRFWFRfSEVJR0hUOiAxMSwKICBSRVNUQVJUX1dJRFRIOiAzNiwKICBSRVNUQVJUX0hFSUdIVDogMzIKfTsKCgpHYW1lT3ZlclBhbmVsLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBVcGRhdGUgdGhlIHBhbmVsIGRpbWVuc2lvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIE5ldyBjYW52YXMgd2lkdGguCiAgICogQHBhcmFtIHtudW1iZXJ9IG9wdF9oZWlnaHQgT3B0aW9uYWwgbmV3IGNhbnZhcyBoZWlnaHQuCiAgICovCiAgdXBkYXRlRGltZW5zaW9uczogZnVuY3Rpb24od2lkdGgsIG9wdF9oZWlnaHQpIHsKICAgIHRoaXMuY2FudmFzRGltZW5zaW9ucy5XSURUSCA9IHdpZHRoOwogICAgaWYgKG9wdF9oZWlnaHQpIHsKICAgICAgdGhpcy5jYW52YXNEaW1lbnNpb25zLkhFSUdIVCA9IG9wdF9oZWlnaHQ7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgcGFuZWwuCiAgICovCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB2YXIgZGltZW5zaW9ucyA9IEdhbWVPdmVyUGFuZWwuZGltZW5zaW9uczsKCiAgICB2YXIgY2VudGVyWCA9IHRoaXMuY2FudmFzRGltZW5zaW9ucy5XSURUSCAvIDI7CgogICAgLy8gR2FtZSBvdmVyIHRleHQuCiAgICB2YXIgdGV4dFNvdXJjZVggPSBkaW1lbnNpb25zLlRFWFRfWDsKICAgIHZhciB0ZXh0U291cmNlWSA9IGRpbWVuc2lvbnMuVEVYVF9ZOwogICAgdmFyIHRleHRTb3VyY2VXaWR0aCA9IGRpbWVuc2lvbnMuVEVYVF9XSURUSDsKICAgIHZhciB0ZXh0U291cmNlSGVpZ2h0ID0gZGltZW5zaW9ucy5URVhUX0hFSUdIVDsKCiAgICB2YXIgdGV4dFRhcmdldFggPSBNYXRoLnJvdW5kKGNlbnRlclggLSAoZGltZW5zaW9ucy5URVhUX1dJRFRIIC8gMikpOwogICAgdmFyIHRleHRUYXJnZXRZID0gTWF0aC5yb3VuZCgodGhpcy5jYW52YXNEaW1lbnNpb25zLkhFSUdIVCAtIDI1KSAvIDMpOwogICAgdmFyIHRleHRUYXJnZXRXaWR0aCA9IGRpbWVuc2lvbnMuVEVYVF9XSURUSDsKICAgIHZhciB0ZXh0VGFyZ2V0SGVpZ2h0ID0gZGltZW5zaW9ucy5URVhUX0hFSUdIVDsKCiAgICB2YXIgcmVzdGFydFNvdXJjZVdpZHRoID0gZGltZW5zaW9ucy5SRVNUQVJUX1dJRFRIOwogICAgdmFyIHJlc3RhcnRTb3VyY2VIZWlnaHQgPSBkaW1lbnNpb25zLlJFU1RBUlRfSEVJR0hUOwogICAgdmFyIHJlc3RhcnRUYXJnZXRYID0gY2VudGVyWCAtIChkaW1lbnNpb25zLlJFU1RBUlRfV0lEVEggLyAyKTsKICAgIHZhciByZXN0YXJ0VGFyZ2V0WSA9IHRoaXMuY2FudmFzRGltZW5zaW9ucy5IRUlHSFQgLyAyOwoKICAgIGlmIChJU19ISURQSSkgewogICAgICB0ZXh0U291cmNlWSAqPSAyOwogICAgICB0ZXh0U291cmNlWCAqPSAyOwogICAgICB0ZXh0U291cmNlV2lkdGggKj0gMjsKICAgICAgdGV4dFNvdXJjZUhlaWdodCAqPSAyOwogICAgICByZXN0YXJ0U291cmNlV2lkdGggKj0gMjsKICAgICAgcmVzdGFydFNvdXJjZUhlaWdodCAqPSAyOwogICAgfQoKICAgIHRleHRTb3VyY2VYICs9IHRoaXMudGV4dEltZ1Bvcy54OwogICAgdGV4dFNvdXJjZVkgKz0gdGhpcy50ZXh0SW1nUG9zLnk7CgogICAgLy8gR2FtZSBvdmVyIHRleHQgZnJvbSBzcHJpdGUuCiAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UoUnVubmVyLmltYWdlU3ByaXRlLAogICAgICAgIHRleHRTb3VyY2VYLCB0ZXh0U291cmNlWSwgdGV4dFNvdXJjZVdpZHRoLCB0ZXh0U291cmNlSGVpZ2h0LAogICAgICAgIHRleHRUYXJnZXRYLCB0ZXh0VGFyZ2V0WSwgdGV4dFRhcmdldFdpZHRoLCB0ZXh0VGFyZ2V0SGVpZ2h0KTsKCiAgICAvLyBSZXN0YXJ0IGJ1dHRvbi4KICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgICAgdGhpcy5yZXN0YXJ0SW1nUG9zLngsIHRoaXMucmVzdGFydEltZ1Bvcy55LAogICAgICAgIHJlc3RhcnRTb3VyY2VXaWR0aCwgcmVzdGFydFNvdXJjZUhlaWdodCwKICAgICAgICByZXN0YXJ0VGFyZ2V0WCwgcmVzdGFydFRhcmdldFksIGRpbWVuc2lvbnMuUkVTVEFSVF9XSURUSCwKICAgICAgICBkaW1lbnNpb25zLlJFU1RBUlRfSEVJR0hUKTsKICB9Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBDaGVjayBmb3IgYSBjb2xsaXNpb24uCiAqIEBwYXJhbSB7IU9ic3RhY2xlfSBvYnN0YWNsZQogKiBAcGFyYW0geyFUcmV4fSB0UmV4IFQtcmV4IG9iamVjdC4KICogQHBhcmFtIHtIVE1MQ2FudmFzQ29udGV4dH0gb3B0X2NhbnZhc0N0eCBPcHRpb25hbCBjYW52YXMgY29udGV4dCBmb3IgZHJhd2luZwogKiAgICBjb2xsaXNpb24gYm94ZXMuCiAqIEByZXR1cm4ge0FycmF5PENvbGxpc2lvbkJveD59CiAqLwpmdW5jdGlvbiBjaGVja0ZvckNvbGxpc2lvbihvYnN0YWNsZSwgdFJleCwgb3B0X2NhbnZhc0N0eCkgewogIHZhciBvYnN0YWNsZUJveFhQb3MgPSBSdW5uZXIuZGVmYXVsdERpbWVuc2lvbnMuV0lEVEggKyBvYnN0YWNsZS54UG9zOwoKICAvLyBBZGp1c3RtZW50cyBhcmUgbWFkZSB0byB0aGUgYm91bmRpbmcgYm94IGFzIHRoZXJlIGlzIGEgMSBwaXhlbCB3aGl0ZQogIC8vIGJvcmRlciBhcm91bmQgdGhlIHQtcmV4IGFuZCBvYnN0YWNsZXMuCiAgdmFyIHRSZXhCb3ggPSBuZXcgQ29sbGlzaW9uQm94KAogICAgICB0UmV4LnhQb3MgKyAxLAogICAgICB0UmV4LnlQb3MgKyAxLAogICAgICB0UmV4LmNvbmZpZy5XSURUSCAtIDIsCiAgICAgIHRSZXguY29uZmlnLkhFSUdIVCAtIDIpOwoKICB2YXIgb2JzdGFjbGVCb3ggPSBuZXcgQ29sbGlzaW9uQm94KAogICAgICBvYnN0YWNsZS54UG9zICsgMSwKICAgICAgb2JzdGFjbGUueVBvcyArIDEsCiAgICAgIG9ic3RhY2xlLnR5cGVDb25maWcud2lkdGggKiBvYnN0YWNsZS5zaXplIC0gMiwKICAgICAgb2JzdGFjbGUudHlwZUNvbmZpZy5oZWlnaHQgLSAyKTsKCiAgLy8gRGVidWcgb3V0ZXIgYm94CiAgaWYgKG9wdF9jYW52YXNDdHgpIHsKICAgIGRyYXdDb2xsaXNpb25Cb3hlcyhvcHRfY2FudmFzQ3R4LCB0UmV4Qm94LCBvYnN0YWNsZUJveCk7CiAgfQoKICAvLyBTaW1wbGUgb3V0ZXIgYm91bmRzIGNoZWNrLgogIGlmIChib3hDb21wYXJlKHRSZXhCb3gsIG9ic3RhY2xlQm94KSkgewogICAgdmFyIGNvbGxpc2lvbkJveGVzID0gb2JzdGFjbGUuY29sbGlzaW9uQm94ZXM7CiAgICB2YXIgdFJleENvbGxpc2lvbkJveGVzID0gdFJleC5kdWNraW5nID8KICAgICAgICBUcmV4LmNvbGxpc2lvbkJveGVzLkRVQ0tJTkcgOiBUcmV4LmNvbGxpc2lvbkJveGVzLlJVTk5JTkc7CgogICAgLy8gRGV0YWlsZWQgYXhpcyBhbGlnbmVkIGJveCBjaGVjay4KICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdFJleENvbGxpc2lvbkJveGVzLmxlbmd0aDsgdCsrKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sbGlzaW9uQm94ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyBBZGp1c3QgdGhlIGJveCB0byBhY3R1YWwgcG9zaXRpb25zLgogICAgICAgIHZhciBhZGpUcmV4Qm94ID0KICAgICAgICAgICAgY3JlYXRlQWRqdXN0ZWRDb2xsaXNpb25Cb3godFJleENvbGxpc2lvbkJveGVzW3RdLCB0UmV4Qm94KTsKICAgICAgICB2YXIgYWRqT2JzdGFjbGVCb3ggPQogICAgICAgICAgICBjcmVhdGVBZGp1c3RlZENvbGxpc2lvbkJveChjb2xsaXNpb25Cb3hlc1tpXSwgb2JzdGFjbGVCb3gpOwogICAgICAgIHZhciBjcmFzaGVkID0gYm94Q29tcGFyZShhZGpUcmV4Qm94LCBhZGpPYnN0YWNsZUJveCk7CgogICAgICAgIC8vIERyYXcgYm94ZXMgZm9yIGRlYnVnLgogICAgICAgIGlmIChvcHRfY2FudmFzQ3R4KSB7CiAgICAgICAgICBkcmF3Q29sbGlzaW9uQm94ZXMob3B0X2NhbnZhc0N0eCwgYWRqVHJleEJveCwgYWRqT2JzdGFjbGVCb3gpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNyYXNoZWQpIHsKICAgICAgICAgIHJldHVybiBbYWRqVHJleEJveCwgYWRqT2JzdGFjbGVCb3hdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgoKLyoqCiAqIEFkanVzdCB0aGUgY29sbGlzaW9uIGJveC4KICogQHBhcmFtIHshQ29sbGlzaW9uQm94fSBib3ggVGhlIG9yaWdpbmFsIGJveC4KICogQHBhcmFtIHshQ29sbGlzaW9uQm94fSBhZGp1c3RtZW50IEFkanVzdG1lbnQgYm94LgogKiBAcmV0dXJuIHtDb2xsaXNpb25Cb3h9IFRoZSBhZGp1c3RlZCBjb2xsaXNpb24gYm94IG9iamVjdC4KICovCmZ1bmN0aW9uIGNyZWF0ZUFkanVzdGVkQ29sbGlzaW9uQm94KGJveCwgYWRqdXN0bWVudCkgewogIHJldHVybiBuZXcgQ29sbGlzaW9uQm94KAogICAgICBib3gueCArIGFkanVzdG1lbnQueCwKICAgICAgYm94LnkgKyBhZGp1c3RtZW50LnksCiAgICAgIGJveC53aWR0aCwKICAgICAgYm94LmhlaWdodCk7Cn07CgoKLyoqCiAqIERyYXcgdGhlIGNvbGxpc2lvbiBib3hlcyBmb3IgZGVidWcuCiAqLwpmdW5jdGlvbiBkcmF3Q29sbGlzaW9uQm94ZXMoY2FudmFzQ3R4LCB0UmV4Qm94LCBvYnN0YWNsZUJveCkgewogIGNhbnZhc0N0eC5zYXZlKCk7CiAgY2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gJyNmMDAnOwogIGNhbnZhc0N0eC5zdHJva2VSZWN0KHRSZXhCb3gueCwgdFJleEJveC55LCB0UmV4Qm94LndpZHRoLCB0UmV4Qm94LmhlaWdodCk7CgogIGNhbnZhc0N0eC5zdHJva2VTdHlsZSA9ICcjMGYwJzsKICBjYW52YXNDdHguc3Ryb2tlUmVjdChvYnN0YWNsZUJveC54LCBvYnN0YWNsZUJveC55LAogICAgICBvYnN0YWNsZUJveC53aWR0aCwgb2JzdGFjbGVCb3guaGVpZ2h0KTsKICBjYW52YXNDdHgucmVzdG9yZSgpOwp9OwoKCi8qKgogKiBDb21wYXJlIHR3byBjb2xsaXNpb24gYm94ZXMgZm9yIGEgY29sbGlzaW9uLgogKiBAcGFyYW0ge0NvbGxpc2lvbkJveH0gdFJleEJveAogKiBAcGFyYW0ge0NvbGxpc2lvbkJveH0gb2JzdGFjbGVCb3gKICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm94ZXMgaW50ZXJzZWN0ZWQuCiAqLwpmdW5jdGlvbiBib3hDb21wYXJlKHRSZXhCb3gsIG9ic3RhY2xlQm94KSB7CiAgdmFyIGNyYXNoZWQgPSBmYWxzZTsKICB2YXIgdFJleEJveFggPSB0UmV4Qm94Lng7CiAgdmFyIHRSZXhCb3hZID0gdFJleEJveC55OwoKICB2YXIgb2JzdGFjbGVCb3hYID0gb2JzdGFjbGVCb3gueDsKICB2YXIgb2JzdGFjbGVCb3hZID0gb2JzdGFjbGVCb3gueTsKCiAgLy8gQXhpcy1BbGlnbmVkIEJvdW5kaW5nIEJveCBtZXRob2QuCiAgaWYgKHRSZXhCb3gueCA8IG9ic3RhY2xlQm94WCArIG9ic3RhY2xlQm94LndpZHRoICYmCiAgICAgIHRSZXhCb3gueCArIHRSZXhCb3gud2lkdGggPiBvYnN0YWNsZUJveFggJiYKICAgICAgdFJleEJveC55IDwgb2JzdGFjbGVCb3gueSArIG9ic3RhY2xlQm94LmhlaWdodCAmJgogICAgICB0UmV4Qm94LmhlaWdodCArIHRSZXhCb3gueSA+IG9ic3RhY2xlQm94LnkpIHsKICAgIGNyYXNoZWQgPSB0cnVlOwogIH0KCiAgcmV0dXJuIGNyYXNoZWQ7Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBDb2xsaXNpb24gYm94IG9iamVjdC4KICogQHBhcmFtIHtudW1iZXJ9IHggWCBwb3NpdGlvbi4KICogQHBhcmFtIHtudW1iZXJ9IHkgWSBQb3NpdGlvbi4KICogQHBhcmFtIHtudW1iZXJ9IHcgV2lkdGguCiAqIEBwYXJhbSB7bnVtYmVyfSBoIEhlaWdodC4KICovCmZ1bmN0aW9uIENvbGxpc2lvbkJveCh4LCB5LCB3LCBoKSB7CiAgdGhpcy54ID0geDsKICB0aGlzLnkgPSB5OwogIHRoaXMud2lkdGggPSB3OwogIHRoaXMuaGVpZ2h0ID0gaDsKfTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLyoqCiAqIE9ic3RhY2xlLgogKiBAcGFyYW0ge0hUTUxDYW52YXNDdHh9IGNhbnZhc0N0eAogKiBAcGFyYW0ge09ic3RhY2xlLnR5cGV9IHR5cGUKICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBPYnN0YWNsZSBwb3NpdGlvbiBpbiBzcHJpdGUuCiAqIEBwYXJhbSB7T2JqZWN0fSBkaW1lbnNpb25zCiAqIEBwYXJhbSB7bnVtYmVyfSBnYXBDb2VmZmljaWVudCBNdXRpcGxlciBpbiBkZXRlcm1pbmluZyB0aGUgZ2FwLgogKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICogQHBhcmFtIHtudW1iZXJ9IG9wdF94T2Zmc2V0CiAqLwpmdW5jdGlvbiBPYnN0YWNsZShjYW52YXNDdHgsIHR5cGUsIHNwcml0ZUltZ1BvcywgZGltZW5zaW9ucywKICAgIGdhcENvZWZmaWNpZW50LCBzcGVlZCwgb3B0X3hPZmZzZXQpIHsKCiAgdGhpcy5jYW52YXNDdHggPSBjYW52YXNDdHg7CiAgdGhpcy5zcHJpdGVQb3MgPSBzcHJpdGVJbWdQb3M7CiAgdGhpcy50eXBlQ29uZmlnID0gdHlwZTsKICB0aGlzLmdhcENvZWZmaWNpZW50ID0gZ2FwQ29lZmZpY2llbnQ7CiAgdGhpcy5zaXplID0gZ2V0UmFuZG9tTnVtKDEsIE9ic3RhY2xlLk1BWF9PQlNUQUNMRV9MRU5HVEgpOwogIHRoaXMuZGltZW5zaW9ucyA9IGRpbWVuc2lvbnM7CiAgdGhpcy5yZW1vdmUgPSBmYWxzZTsKICB0aGlzLnhQb3MgPSBkaW1lbnNpb25zLldJRFRIICsgKG9wdF94T2Zmc2V0IHx8IDApOwogIHRoaXMueVBvcyA9IDA7CiAgdGhpcy53aWR0aCA9IDA7CiAgdGhpcy5jb2xsaXNpb25Cb3hlcyA9IFtdOwogIHRoaXMuZ2FwID0gMDsKICB0aGlzLnNwZWVkT2Zmc2V0ID0gMDsKCiAgLy8gRm9yIGFuaW1hdGVkIG9ic3RhY2xlcy4KICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7CiAgdGhpcy50aW1lciA9IDA7CgogIHRoaXMuaW5pdChzcGVlZCk7Cn07CgovKioKICogQ29lZmZpY2llbnQgZm9yIGNhbGN1bGF0aW5nIHRoZSBtYXhpbXVtIGdhcC4KICogQGNvbnN0CiAqLwpPYnN0YWNsZS5NQVhfR0FQX0NPRUZGSUNJRU5UID0gMS41OwoKLyoqCiAqIE1heGltdW0gb2JzdGFjbGUgZ3JvdXBpbmcgY291bnQuCiAqIEBjb25zdAogKi8KT2JzdGFjbGUuTUFYX09CU1RBQ0xFX0xFTkdUSCA9IDMsCgoKT2JzdGFjbGUucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIERPTSBmb3IgdGhlIG9ic3RhY2xlLgogICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZAogICAqLwogIGluaXQ6IGZ1bmN0aW9uKHNwZWVkKSB7CiAgICB0aGlzLmNsb25lQ29sbGlzaW9uQm94ZXMoKTsKCiAgICAvLyBPbmx5IGFsbG93IHNpemluZyBpZiB3ZSdyZSBhdCB0aGUgcmlnaHQgc3BlZWQuCiAgICBpZiAodGhpcy5zaXplID4gMSAmJiB0aGlzLnR5cGVDb25maWcubXVsdGlwbGVTcGVlZCA+IHNwZWVkKSB7CiAgICAgIHRoaXMuc2l6ZSA9IDE7CiAgICB9CgogICAgdGhpcy53aWR0aCA9IHRoaXMudHlwZUNvbmZpZy53aWR0aCAqIHRoaXMuc2l6ZTsKCiAgICAvLyBDaGVjayBpZiBvYnN0YWNsZSBjYW4gYmUgcG9zaXRpb25lZCBhdCB2YXJpb3VzIGhlaWdodHMuCiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnR5cGVDb25maWcueVBvcykpICB7CiAgICAgIHZhciB5UG9zQ29uZmlnID0gSVNfTU9CSUxFID8gdGhpcy50eXBlQ29uZmlnLnlQb3NNb2JpbGUgOgogICAgICAgICAgdGhpcy50eXBlQ29uZmlnLnlQb3M7CiAgICAgIHRoaXMueVBvcyA9IHlQb3NDb25maWdbZ2V0UmFuZG9tTnVtKDAsIHlQb3NDb25maWcubGVuZ3RoIC0gMSldOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy55UG9zID0gdGhpcy50eXBlQ29uZmlnLnlQb3M7CiAgICB9CgogICAgdGhpcy5kcmF3KCk7CgogICAgLy8gTWFrZSBjb2xsaXNpb24gYm94IGFkanVzdG1lbnRzLAogICAgLy8gQ2VudHJhbCBib3ggaXMgYWRqdXN0ZWQgdG8gdGhlIHNpemUgYXMgb25lIGJveC4KICAgIC8vICAgICAgX19fXyAgICAgICAgX19fX19fICAgICAgICBfX19fX19fXwogICAgLy8gICAgX3wgICB8LXwgICAgX3wgICAgIHwtfCAgICBffCAgICAgICB8LXwKICAgIC8vICAgfCB8PC0+fCB8ICAgfCB8PC0tLT58IHwgICB8IHw8LS0tLS0+fCB8CiAgICAvLyAgIHwgfCAxIHwgfCAgIHwgfCAgMiAgfCB8ICAgfCB8ICAgMyAgIHwgfAogICAgLy8gICB8X3xfX198X3wgICB8X3xfX19fX3xffCAgIHxffF9fX19fX198X3wKICAgIC8vCiAgICBpZiAodGhpcy5zaXplID4gMSkgewogICAgICB0aGlzLmNvbGxpc2lvbkJveGVzWzFdLndpZHRoID0gdGhpcy53aWR0aCAtIHRoaXMuY29sbGlzaW9uQm94ZXNbMF0ud2lkdGggLQogICAgICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1syXS53aWR0aDsKICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1syXS54ID0gdGhpcy53aWR0aCAtIHRoaXMuY29sbGlzaW9uQm94ZXNbMl0ud2lkdGg7CiAgICB9CgogICAgLy8gRm9yIG9ic3RhY2xlcyB0aGF0IGdvIGF0IGEgZGlmZmVyZW50IHNwZWVkIGZyb20gdGhlIGhvcml6b24uCiAgICBpZiAodGhpcy50eXBlQ29uZmlnLnNwZWVkT2Zmc2V0KSB7CiAgICAgIHRoaXMuc3BlZWRPZmZzZXQgPSBNYXRoLnJhbmRvbSgpID4gMC41ID8gdGhpcy50eXBlQ29uZmlnLnNwZWVkT2Zmc2V0IDoKICAgICAgICAgIC10aGlzLnR5cGVDb25maWcuc3BlZWRPZmZzZXQ7CiAgICB9CgogICAgdGhpcy5nYXAgPSB0aGlzLmdldEdhcCh0aGlzLmdhcENvZWZmaWNpZW50LCBzcGVlZCk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyBhbmQgY3JvcCBiYXNlZCBvbiBzaXplLgogICAqLwogIGRyYXc6IGZ1bmN0aW9uKCkgewogICAgdmFyIHNvdXJjZVdpZHRoID0gdGhpcy50eXBlQ29uZmlnLndpZHRoOwogICAgdmFyIHNvdXJjZUhlaWdodCA9IHRoaXMudHlwZUNvbmZpZy5oZWlnaHQ7CgogICAgaWYgKElTX0hJRFBJKSB7CiAgICAgIHNvdXJjZVdpZHRoID0gc291cmNlV2lkdGggKiAyOwogICAgICBzb3VyY2VIZWlnaHQgPSBzb3VyY2VIZWlnaHQgKiAyOwogICAgfQoKICAgIC8vIFggcG9zaXRpb24gaW4gc3ByaXRlLgogICAgdmFyIHNvdXJjZVggPSAoc291cmNlV2lkdGggKiB0aGlzLnNpemUpICogKDAuNSAqICh0aGlzLnNpemUgLSAxKSkgKwogICAgICAgIHRoaXMuc3ByaXRlUG9zLng7CgogICAgLy8gQW5pbWF0aW9uIGZyYW1lcy4KICAgIGlmICh0aGlzLmN1cnJlbnRGcmFtZSA+IDApIHsKICAgICAgc291cmNlWCArPSBzb3VyY2VXaWR0aCAqIHRoaXMuY3VycmVudEZyYW1lOwogICAgfQoKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgIHNvdXJjZVgsIHRoaXMuc3ByaXRlUG9zLnksCiAgICAgIHNvdXJjZVdpZHRoICogdGhpcy5zaXplLCBzb3VyY2VIZWlnaHQsCiAgICAgIHRoaXMueFBvcywgdGhpcy55UG9zLAogICAgICB0aGlzLnR5cGVDb25maWcud2lkdGggKiB0aGlzLnNpemUsIHRoaXMudHlwZUNvbmZpZy5oZWlnaHQpOwogIH0sCgogIC8qKgogICAqIE9ic3RhY2xlIGZyYW1lIHVwZGF0ZS4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbihkZWx0YVRpbWUsIHNwZWVkKSB7CiAgICBpZiAoIXRoaXMucmVtb3ZlKSB7CiAgICAgIGlmICh0aGlzLnR5cGVDb25maWcuc3BlZWRPZmZzZXQpIHsKICAgICAgICBzcGVlZCArPSB0aGlzLnNwZWVkT2Zmc2V0OwogICAgICB9CiAgICAgIHRoaXMueFBvcyAtPSBNYXRoLmZsb29yKChzcGVlZCAqIEZQUyAvIDEwMDApICogZGVsdGFUaW1lKTsKCiAgICAgIC8vIFVwZGF0ZSBmcmFtZQogICAgICBpZiAodGhpcy50eXBlQ29uZmlnLm51bUZyYW1lcykgewogICAgICAgIHRoaXMudGltZXIgKz0gZGVsdGFUaW1lOwogICAgICAgIGlmICh0aGlzLnRpbWVyID49IHRoaXMudHlwZUNvbmZpZy5mcmFtZVJhdGUpIHsKICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0KICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9PSB0aGlzLnR5cGVDb25maWcubnVtRnJhbWVzIC0gMSA/CiAgICAgICAgICAgICAgMCA6IHRoaXMuY3VycmVudEZyYW1lICsgMTsKICAgICAgICAgIHRoaXMudGltZXIgPSAwOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmRyYXcoKTsKCiAgICAgIGlmICghdGhpcy5pc1Zpc2libGUoKSkgewogICAgICAgIHRoaXMucmVtb3ZlID0gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIENhbGN1bGF0ZSBhIHJhbmRvbSBnYXAgc2l6ZS4KICAgKiAtIE1pbmltdW0gZ2FwIGdldHMgd2lkZXIgYXMgc3BlZWQgaW5jcmVzZXMKICAgKiBAcGFyYW0ge251bWJlcn0gZ2FwQ29lZmZpY2llbnQKICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBnYXAgc2l6ZS4KICAgKi8KICBnZXRHYXA6IGZ1bmN0aW9uKGdhcENvZWZmaWNpZW50LCBzcGVlZCkgewogICAgdmFyIG1pbkdhcCA9IE1hdGgucm91bmQodGhpcy53aWR0aCAqIHNwZWVkICsKICAgICAgICAgIHRoaXMudHlwZUNvbmZpZy5taW5HYXAgKiBnYXBDb2VmZmljaWVudCk7CiAgICB2YXIgbWF4R2FwID0gTWF0aC5yb3VuZChtaW5HYXAgKiBPYnN0YWNsZS5NQVhfR0FQX0NPRUZGSUNJRU5UKTsKICAgIHJldHVybiBnZXRSYW5kb21OdW0obWluR2FwLCBtYXhHYXApOwogIH0sCgogIC8qKgogICAqIENoZWNrIGlmIG9ic3RhY2xlIGlzIHZpc2libGUuCiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgb2JzdGFjbGUgaXMgaW4gdGhlIGdhbWUgYXJlYS4KICAgKi8KICBpc1Zpc2libGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMueFBvcyArIHRoaXMud2lkdGggPiAwOwogIH0sCgogIC8qKgogICAqIE1ha2UgYSBjb3B5IG9mIHRoZSBjb2xsaXNpb24gYm94ZXMsIHNpbmNlIHRoZXNlIHdpbGwgY2hhbmdlIGJhc2VkIG9uCiAgICogb2JzdGFjbGUgdHlwZSBhbmQgc2l6ZS4KICAgKi8KICBjbG9uZUNvbGxpc2lvbkJveGVzOiBmdW5jdGlvbigpIHsKICAgIHZhciBjb2xsaXNpb25Cb3hlcyA9IHRoaXMudHlwZUNvbmZpZy5jb2xsaXNpb25Cb3hlczsKCiAgICBmb3IgKHZhciBpID0gY29sbGlzaW9uQm94ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1tpXSA9IG5ldyBDb2xsaXNpb25Cb3goY29sbGlzaW9uQm94ZXNbaV0ueCwKICAgICAgICAgIGNvbGxpc2lvbkJveGVzW2ldLnksIGNvbGxpc2lvbkJveGVzW2ldLndpZHRoLAogICAgICAgICAgY29sbGlzaW9uQm94ZXNbaV0uaGVpZ2h0KTsKICAgIH0KICB9Cn07CgoKLyoqCiAqIE9ic3RhY2xlIGRlZmluaXRpb25zLgogKiBtaW5HYXA6IG1pbmltdW0gcGl4ZWwgc3BhY2UgYmV0d2VlZW4gb2JzdGFjbGVzLgogKiBtdWx0aXBsZVNwZWVkOiBTcGVlZCBhdCB3aGljaCBtdWx0aXBsZXMgYXJlIGFsbG93ZWQuCiAqIHNwZWVkT2Zmc2V0OiBzcGVlZCBmYXN0ZXIgLyBzbG93ZXIgdGhhbiB0aGUgaG9yaXpvbi4KICogbWluU3BlZWQ6IE1pbmltdW0gc3BlZWQgd2hpY2ggdGhlIG9ic3RhY2xlIGNhbiBtYWtlIGFuIGFwcGVhcmFuY2UuCiAqLwpPYnN0YWNsZS50eXBlcyA9IFsKICB7CiAgICB0eXBlOiAnQ0FDVFVTX1NNQUxMJywKICAgIHdpZHRoOiAxNywKICAgIGhlaWdodDogMzUsCiAgICB5UG9zOiAxMDUsCiAgICBtdWx0aXBsZVNwZWVkOiA0LAogICAgbWluR2FwOiAxMjAsCiAgICBtaW5TcGVlZDogMCwKICAgIGNvbGxpc2lvbkJveGVzOiBbCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMCwgNywgNSwgMjcpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDQsIDAsIDYsIDM0KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMCwgNCwgNywgMTQpCiAgICBdCiAgfSwKICB7CiAgICB0eXBlOiAnQ0FDVFVTX0xBUkdFJywKICAgIHdpZHRoOiAyNSwKICAgIGhlaWdodDogNTAsCiAgICB5UG9zOiA5MCwKICAgIG11bHRpcGxlU3BlZWQ6IDcsCiAgICBtaW5HYXA6IDEyMCwKICAgIG1pblNwZWVkOiAwLAogICAgY29sbGlzaW9uQm94ZXM6IFsKICAgICAgbmV3IENvbGxpc2lvbkJveCgwLCAxMiwgNywgMzgpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDgsIDAsIDcsIDQ5KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMywgMTAsIDEwLCAzOCkKICAgIF0KICB9LAogIHsKICAgIHR5cGU6ICdQVEVST0RBQ1RZTCcsCiAgICB3aWR0aDogNDYsCiAgICBoZWlnaHQ6IDQwLAogICAgeVBvczogWyAxMDAsIDc1LCA1MCBdLCAvLyBWYXJpYWJsZSBoZWlnaHQuCiAgICB5UG9zTW9iaWxlOiBbIDEwMCwgNTAgXSwgLy8gVmFyaWFibGUgaGVpZ2h0IG1vYmlsZS4KICAgIG11bHRpcGxlU3BlZWQ6IDk5OSwKICAgIG1pblNwZWVkOiA4LjUsCiAgICBtaW5HYXA6IDE1MCwKICAgIGNvbGxpc2lvbkJveGVzOiBbCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMTUsIDE1LCAxNiwgNSksCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMTgsIDIxLCAyNCwgNiksCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMiwgMTQsIDQsIDMpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDYsIDEwLCA0LCA3KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMCwgOCwgNiwgOSkKICAgIF0sCiAgICBudW1GcmFtZXM6IDIsCiAgICBmcmFtZVJhdGU6IDEwMDAvNiwKICAgIHNwZWVkT2Zmc2V0OiAuOAogIH0KXTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovKioKICogVC1yZXggZ2FtZSBjaGFyYWN0ZXIuCiAqIEBwYXJhbSB7SFRNTENhbnZhc30gY2FudmFzCiAqIEBwYXJhbSB7T2JqZWN0fSBzcHJpdGVQb3MgUG9zaXRpb25pbmcgd2l0aGluIGltYWdlIHNwcml0ZS4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBUcmV4KGNhbnZhcywgc3ByaXRlUG9zKSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICB0aGlzLnNwcml0ZVBvcyA9IHNwcml0ZVBvczsKICB0aGlzLnhQb3MgPSAwOwogIHRoaXMueVBvcyA9IDA7CiAgLy8gUG9zaXRpb24gd2hlbiBvbiB0aGUgZ3JvdW5kLgogIHRoaXMuZ3JvdW5kWVBvcyA9IDA7CiAgdGhpcy5jdXJyZW50RnJhbWUgPSAwOwogIHRoaXMuY3VycmVudEFuaW1GcmFtZXMgPSBbXTsKICB0aGlzLmJsaW5rRGVsYXkgPSAwOwogIHRoaXMuYmxpbmtDb3VudCA9IDA7CiAgdGhpcy5hbmltU3RhcnRUaW1lID0gMDsKICB0aGlzLnRpbWVyID0gMDsKICB0aGlzLm1zUGVyRnJhbWUgPSAxMDAwIC8gRlBTOwogIHRoaXMuY29uZmlnID0gVHJleC5jb25maWc7CiAgLy8gQ3VycmVudCBzdGF0dXMuCiAgdGhpcy5zdGF0dXMgPSBUcmV4LnN0YXR1cy5XQUlUSU5HOwoKICB0aGlzLmp1bXBpbmcgPSBmYWxzZTsKICB0aGlzLmR1Y2tpbmcgPSBmYWxzZTsKICB0aGlzLmp1bXBWZWxvY2l0eSA9IDA7CiAgdGhpcy5yZWFjaGVkTWluSGVpZ2h0ID0gZmFsc2U7CiAgdGhpcy5zcGVlZERyb3AgPSBmYWxzZTsKICB0aGlzLmp1bXBDb3VudCA9IDA7CiAgdGhpcy5qdW1wc3BvdFggPSAwOwoKICB0aGlzLmluaXQoKTsKfTsKCgovKioKICogVC1yZXggcGxheWVyIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovClRyZXguY29uZmlnID0gewogIERST1BfVkVMT0NJVFk6IC01LAogIEdSQVZJVFk6IDAuNiwKICBIRUlHSFQ6IDQ3LAogIEhFSUdIVF9EVUNLOiAyNSwKICBJTklJVEFMX0pVTVBfVkVMT0NJVFk6IC0xMCwKICBJTlRST19EVVJBVElPTjogMTUwMCwKICBNQVhfSlVNUF9IRUlHSFQ6IDMwLAogIE1JTl9KVU1QX0hFSUdIVDogMzAsCiAgU1BFRURfRFJPUF9DT0VGRklDSUVOVDogMywKICBTUFJJVEVfV0lEVEg6IDI2MiwKICBTVEFSVF9YX1BPUzogNTAsCiAgV0lEVEg6IDQ0LAogIFdJRFRIX0RVQ0s6IDU5Cn07CgoKLyoqCiAqIFVzZWQgaW4gY29sbGlzaW9uIGRldGVjdGlvbi4KICogQHR5cGUge0FycmF5PENvbGxpc2lvbkJveD59CiAqLwpUcmV4LmNvbGxpc2lvbkJveGVzID0gewogIERVQ0tJTkc6IFsKICAgIG5ldyBDb2xsaXNpb25Cb3goMSwgMTgsIDU1LCAyNSkKICBdLAogIFJVTk5JTkc6IFsKICAgIG5ldyBDb2xsaXNpb25Cb3goMjIsIDAsIDE3LCAxNiksCiAgICBuZXcgQ29sbGlzaW9uQm94KDEsIDE4LCAzMCwgOSksCiAgICBuZXcgQ29sbGlzaW9uQm94KDEwLCAzNSwgMTQsIDgpLAogICAgbmV3IENvbGxpc2lvbkJveCgxLCAyNCwgMjksIDUpLAogICAgbmV3IENvbGxpc2lvbkJveCg1LCAzMCwgMjEsIDQpLAogICAgbmV3IENvbGxpc2lvbkJveCg5LCAzNCwgMTUsIDQpCiAgXQp9OwoKCi8qKgogKiBBbmltYXRpb24gc3RhdGVzLgogKiBAZW51bSB7c3RyaW5nfQogKi8KVHJleC5zdGF0dXMgPSB7CiAgQ1JBU0hFRDogJ0NSQVNIRUQnLAogIERVQ0tJTkc6ICdEVUNLSU5HJywKICBKVU1QSU5HOiAnSlVNUElORycsCiAgUlVOTklORzogJ1JVTk5JTkcnLAogIFdBSVRJTkc6ICdXQUlUSU5HJwp9OwoKLyoqCiAqIEJsaW5raW5nIGNvZWZmaWNpZW50LgogKiBAY29uc3QKICovClRyZXguQkxJTktfVElNSU5HID0gNzAwMDsKCgovKioKICogQW5pbWF0aW9uIGNvbmZpZyBmb3IgZGlmZmVyZW50IHN0YXRlcy4KICogQGVudW0ge09iamVjdH0KICovClRyZXguYW5pbUZyYW1lcyA9IHsKICBXQUlUSU5HOiB7CiAgICBmcmFtZXM6IFs0NCwgMF0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gMwogIH0sCiAgUlVOTklORzogewogICAgZnJhbWVzOiBbODgsIDEzMl0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gMTIKICB9LAogIENSQVNIRUQ6IHsKICAgIGZyYW1lczogWzIyMF0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gNjAKICB9LAogIEpVTVBJTkc6IHsKICAgIGZyYW1lczogWzBdLAogICAgbXNQZXJGcmFtZTogMTAwMCAvIDYwCiAgfSwKICBEVUNLSU5HOiB7CiAgICBmcmFtZXM6IFsyNjIsIDMyMV0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gOAogIH0KfTsKCgpUcmV4LnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBULXJleCBwbGF5ZXIgaW5pdGFsaXNlci4KICAgKiBTZXRzIHRoZSB0LXJleCB0byBibGluayBhdCByYW5kb20gaW50ZXJ2YWxzLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5ncm91bmRZUG9zID0gUnVubmVyLmRlZmF1bHREaW1lbnNpb25zLkhFSUdIVCAtIHRoaXMuY29uZmlnLkhFSUdIVCAtCiAgICAgICAgUnVubmVyLmNvbmZpZy5CT1RUT01fUEFEOwogICAgdGhpcy55UG9zID0gdGhpcy5ncm91bmRZUG9zOwogICAgdGhpcy5taW5KdW1wSGVpZ2h0ID0gdGhpcy5ncm91bmRZUG9zIC0gdGhpcy5jb25maWcuTUlOX0pVTVBfSEVJR0hUOwoKICAgIHRoaXMuZHJhdygwLCAwKTsKICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLldBSVRJTkcpOwogIH0sCgogIC8qKgogICAqIFNldHRlciBmb3IgdGhlIGp1bXAgdmVsb2NpdHkuCiAgICogVGhlIGFwcHJvcmlhdGUgZHJvcCB2ZWxvY2l0eSBpcyBhbHNvIHNldC4KICAgKi8KICBzZXRKdW1wVmVsb2NpdHk6IGZ1bmN0aW9uKHNldHRpbmcpIHsKICAgIHRoaXMuY29uZmlnLklOSUlUQUxfSlVNUF9WRUxPQ0lUWSA9IC1zZXR0aW5nOwogICAgdGhpcy5jb25maWcuRFJPUF9WRUxPQ0lUWSA9IC1zZXR0aW5nIC8gMjsKICB9LAoKICAvKioKICAgKiBTZXQgdGhlIGFuaW1hdGlvbiBzdGF0dXMuCiAgICogQHBhcmFtIHshbnVtYmVyfSBkZWx0YVRpbWUKICAgKiBAcGFyYW0ge1RyZXguc3RhdHVzfSBzdGF0dXMgT3B0aW9uYWwgc3RhdHVzIHRvIHN3aXRjaCB0by4KICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGRlbHRhVGltZSwgb3B0X3N0YXR1cykgewogICAgdGhpcy50aW1lciArPSBkZWx0YVRpbWU7CgogICAgLy8gVXBkYXRlIHRoZSBzdGF0dXMuCiAgICBpZiAob3B0X3N0YXR1cykgewogICAgICB0aGlzLnN0YXR1cyA9IG9wdF9zdGF0dXM7CiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDsKICAgICAgdGhpcy5tc1BlckZyYW1lID0gVHJleC5hbmltRnJhbWVzW29wdF9zdGF0dXNdLm1zUGVyRnJhbWU7CiAgICAgIHRoaXMuY3VycmVudEFuaW1GcmFtZXMgPSBUcmV4LmFuaW1GcmFtZXNbb3B0X3N0YXR1c10uZnJhbWVzOwoKICAgICAgaWYgKG9wdF9zdGF0dXMgPT0gVHJleC5zdGF0dXMuV0FJVElORykgewogICAgICAgIHRoaXMuYW5pbVN0YXJ0VGltZSA9IGdldFRpbWVTdGFtcCgpOwogICAgICAgIHRoaXMuc2V0QmxpbmtEZWxheSgpOwogICAgICB9CiAgICB9CgogICAgLy8gR2FtZSBpbnRybyBhbmltYXRpb24sIFQtcmV4IG1vdmVzIGluIGZyb20gdGhlIGxlZnQuCiAgICBpZiAodGhpcy5wbGF5aW5nSW50cm8gJiYgdGhpcy54UG9zIDwgdGhpcy5jb25maWcuU1RBUlRfWF9QT1MpIHsKICAgICAgdGhpcy54UG9zICs9IE1hdGgucm91bmQoKHRoaXMuY29uZmlnLlNUQVJUX1hfUE9TIC8KICAgICAgICAgIHRoaXMuY29uZmlnLklOVFJPX0RVUkFUSU9OKSAqIGRlbHRhVGltZSk7CiAgICB9CgogICAgaWYgKHRoaXMuc3RhdHVzID09IFRyZXguc3RhdHVzLldBSVRJTkcpIHsKICAgICAgdGhpcy5ibGluayhnZXRUaW1lU3RhbXAoKSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmRyYXcodGhpcy5jdXJyZW50QW5pbUZyYW1lc1t0aGlzLmN1cnJlbnRGcmFtZV0sIDApOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgZnJhbWUgcG9zaXRpb24uCiAgICBpZiAodGhpcy50aW1lciA+PSB0aGlzLm1zUGVyRnJhbWUpIHsKICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmN1cnJlbnRGcmFtZSA9PQogICAgICAgICAgdGhpcy5jdXJyZW50QW5pbUZyYW1lcy5sZW5ndGggLSAxID8gMCA6IHRoaXMuY3VycmVudEZyYW1lICsgMTsKICAgICAgdGhpcy50aW1lciA9IDA7CiAgICB9CgogICAgLy8gU3BlZWQgZHJvcCBiZWNvbWVzIGR1Y2sgaWYgdGhlIGRvd24ga2V5IGlzIHN0aWxsIGJlaW5nIHByZXNzZWQuCiAgICBpZiAodGhpcy5zcGVlZERyb3AgJiYgdGhpcy55UG9zID09IHRoaXMuZ3JvdW5kWVBvcykgewogICAgICB0aGlzLnNwZWVkRHJvcCA9IGZhbHNlOwogICAgICB0aGlzLnNldER1Y2sodHJ1ZSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgdC1yZXggdG8gYSBwYXJ0aWN1bGFyIHBvc2l0aW9uLgogICAqIEBwYXJhbSB7bnVtYmVyfSB4CiAgICogQHBhcmFtIHtudW1iZXJ9IHkKICAgKi8KICBkcmF3OiBmdW5jdGlvbih4LCB5KSB7CiAgICB2YXIgc291cmNlWCA9IHg7CiAgICB2YXIgc291cmNlWSA9IHk7CiAgICB2YXIgc291cmNlV2lkdGggPSB0aGlzLmR1Y2tpbmcgJiYgdGhpcy5zdGF0dXMgIT0gVHJleC5zdGF0dXMuQ1JBU0hFRCA/CiAgICAgICAgdGhpcy5jb25maWcuV0lEVEhfRFVDSyA6IHRoaXMuY29uZmlnLldJRFRIOwogICAgdmFyIHNvdXJjZUhlaWdodCA9IHRoaXMuY29uZmlnLkhFSUdIVDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgc291cmNlWCAqPSAyOwogICAgICBzb3VyY2VZICo9IDI7CiAgICAgIHNvdXJjZVdpZHRoICo9IDI7CiAgICAgIHNvdXJjZUhlaWdodCAqPSAyOwogICAgfQoKICAgIC8vIEFkanVzdG1lbnRzIGZvciBzcHJpdGUgc2hlZXQgcG9zaXRpb24uCiAgICBzb3VyY2VYICs9IHRoaXMuc3ByaXRlUG9zLng7CiAgICBzb3VyY2VZICs9IHRoaXMuc3ByaXRlUG9zLnk7CgogICAgLy8gRHVja2luZy4KICAgIGlmICh0aGlzLmR1Y2tpbmcgJiYgdGhpcy5zdGF0dXMgIT0gVHJleC5zdGF0dXMuQ1JBU0hFRCkgewogICAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UoUnVubmVyLmltYWdlU3ByaXRlLCBzb3VyY2VYLCBzb3VyY2VZLAogICAgICAgICAgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCwKICAgICAgICAgIHRoaXMueFBvcywgdGhpcy55UG9zLAogICAgICAgICAgdGhpcy5jb25maWcuV0lEVEhfRFVDSywgdGhpcy5jb25maWcuSEVJR0hUKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIENyYXNoZWQgd2hpbHN0IGR1Y2tpbmcuIFRyZXggaXMgc3RhbmRpbmcgdXAgc28gbmVlZHMgYWRqdXN0bWVudC4KICAgICAgaWYgKHRoaXMuZHVja2luZyAmJiB0aGlzLnN0YXR1cyA9PSBUcmV4LnN0YXR1cy5DUkFTSEVEKSB7CiAgICAgICAgdGhpcy54UG9zKys7CiAgICAgIH0KICAgICAgLy8gU3RhbmRpbmcgLyBydW5uaW5nCiAgICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHNvdXJjZVgsIHNvdXJjZVksCiAgICAgICAgICBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LAogICAgICAgICAgdGhpcy54UG9zLCB0aGlzLnlQb3MsCiAgICAgICAgICB0aGlzLmNvbmZpZy5XSURUSCwgdGhpcy5jb25maWcuSEVJR0hUKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBTZXRzIGEgcmFuZG9tIHRpbWUgZm9yIHRoZSBibGluayB0byBoYXBwZW4uCiAgICovCiAgc2V0QmxpbmtEZWxheTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmJsaW5rRGVsYXkgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIFRyZXguQkxJTktfVElNSU5HKTsKICB9LAoKICAvKioKICAgKiBNYWtlIHQtcmV4IGJsaW5rIGF0IHJhbmRvbSBpbnRlcnZhbHMuCiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgQ3VycmVudCB0aW1lIGluIG1pbGxpc2Vjb25kcy4KICAgKi8KICBibGluazogZnVuY3Rpb24odGltZSkgewogICAgdmFyIGRlbHRhVGltZSA9IHRpbWUgLSB0aGlzLmFuaW1TdGFydFRpbWU7CgogICAgaWYgKGRlbHRhVGltZSA+PSB0aGlzLmJsaW5rRGVsYXkpIHsKICAgICAgdGhpcy5kcmF3KHRoaXMuY3VycmVudEFuaW1GcmFtZXNbdGhpcy5jdXJyZW50RnJhbWVdLCAwKTsKCiAgICAgIGlmICh0aGlzLmN1cnJlbnRGcmFtZSA9PSAxKSB7CiAgICAgICAgLy8gU2V0IG5ldyByYW5kb20gZGVsYXkgdG8gYmxpbmsuCiAgICAgICAgdGhpcy5zZXRCbGlua0RlbGF5KCk7CiAgICAgICAgdGhpcy5hbmltU3RhcnRUaW1lID0gdGltZTsKICAgICAgICB0aGlzLmJsaW5rQ291bnQrKzsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEluaXRpYWxpc2UgYSBqdW1wLgogICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZAogICAqLwogIHN0YXJ0SnVtcDogZnVuY3Rpb24oc3BlZWQpIHsKICAgIGlmICghdGhpcy5qdW1waW5nKSB7CiAgICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLkpVTVBJTkcpOwogICAgICAvLyBUd2VhayB0aGUganVtcCB2ZWxvY2l0eSBiYXNlZCBvbiB0aGUgc3BlZWQuCiAgICAgIHRoaXMuanVtcFZlbG9jaXR5ID0gdGhpcy5jb25maWcuSU5JSVRBTF9KVU1QX1ZFTE9DSVRZIC0gKHNwZWVkIC8gMTApOwogICAgICB0aGlzLmp1bXBpbmcgPSB0cnVlOwogICAgICB0aGlzLnJlYWNoZWRNaW5IZWlnaHQgPSBmYWxzZTsKICAgICAgdGhpcy5zcGVlZERyb3AgPSBmYWxzZTsKICAgIH0KICB9LAoKICAvKioKICAgKiBKdW1wIGlzIGNvbXBsZXRlLCBmYWxsaW5nIGRvd24uCiAgICovCiAgZW5kSnVtcDogZnVuY3Rpb24oKSB7CiAgICBpZiAodGhpcy5yZWFjaGVkTWluSGVpZ2h0ICYmCiAgICAgICAgdGhpcy5qdW1wVmVsb2NpdHkgPCB0aGlzLmNvbmZpZy5EUk9QX1ZFTE9DSVRZKSB7CiAgICAgIHRoaXMuanVtcFZlbG9jaXR5ID0gdGhpcy5jb25maWcuRFJPUF9WRUxPQ0lUWTsKICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGUgZnJhbWUgZm9yIGEganVtcC4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlSnVtcDogZnVuY3Rpb24oZGVsdGFUaW1lLCBzcGVlZCkgewogICAgdmFyIG1zUGVyRnJhbWUgPSBUcmV4LmFuaW1GcmFtZXNbdGhpcy5zdGF0dXNdLm1zUGVyRnJhbWU7CiAgICB2YXIgZnJhbWVzRWxhcHNlZCA9IGRlbHRhVGltZSAvIG1zUGVyRnJhbWU7CgogICAgLy8gU3BlZWQgZHJvcCBtYWtlcyBUcmV4IGZhbGwgZmFzdGVyLgogICAgaWYgKHRoaXMuc3BlZWREcm9wKSB7CiAgICAgIHRoaXMueVBvcyArPSBNYXRoLnJvdW5kKHRoaXMuanVtcFZlbG9jaXR5ICoKICAgICAgICAgIHRoaXMuY29uZmlnLlNQRUVEX0RST1BfQ09FRkZJQ0lFTlQgKiBmcmFtZXNFbGFwc2VkKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMueVBvcyArPSBNYXRoLnJvdW5kKHRoaXMuanVtcFZlbG9jaXR5ICogZnJhbWVzRWxhcHNlZCk7CiAgICB9CgogICAgdGhpcy5qdW1wVmVsb2NpdHkgKz0gdGhpcy5jb25maWcuR1JBVklUWSAqIGZyYW1lc0VsYXBzZWQ7CgogICAgLy8gTWluaW11bSBoZWlnaHQgaGFzIGJlZW4gcmVhY2hlZC4KICAgIGlmICh0aGlzLnlQb3MgPCB0aGlzLm1pbkp1bXBIZWlnaHQgfHwgdGhpcy5zcGVlZERyb3ApIHsKICAgICAgdGhpcy5yZWFjaGVkTWluSGVpZ2h0ID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBSZWFjaGVkIG1heCBoZWlnaHQKICAgIGlmICh0aGlzLnlQb3MgPCB0aGlzLmNvbmZpZy5NQVhfSlVNUF9IRUlHSFQgfHwgdGhpcy5zcGVlZERyb3ApIHsKICAgICAgdGhpcy5lbmRKdW1wKCk7CiAgICB9CgogICAgLy8gQmFjayBkb3duIGF0IGdyb3VuZCBsZXZlbC4gSnVtcCBjb21wbGV0ZWQuCiAgICBpZiAodGhpcy55UG9zID4gdGhpcy5ncm91bmRZUG9zKSB7CiAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgdGhpcy5qdW1wQ291bnQrKzsKICAgIH0KCiAgICB0aGlzLnVwZGF0ZShkZWx0YVRpbWUpOwogIH0sCgogIC8qKgogICAqIFNldCB0aGUgc3BlZWQgZHJvcC4gSW1tZWRpYXRlbHkgY2FuY2VscyB0aGUgY3VycmVudCBqdW1wLgogICAqLwogIHNldFNwZWVkRHJvcDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnNwZWVkRHJvcCA9IHRydWU7CiAgICB0aGlzLmp1bXBWZWxvY2l0eSA9IDE7CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIHtib29sZWFufSBpc0R1Y2tpbmcuCiAgICovCiAgc2V0RHVjazogZnVuY3Rpb24oaXNEdWNraW5nKSB7CiAgICBpZiAoaXNEdWNraW5nICYmIHRoaXMuc3RhdHVzICE9IFRyZXguc3RhdHVzLkRVQ0tJTkcpIHsKICAgICAgdGhpcy51cGRhdGUoMCwgVHJleC5zdGF0dXMuRFVDS0lORyk7CiAgICAgIHRoaXMuZHVja2luZyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdHVzID09IFRyZXguc3RhdHVzLkRVQ0tJTkcpIHsKICAgICAgdGhpcy51cGRhdGUoMCwgVHJleC5zdGF0dXMuUlVOTklORyk7CiAgICAgIHRoaXMuZHVja2luZyA9IGZhbHNlOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlc2V0IHRoZSB0LXJleCB0byBydW5uaW5nIGF0IHN0YXJ0IG9mIGdhbWUuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy55UG9zID0gdGhpcy5ncm91bmRZUG9zOwogICAgdGhpcy5qdW1wVmVsb2NpdHkgPSAwOwogICAgdGhpcy5qdW1waW5nID0gZmFsc2U7CiAgICB0aGlzLmR1Y2tpbmcgPSBmYWxzZTsKICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLlJVTk5JTkcpOwogICAgdGhpcy5taWRhaXIgPSBmYWxzZTsKICAgIHRoaXMuc3BlZWREcm9wID0gZmFsc2U7CiAgICB0aGlzLmp1bXBDb3VudCA9IDA7CiAgfQp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogSGFuZGxlcyBkaXNwbGF5aW5nIHRoZSBkaXN0YW5jZSBtZXRlci4KICogQHBhcmFtIHshSFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcwogKiBAcGFyYW0ge09iamVjdH0gc3ByaXRlUG9zIEltYWdlIHBvc2l0aW9uIGluIHNwcml0ZS4KICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1dpZHRoCiAqIEBjb25zdHJ1Y3RvcgogKi8KZnVuY3Rpb24gRGlzdGFuY2VNZXRlcihjYW52YXMsIHNwcml0ZVBvcywgY2FudmFzV2lkdGgpIHsKICB0aGlzLmNhbnZhcyA9IGNhbnZhczsKICB0aGlzLmNhbnZhc0N0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuaW1hZ2UgPSBSdW5uZXIuaW1hZ2VTcHJpdGU7CiAgdGhpcy5zcHJpdGVQb3MgPSBzcHJpdGVQb3M7CiAgdGhpcy54ID0gMDsKICB0aGlzLnkgPSA1OwoKICB0aGlzLmN1cnJlbnREaXN0YW5jZSA9IDA7CiAgdGhpcy5tYXhTY29yZSA9IDA7CiAgdGhpcy5oaWdoU2NvcmUgPSAwOwogIHRoaXMuY29udGFpbmVyID0gbnVsbDsKCiAgdGhpcy5kaWdpdHMgPSBbXTsKICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgdGhpcy5kZWZhdWx0U3RyaW5nID0gJyc7CiAgdGhpcy5mbGFzaFRpbWVyID0gMDsKICB0aGlzLmZsYXNoSXRlcmF0aW9ucyA9IDA7CiAgdGhpcy5pbnZlcnRUcmlnZ2VyID0gZmFsc2U7CgogIHRoaXMuY29uZmlnID0gRGlzdGFuY2VNZXRlci5jb25maWc7CiAgdGhpcy5tYXhTY29yZVVuaXRzID0gdGhpcy5jb25maWcuTUFYX0RJU1RBTkNFX1VOSVRTOwogIHRoaXMuaW5pdChjYW52YXNXaWR0aCk7Cn07CgoKLyoqCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMgPSB7CiAgV0lEVEg6IDEwLAogIEhFSUdIVDogMTMsCiAgREVTVF9XSURUSDogMTEKfTsKCgovKioKICogWSBwb3NpdGlvbmluZyBvZiB0aGUgZGlnaXRzIGluIHRoZSBzcHJpdGUgc2hlZXQuCiAqIFggcG9zaXRpb24gaXMgYWx3YXlzIDAuCiAqIEB0eXBlIHtBcnJheTxudW1iZXI+fQogKi8KRGlzdGFuY2VNZXRlci55UG9zID0gWzAsIDEzLCAyNywgNDAsIDUzLCA2NywgODAsIDkzLCAxMDcsIDEyMF07CgoKLyoqCiAqIERpc3RhbmNlIG1ldGVyIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkRpc3RhbmNlTWV0ZXIuY29uZmlnID0gewogIC8vIE51bWJlciBvZiBkaWdpdHMuCiAgTUFYX0RJU1RBTkNFX1VOSVRTOiA1LAoKICAvLyBEaXN0YW5jZSB0aGF0IGNhdXNlcyBhY2hpZXZlbWVudCBhbmltYXRpb24uCiAgQUNISUVWRU1FTlRfRElTVEFOQ0U6IDEwMCwKCiAgLy8gVXNlZCBmb3IgY29udmVyc2lvbiBmcm9tIHBpeGVsIGRpc3RhbmNlIHRvIGEgc2NhbGVkIHVuaXQuCiAgQ09FRkZJQ0lFTlQ6IDAuMDI1LAoKICAvLyBGbGFzaCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuCiAgRkxBU0hfRFVSQVRJT046IDEwMDAgLyA0LAoKICAvLyBGbGFzaCBpdGVyYXRpb25zIGZvciBhY2hpZXZlbWVudCBhbmltYXRpb24uCiAgRkxBU0hfSVRFUkFUSU9OUzogMwp9OwoKCkRpc3RhbmNlTWV0ZXIucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIGRpc3RhbmNlIG1ldGVyIHRvICcwMDAwMCcuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIENhbnZhcyB3aWR0aCBpbiBweC4KICAgKi8KICBpbml0OiBmdW5jdGlvbih3aWR0aCkgewogICAgdmFyIG1heERpc3RhbmNlU3RyID0gJyc7CgogICAgdGhpcy5jYWxjWFBvcyh3aWR0aCk7CiAgICB0aGlzLm1heFNjb3JlID0gdGhpcy5tYXhTY29yZVVuaXRzOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1heFNjb3JlVW5pdHM7IGkrKykgewogICAgICB0aGlzLmRyYXcoaSwgMCk7CiAgICAgIHRoaXMuZGVmYXVsdFN0cmluZyArPSAnMCc7CiAgICAgIG1heERpc3RhbmNlU3RyICs9ICc5JzsKICAgIH0KCiAgICB0aGlzLm1heFNjb3JlID0gcGFyc2VJbnQobWF4RGlzdGFuY2VTdHIpOwogIH0sCgogIC8qKgogICAqIENhbGN1bGF0ZSB0aGUgeFBvcyBpbiB0aGUgY2FudmFzLgogICAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNXaWR0aAogICAqLwogIGNhbGNYUG9zOiBmdW5jdGlvbihjYW52YXNXaWR0aCkgewogICAgdGhpcy54ID0gY2FudmFzV2lkdGggLSAoRGlzdGFuY2VNZXRlci5kaW1lbnNpb25zLkRFU1RfV0lEVEggKgogICAgICAgICh0aGlzLm1heFNjb3JlVW5pdHMgKyAxKSk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyBhIGRpZ2l0IHRvIGNhbnZhcy4KICAgKiBAcGFyYW0ge251bWJlcn0gZGlnaXRQb3MgUG9zaXRpb24gb2YgdGhlIGRpZ2l0LgogICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBEaWdpdCB2YWx1ZSAwLTkuCiAgICogQHBhcmFtIHtib29sZWFufSBvcHRfaGlnaFNjb3JlIFdoZXRoZXIgZHJhd2luZyB0aGUgaGlnaCBzY29yZS4KICAgKi8KICBkcmF3OiBmdW5jdGlvbihkaWdpdFBvcywgdmFsdWUsIG9wdF9oaWdoU2NvcmUpIHsKICAgIHZhciBzb3VyY2VXaWR0aCA9IERpc3RhbmNlTWV0ZXIuZGltZW5zaW9ucy5XSURUSDsKICAgIHZhciBzb3VyY2VIZWlnaHQgPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuSEVJR0hUOwogICAgdmFyIHNvdXJjZVggPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuV0lEVEggKiB2YWx1ZTsKICAgIHZhciBzb3VyY2VZID0gMDsKCiAgICB2YXIgdGFyZ2V0WCA9IGRpZ2l0UG9zICogRGlzdGFuY2VNZXRlci5kaW1lbnNpb25zLkRFU1RfV0lEVEg7CiAgICB2YXIgdGFyZ2V0WSA9IHRoaXMueTsKICAgIHZhciB0YXJnZXRXaWR0aCA9IERpc3RhbmNlTWV0ZXIuZGltZW5zaW9ucy5XSURUSDsKICAgIHZhciB0YXJnZXRIZWlnaHQgPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuSEVJR0hUOwoKICAgIC8vIEZvciBoaWdoIERQSSB3ZSAyeCBzb3VyY2UgdmFsdWVzLgogICAgaWYgKElTX0hJRFBJKSB7CiAgICAgIHNvdXJjZVdpZHRoICo9IDI7CiAgICAgIHNvdXJjZUhlaWdodCAqPSAyOwogICAgICBzb3VyY2VYICo9IDI7CiAgICB9CgogICAgc291cmNlWCArPSB0aGlzLnNwcml0ZVBvcy54OwogICAgc291cmNlWSArPSB0aGlzLnNwcml0ZVBvcy55OwoKICAgIHRoaXMuY2FudmFzQ3R4LnNhdmUoKTsKCiAgICBpZiAob3B0X2hpZ2hTY29yZSkgewogICAgICAvLyBMZWZ0IG9mIHRoZSBjdXJyZW50IHNjb3JlLgogICAgICB2YXIgaGlnaFNjb3JlWCA9IHRoaXMueCAtICh0aGlzLm1heFNjb3JlVW5pdHMgKiAyKSAqCiAgICAgICAgICBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuV0lEVEg7CiAgICAgIHRoaXMuY2FudmFzQ3R4LnRyYW5zbGF0ZShoaWdoU2NvcmVYLCB0aGlzLnkpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5jYW52YXNDdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTsKICAgIH0KCiAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgc291cmNlWCwgc291cmNlWSwKICAgICAgICBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LAogICAgICAgIHRhcmdldFgsIHRhcmdldFksCiAgICAgICAgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodAogICAgICApOwoKICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvKioKICAgKiBDb3ZlcnQgcGl4ZWwgZGlzdGFuY2UgdG8gYSAncmVhbCcgZGlzdGFuY2UuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIFBpeGVsIGRpc3RhbmNlIHJhbi4KICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSAncmVhbCcgZGlzdGFuY2UgcmFuLgogICAqLwogIGdldEFjdHVhbERpc3RhbmNlOiBmdW5jdGlvbihkaXN0YW5jZSkgewogICAgcmV0dXJuIGRpc3RhbmNlID8gTWF0aC5yb3VuZChkaXN0YW5jZSAqIHRoaXMuY29uZmlnLkNPRUZGSUNJRU5UKSA6IDA7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBkaXN0YW5jZSBtZXRlci4KICAgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UKICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYWNoZWl2ZW1lbnQgc291bmQgZnggc2hvdWxkIGJlIHBsYXllZC4KICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGRlbHRhVGltZSwgZGlzdGFuY2UpIHsKICAgIHZhciBwYWludCA9IHRydWU7CiAgICB2YXIgcGxheVNvdW5kID0gZmFsc2U7CgogICAgaWYgKCF0aGlzLmFjaGVpdmVtZW50KSB7CiAgICAgIGRpc3RhbmNlID0gdGhpcy5nZXRBY3R1YWxEaXN0YW5jZShkaXN0YW5jZSk7CiAgICAgIC8vIFNjb3JlIGhhcyBnb25lIGJleW9uZCB0aGUgaW5pdGlhbCBkaWdpdCBjb3VudC4KICAgICAgaWYgKGRpc3RhbmNlID4gdGhpcy5tYXhTY29yZSAmJiB0aGlzLm1heFNjb3JlVW5pdHMgPT0KICAgICAgICB0aGlzLmNvbmZpZy5NQVhfRElTVEFOQ0VfVU5JVFMpIHsKICAgICAgICB0aGlzLm1heFNjb3JlVW5pdHMrKzsKICAgICAgICB0aGlzLm1heFNjb3JlID0gcGFyc2VJbnQodGhpcy5tYXhTY29yZSArICc5Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDA7CiAgICAgIH0KCiAgICAgIGlmIChkaXN0YW5jZSA+IDApIHsKICAgICAgICAvLyBBY2hlaXZlbWVudCB1bmxvY2tlZAogICAgICAgIGlmIChkaXN0YW5jZSAlIHRoaXMuY29uZmlnLkFDSElFVkVNRU5UX0RJU1RBTkNFID09IDApIHsKICAgICAgICAgIC8vIEZsYXNoIHNjb3JlIGFuZCBwbGF5IHNvdW5kLgogICAgICAgICAgdGhpcy5hY2hlaXZlbWVudCA9IHRydWU7CiAgICAgICAgICB0aGlzLmZsYXNoVGltZXIgPSAwOwogICAgICAgICAgcGxheVNvdW5kID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vIENyZWF0ZSBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGlzdGFuY2Ugd2l0aCBsZWFkaW5nIDAuCiAgICAgICAgdmFyIGRpc3RhbmNlU3RyID0gKHRoaXMuZGVmYXVsdFN0cmluZyArCiAgICAgICAgICAgIGRpc3RhbmNlKS5zdWJzdHIoLXRoaXMubWF4U2NvcmVVbml0cyk7CiAgICAgICAgdGhpcy5kaWdpdHMgPSBkaXN0YW5jZVN0ci5zcGxpdCgnJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5kaWdpdHMgPSB0aGlzLmRlZmF1bHRTdHJpbmcuc3BsaXQoJycpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBDb250cm9sIGZsYXNoaW5nIG9mIHRoZSBzY29yZSBvbiByZWFjaGluZyBhY2hlaXZlbWVudC4KICAgICAgaWYgKHRoaXMuZmxhc2hJdGVyYXRpb25zIDw9IHRoaXMuY29uZmlnLkZMQVNIX0lURVJBVElPTlMpIHsKICAgICAgICB0aGlzLmZsYXNoVGltZXIgKz0gZGVsdGFUaW1lOwoKICAgICAgICBpZiAodGhpcy5mbGFzaFRpbWVyIDwgdGhpcy5jb25maWcuRkxBU0hfRFVSQVRJT04pIHsKICAgICAgICAgIHBhaW50ID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZsYXNoVGltZXIgPgogICAgICAgICAgICB0aGlzLmNvbmZpZy5GTEFTSF9EVVJBVElPTiAqIDIpIHsKICAgICAgICAgIHRoaXMuZmxhc2hUaW1lciA9IDA7CiAgICAgICAgICB0aGlzLmZsYXNoSXRlcmF0aW9ucysrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgICAgICAgdGhpcy5mbGFzaEl0ZXJhdGlvbnMgPSAwOwogICAgICAgIHRoaXMuZmxhc2hUaW1lciA9IDA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBEcmF3IHRoZSBkaWdpdHMgaWYgbm90IGZsYXNoaW5nLgogICAgaWYgKHBhaW50KSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLmRpZ2l0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRoaXMuZHJhdyhpLCBwYXJzZUludCh0aGlzLmRpZ2l0c1tpXSkpOwogICAgICB9CiAgICB9CgogICAgdGhpcy5kcmF3SGlnaFNjb3JlKCk7CiAgICByZXR1cm4gcGxheVNvdW5kOwogIH0sCgogIC8qKgogICAqIERyYXcgdGhlIGhpZ2ggc2NvcmUuCiAgICovCiAgZHJhd0hpZ2hTY29yZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNhbnZhc0N0eC5zYXZlKCk7CiAgICB0aGlzLmNhbnZhc0N0eC5nbG9iYWxBbHBoYSA9IC44OwogICAgZm9yICh2YXIgaSA9IHRoaXMuaGlnaFNjb3JlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHRoaXMuZHJhdyhpLCBwYXJzZUludCh0aGlzLmhpZ2hTY29yZVtpXSwgMTApLCB0cnVlKTsKICAgIH0KICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvKioKICAgKiBTZXQgdGhlIGhpZ2hzY29yZSBhcyBhIGFycmF5IHN0cmluZy4KICAgKiBQb3NpdGlvbiBvZiBjaGFyIGluIHRoZSBzcHJpdGU6IEggLSAxMCwgSSAtIDExLgogICAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSBEaXN0YW5jZSByYW4gaW4gcGl4ZWxzLgogICAqLwogIHNldEhpZ2hTY29yZTogZnVuY3Rpb24oZGlzdGFuY2UpIHsKICAgIGRpc3RhbmNlID0gdGhpcy5nZXRBY3R1YWxEaXN0YW5jZShkaXN0YW5jZSk7CiAgICB2YXIgaGlnaFNjb3JlU3RyID0gKHRoaXMuZGVmYXVsdFN0cmluZyArCiAgICAgICAgZGlzdGFuY2UpLnN1YnN0cigtdGhpcy5tYXhTY29yZVVuaXRzKTsKCiAgICB0aGlzLmhpZ2hTY29yZSA9IFsnMTAnLCAnMTEnLCAnJ10uY29uY2F0KGhpZ2hTY29yZVN0ci5zcGxpdCgnJykpOwogIH0sCgogIC8qKgogICAqIFJlc2V0IHRoZSBkaXN0YW5jZSBtZXRlciBiYWNrIHRvICcwMDAwMCcuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy51cGRhdGUoMCk7CiAgICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgfQp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogQ2xvdWQgYmFja2dyb3VuZCBpdGVtLgogKiBTaW1pbGFyIHRvIGFuIG9ic3RhY2xlIG9iamVjdCBidXQgd2l0aG91dCBjb2xsaXNpb24gYm94ZXMuCiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBDYW52YXMgZWxlbWVudC4KICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBQb3NpdGlvbiBvZiBpbWFnZSBpbiBzcHJpdGUuCiAqIEBwYXJhbSB7bnVtYmVyfSBjb250YWluZXJXaWR0aAogKi8KZnVuY3Rpb24gQ2xvdWQoY2FudmFzLCBzcHJpdGVQb3MsIGNvbnRhaW5lcldpZHRoKSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY29udGFpbmVyV2lkdGggPSBjb250YWluZXJXaWR0aDsKICB0aGlzLnhQb3MgPSBjb250YWluZXJXaWR0aDsKICB0aGlzLnlQb3MgPSAwOwogIHRoaXMucmVtb3ZlID0gZmFsc2U7CiAgdGhpcy5jbG91ZEdhcCA9IGdldFJhbmRvbU51bShDbG91ZC5jb25maWcuTUlOX0NMT1VEX0dBUCwKICAgICAgQ2xvdWQuY29uZmlnLk1BWF9DTE9VRF9HQVApOwoKICB0aGlzLmluaXQoKTsKfTsKCgovKioKICogQ2xvdWQgb2JqZWN0IGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkNsb3VkLmNvbmZpZyA9IHsKICBIRUlHSFQ6IDE0LAogIE1BWF9DTE9VRF9HQVA6IDQwMCwKICBNQVhfU0tZX0xFVkVMOiAzMCwKICBNSU5fQ0xPVURfR0FQOiAxMDAsCiAgTUlOX1NLWV9MRVZFTDogNzEsCiAgV0lEVEg6IDQ2Cn07CgoKQ2xvdWQucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIGNsb3VkLiBTZXRzIHRoZSBDbG91ZCBoZWlnaHQuCiAgICovCiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnlQb3MgPSBnZXRSYW5kb21OdW0oQ2xvdWQuY29uZmlnLk1BWF9TS1lfTEVWRUwsCiAgICAgICAgQ2xvdWQuY29uZmlnLk1JTl9TS1lfTEVWRUwpOwogICAgdGhpcy5kcmF3KCk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgY2xvdWQuCiAgICovCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNhbnZhc0N0eC5zYXZlKCk7CiAgICB2YXIgc291cmNlV2lkdGggPSBDbG91ZC5jb25maWcuV0lEVEg7CiAgICB2YXIgc291cmNlSGVpZ2h0ID0gQ2xvdWQuY29uZmlnLkhFSUdIVDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgc291cmNlV2lkdGggPSBzb3VyY2VXaWR0aCAqIDI7CiAgICAgIHNvdXJjZUhlaWdodCA9IHNvdXJjZUhlaWdodCAqIDI7CiAgICB9CgogICAgdGhpcy5jYW52YXNDdHguZHJhd0ltYWdlKFJ1bm5lci5pbWFnZVNwcml0ZSwgdGhpcy5zcHJpdGVQb3MueCwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQsCiAgICAgICAgdGhpcy54UG9zLCB0aGlzLnlQb3MsCiAgICAgICAgQ2xvdWQuY29uZmlnLldJRFRILCBDbG91ZC5jb25maWcuSEVJR0hUKTsKCiAgICB0aGlzLmNhbnZhc0N0eC5yZXN0b3JlKCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjbG91ZCBwb3NpdGlvbi4KICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKHNwZWVkKSB7CiAgICBpZiAoIXRoaXMucmVtb3ZlKSB7CiAgICAgIHRoaXMueFBvcyAtPSBNYXRoLmNlaWwoc3BlZWQpOwogICAgICB0aGlzLmRyYXcoKTsKCiAgICAgIC8vIE1hcmsgYXMgcmVtb3ZlYWJsZSBpZiBubyBsb25nZXIgaW4gdGhlIGNhbnZhcy4KICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7CiAgICAgICAgdGhpcy5yZW1vdmUgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ2hlY2sgaWYgdGhlIGNsb3VkIGlzIHZpc2libGUgb24gdGhlIHN0YWdlLgogICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICovCiAgaXNWaXNpYmxlOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnhQb3MgKyBDbG91ZC5jb25maWcuV0lEVEggPiAwOwogIH0KfTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLyoqCiAqIE5pZ2h0bW9kZSBzaG93cyBhIG1vb24gYW5kIHN0YXJzIG9uIHRoZSBob3Jpem9uLgogKi8KZnVuY3Rpb24gTmlnaHRNb2RlKGNhbnZhcywgc3ByaXRlUG9zLCBjb250YWluZXJXaWR0aCkgewogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy54UG9zID0gY29udGFpbmVyV2lkdGggLSA1MDsKICB0aGlzLnlQb3MgPSAzMDsKICB0aGlzLmN1cnJlbnRQaGFzZSA9IDA7CiAgdGhpcy5vcGFjaXR5ID0gMDsKICB0aGlzLmNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyV2lkdGg7CiAgdGhpcy5zdGFycyA9IFtdOwogIHRoaXMuZHJhd1N0YXJzID0gZmFsc2U7CiAgdGhpcy5wbGFjZVN0YXJzKCk7Cn07CgovKioKICogQGVudW0ge251bWJlcn0KICovCk5pZ2h0TW9kZS5jb25maWcgPSB7CiAgRkFERV9TUEVFRDogMC4wMzUsCiAgSEVJR0hUOiA0MCwKICBNT09OX1NQRUVEOiAwLjI1LAogIE5VTV9TVEFSUzogMiwKICBTVEFSX1NJWkU6IDksCiAgU1RBUl9TUEVFRDogMC4zLAogIFNUQVJfTUFYX1k6IDcwLAogIFdJRFRIOiAyMAp9OwoKTmlnaHRNb2RlLnBoYXNlcyA9IFsxNDAsIDEyMCwgMTAwLCA2MCwgNDAsIDIwLCAwXTsKCk5pZ2h0TW9kZS5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogVXBkYXRlIG1vdmluZyBtb29uLCBjaGFuZ2luZyBwaGFzZXMuCiAgICogQHBhcmFtIHtib29sZWFufSBhY3RpdmF0ZWQgV2hldGhlciBuaWdodCBtb2RlIGlzIGFjdGl2YXRlZC4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGEKICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGFjdGl2YXRlZCwgZGVsdGEpIHsKICAgIC8vIE1vb24gcGhhc2UuCiAgICBpZiAoYWN0aXZhdGVkICYmIHRoaXMub3BhY2l0eSA9PSAwKSB7CiAgICAgIHRoaXMuY3VycmVudFBoYXNlKys7CgogICAgICBpZiAodGhpcy5jdXJyZW50UGhhc2UgPj0gTmlnaHRNb2RlLnBoYXNlcy5sZW5ndGgpIHsKICAgICAgICB0aGlzLmN1cnJlbnRQaGFzZSA9IDA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBGYWRlIGluIC8gb3V0LgogICAgaWYgKGFjdGl2YXRlZCAmJiAodGhpcy5vcGFjaXR5IDwgMSB8fCB0aGlzLm9wYWNpdHkgPT0gMCkpIHsKICAgICAgdGhpcy5vcGFjaXR5ICs9IE5pZ2h0TW9kZS5jb25maWcuRkFERV9TUEVFRDsKICAgIH0gZWxzZSBpZiAodGhpcy5vcGFjaXR5ID4gMCkgewogICAgICB0aGlzLm9wYWNpdHkgLT0gTmlnaHRNb2RlLmNvbmZpZy5GQURFX1NQRUVEOwogICAgfQoKICAgIC8vIFNldCBtb29uIHBvc2l0aW9uaW5nLgogICAgaWYgKHRoaXMub3BhY2l0eSA+IDApIHsKICAgICAgdGhpcy54UG9zID0gdGhpcy51cGRhdGVYUG9zKHRoaXMueFBvcywgTmlnaHRNb2RlLmNvbmZpZy5NT09OX1NQRUVEKTsKCiAgICAgIC8vIFVwZGF0ZSBzdGFycy4KICAgICAgaWYgKHRoaXMuZHJhd1N0YXJzKSB7CiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICAgICAgICB0aGlzLnN0YXJzW2ldLnggPSB0aGlzLnVwZGF0ZVhQb3ModGhpcy5zdGFyc1tpXS54LAogICAgICAgICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NQRUVEKTsKICAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuZHJhdygpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5vcGFjaXR5ID0gMDsKICAgICAgdGhpcy5wbGFjZVN0YXJzKCk7CiAgICB9CiAgICB0aGlzLmRyYXdTdGFycyA9IHRydWU7CiAgfSwKCiAgdXBkYXRlWFBvczogZnVuY3Rpb24oY3VycmVudFBvcywgc3BlZWQpIHsKICAgIGlmIChjdXJyZW50UG9zIDwgLU5pZ2h0TW9kZS5jb25maWcuV0lEVEgpIHsKICAgICAgY3VycmVudFBvcyA9IHRoaXMuY29udGFpbmVyV2lkdGg7CiAgICB9IGVsc2UgewogICAgICBjdXJyZW50UG9zIC09IHNwZWVkOwogICAgfQogICAgcmV0dXJuIGN1cnJlbnRQb3M7CiAgfSwKCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB2YXIgbW9vblNvdXJjZVdpZHRoID0gdGhpcy5jdXJyZW50UGhhc2UgPT0gMyA/IE5pZ2h0TW9kZS5jb25maWcuV0lEVEggKiAyIDoKICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5XSURUSDsKICAgIHZhciBtb29uU291cmNlSGVpZ2h0ID0gTmlnaHRNb2RlLmNvbmZpZy5IRUlHSFQ7CiAgICB2YXIgbW9vblNvdXJjZVggPSB0aGlzLnNwcml0ZVBvcy54ICsgTmlnaHRNb2RlLnBoYXNlc1t0aGlzLmN1cnJlbnRQaGFzZV07CiAgICB2YXIgbW9vbk91dHB1dFdpZHRoID0gbW9vblNvdXJjZVdpZHRoOwogICAgdmFyIHN0YXJTaXplID0gTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NJWkU7CiAgICB2YXIgc3RhclNvdXJjZVggPSBSdW5uZXIuc3ByaXRlRGVmaW5pdGlvbi5MRFBJLlNUQVIueDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgbW9vblNvdXJjZVdpZHRoICo9IDI7CiAgICAgIG1vb25Tb3VyY2VIZWlnaHQgKj0gMjsKICAgICAgbW9vblNvdXJjZVggPSB0aGlzLnNwcml0ZVBvcy54ICsKICAgICAgICAgIChOaWdodE1vZGUucGhhc2VzW3RoaXMuY3VycmVudFBoYXNlXSAqIDIpOwogICAgICBzdGFyU2l6ZSAqPSAyOwogICAgICBzdGFyU291cmNlWCA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkhEUEkuU1RBUi54OwogICAgfQoKICAgIHRoaXMuY2FudmFzQ3R4LnNhdmUoKTsKICAgIHRoaXMuY2FudmFzQ3R4Lmdsb2JhbEFscGhhID0gdGhpcy5vcGFjaXR5OwoKICAgIC8vIFN0YXJzLgogICAgaWYgKHRoaXMuZHJhd1N0YXJzKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgICAgICAgIHN0YXJTb3VyY2VYLCB0aGlzLnN0YXJzW2ldLnNvdXJjZVksIHN0YXJTaXplLCBzdGFyU2l6ZSwKICAgICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLnN0YXJzW2ldLngpLCB0aGlzLnN0YXJzW2ldLnksCiAgICAgICAgICAgIE5pZ2h0TW9kZS5jb25maWcuU1RBUl9TSVpFLCBOaWdodE1vZGUuY29uZmlnLlNUQVJfU0laRSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBNb29uLgogICAgdGhpcy5jYW52YXNDdHguZHJhd0ltYWdlKFJ1bm5lci5pbWFnZVNwcml0ZSwgbW9vblNvdXJjZVgsCiAgICAgICAgdGhpcy5zcHJpdGVQb3MueSwgbW9vblNvdXJjZVdpZHRoLCBtb29uU291cmNlSGVpZ2h0LAogICAgICAgIE1hdGgucm91bmQodGhpcy54UG9zKSwgdGhpcy55UG9zLAogICAgICAgIG1vb25PdXRwdXRXaWR0aCwgTmlnaHRNb2RlLmNvbmZpZy5IRUlHSFQpOwoKICAgIHRoaXMuY2FudmFzQ3R4Lmdsb2JhbEFscGhhID0gMTsKICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvLyBEbyBzdGFyIHBsYWNlbWVudC4KICBwbGFjZVN0YXJzOiBmdW5jdGlvbigpIHsKICAgIHZhciBzZWdtZW50U2l6ZSA9IE1hdGgucm91bmQodGhpcy5jb250YWluZXJXaWR0aCAvCiAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlMpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICB0aGlzLnN0YXJzW2ldID0ge307CiAgICAgIHRoaXMuc3RhcnNbaV0ueCA9IGdldFJhbmRvbU51bShzZWdtZW50U2l6ZSAqIGksIHNlZ21lbnRTaXplICogKGkgKyAxKSk7CiAgICAgIHRoaXMuc3RhcnNbaV0ueSA9IGdldFJhbmRvbU51bSgwLCBOaWdodE1vZGUuY29uZmlnLlNUQVJfTUFYX1kpOwoKICAgICAgaWYgKElTX0hJRFBJKSB7CiAgICAgICAgdGhpcy5zdGFyc1tpXS5zb3VyY2VZID0gUnVubmVyLnNwcml0ZURlZmluaXRpb24uSERQSS5TVEFSLnkgKwogICAgICAgICAgICBOaWdodE1vZGUuY29uZmlnLlNUQVJfU0laRSAqIDIgKiBpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc3RhcnNbaV0uc291cmNlWSA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkxEUEkuU1RBUi55ICsKICAgICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NJWkUgKiBpOwogICAgICB9CiAgICB9CiAgfSwKCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5jdXJyZW50UGhhc2UgPSAwOwogICAgdGhpcy5vcGFjaXR5ID0gMDsKICAgIHRoaXMudXBkYXRlKGZhbHNlKTsKICB9Cgp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogSG9yaXpvbiBMaW5lLgogKiBDb25zaXN0cyBvZiB0d28gY29ubmVjdGluZyBsaW5lcy4gUmFuZG9tbHkgYXNzaWducyBhIGZsYXQgLyBidW1weSBob3Jpem9uLgogKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMKICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBIb3Jpem9uIHBvc2l0aW9uIGluIHNwcml0ZS4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBIb3Jpem9uTGluZShjYW52YXMsIHNwcml0ZVBvcykgewogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy5zb3VyY2VEaW1lbnNpb25zID0ge307CiAgdGhpcy5kaW1lbnNpb25zID0gSG9yaXpvbkxpbmUuZGltZW5zaW9uczsKICB0aGlzLnNvdXJjZVhQb3MgPSBbdGhpcy5zcHJpdGVQb3MueCwgdGhpcy5zcHJpdGVQb3MueCArCiAgICAgIHRoaXMuZGltZW5zaW9ucy5XSURUSF07CiAgdGhpcy54UG9zID0gW107CiAgdGhpcy55UG9zID0gMDsKICB0aGlzLmJ1bXBUaHJlc2hvbGQgPSAwLjU7CgogIHRoaXMuc2V0U291cmNlRGltZW5zaW9ucygpOwogIHRoaXMuZHJhdygpOwp9OwoKCi8qKgogKiBIb3Jpem9uIGxpbmUgZGltZW5zaW9ucy4KICogQGVudW0ge251bWJlcn0KICovCkhvcml6b25MaW5lLmRpbWVuc2lvbnMgPSB7CiAgV0lEVEg6IDYwMCwKICBIRUlHSFQ6IDEyLAogIFlQT1M6IDEyNwp9OwoKCkhvcml6b25MaW5lLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBTZXQgdGhlIHNvdXJjZSBkaW1lbnNpb25zIG9mIHRoZSBob3Jpem9uIGxpbmUuCiAgICovCiAgc2V0U291cmNlRGltZW5zaW9uczogZnVuY3Rpb24oKSB7CgogICAgZm9yICh2YXIgZGltZW5zaW9uIGluIEhvcml6b25MaW5lLmRpbWVuc2lvbnMpIHsKICAgICAgaWYgKElTX0hJRFBJKSB7CiAgICAgICAgaWYgKGRpbWVuc2lvbiAhPSAnWVBPUycpIHsKICAgICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9uc1tkaW1lbnNpb25dID0KICAgICAgICAgICAgICBIb3Jpem9uTGluZS5kaW1lbnNpb25zW2RpbWVuc2lvbl0gKiAyOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNvdXJjZURpbWVuc2lvbnNbZGltZW5zaW9uXSA9CiAgICAgICAgICAgIEhvcml6b25MaW5lLmRpbWVuc2lvbnNbZGltZW5zaW9uXTsKICAgICAgfQogICAgICB0aGlzLmRpbWVuc2lvbnNbZGltZW5zaW9uXSA9IEhvcml6b25MaW5lLmRpbWVuc2lvbnNbZGltZW5zaW9uXTsKICAgIH0KCiAgICB0aGlzLnhQb3MgPSBbMCwgSG9yaXpvbkxpbmUuZGltZW5zaW9ucy5XSURUSF07CiAgICB0aGlzLnlQb3MgPSBIb3Jpem9uTGluZS5kaW1lbnNpb25zLllQT1M7CiAgfSwKCiAgLyoqCiAgICogUmV0dXJuIHRoZSBjcm9wIHggcG9zaXRpb24gb2YgYSB0eXBlLgogICAqLwogIGdldFJhbmRvbVR5cGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPiB0aGlzLmJ1bXBUaHJlc2hvbGQgPyB0aGlzLmRpbWVuc2lvbnMuV0lEVEggOiAwOwogIH0sCgogIC8qKgogICAqIERyYXcgdGhlIGhvcml6b24gbGluZS4KICAgKi8KICBkcmF3OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHRoaXMuc291cmNlWFBvc1swXSwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9ucy5XSURUSCwgdGhpcy5zb3VyY2VEaW1lbnNpb25zLkhFSUdIVCwKICAgICAgICB0aGlzLnhQb3NbMF0sIHRoaXMueVBvcywKICAgICAgICB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsIHRoaXMuZGltZW5zaW9ucy5IRUlHSFQpOwoKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHRoaXMuc291cmNlWFBvc1sxXSwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9ucy5XSURUSCwgdGhpcy5zb3VyY2VEaW1lbnNpb25zLkhFSUdIVCwKICAgICAgICB0aGlzLnhQb3NbMV0sIHRoaXMueVBvcywKICAgICAgICB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsIHRoaXMuZGltZW5zaW9ucy5IRUlHSFQpOwogIH0sCgogIC8qKgogICAqIFVwZGF0ZSB0aGUgeCBwb3NpdGlvbiBvZiBhbiBpbmRpdmR1YWwgcGllY2Ugb2YgdGhlIGxpbmUuCiAgICogQHBhcmFtIHtudW1iZXJ9IHBvcyBMaW5lIHBvc2l0aW9uLgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbmNyZW1lbnQKICAgKi8KICB1cGRhdGVYUG9zOiBmdW5jdGlvbihwb3MsIGluY3JlbWVudCkgewogICAgdmFyIGxpbmUxID0gcG9zOwogICAgdmFyIGxpbmUyID0gcG9zID09IDAgPyAxIDogMDsKCiAgICB0aGlzLnhQb3NbbGluZTFdIC09IGluY3JlbWVudDsKICAgIHRoaXMueFBvc1tsaW5lMl0gPSB0aGlzLnhQb3NbbGluZTFdICsgdGhpcy5kaW1lbnNpb25zLldJRFRIOwoKICAgIGlmICh0aGlzLnhQb3NbbGluZTFdIDw9IC10aGlzLmRpbWVuc2lvbnMuV0lEVEgpIHsKICAgICAgdGhpcy54UG9zW2xpbmUxXSArPSB0aGlzLmRpbWVuc2lvbnMuV0lEVEggKiAyOwogICAgICB0aGlzLnhQb3NbbGluZTJdID0gdGhpcy54UG9zW2xpbmUxXSAtIHRoaXMuZGltZW5zaW9ucy5XSURUSDsKICAgICAgdGhpcy5zb3VyY2VYUG9zW2xpbmUxXSA9IHRoaXMuZ2V0UmFuZG9tVHlwZSgpICsgdGhpcy5zcHJpdGVQb3MueDsKICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGUgdGhlIGhvcml6b24gbGluZS4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbihkZWx0YVRpbWUsIHNwZWVkKSB7CiAgICB2YXIgaW5jcmVtZW50ID0gTWF0aC5mbG9vcihzcGVlZCAqIChGUFMgLyAxMDAwKSAqIGRlbHRhVGltZSk7CgogICAgaWYgKHRoaXMueFBvc1swXSA8PSAwKSB7CiAgICAgIHRoaXMudXBkYXRlWFBvcygwLCBpbmNyZW1lbnQpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy51cGRhdGVYUG9zKDEsIGluY3JlbWVudCk7CiAgICB9CiAgICB0aGlzLmRyYXcoKTsKICB9LAoKICAvKioKICAgKiBSZXNldCBob3Jpem9uIHRvIHRoZSBzdGFydGluZyBwb3NpdGlvbi4KICAgKi8KICByZXNldDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnhQb3NbMF0gPSAwOwogICAgdGhpcy54UG9zWzFdID0gSG9yaXpvbkxpbmUuZGltZW5zaW9ucy5XSURUSDsKICB9Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBIb3Jpem9uIGJhY2tncm91bmQgY2xhc3MuCiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcwogKiBAcGFyYW0ge09iamVjdH0gc3ByaXRlUG9zIFNwcml0ZSBwb3NpdGlvbmluZy4KICogQHBhcmFtIHtPYmplY3R9IGRpbWVuc2lvbnMgQ2FudmFzIGRpbWVuc2lvbnMuCiAqIEBwYXJhbSB7bnVtYmVyfSBnYXBDb2VmZmljaWVudAogKiBAY29uc3RydWN0b3IKICovCmZ1bmN0aW9uIEhvcml6b24oY2FudmFzLCBzcHJpdGVQb3MsIGRpbWVuc2lvbnMsIGdhcENvZWZmaWNpZW50KSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuY29uZmlnID0gSG9yaXpvbi5jb25maWc7CiAgdGhpcy5kaW1lbnNpb25zID0gZGltZW5zaW9uczsKICB0aGlzLmdhcENvZWZmaWNpZW50ID0gZ2FwQ29lZmZpY2llbnQ7CiAgdGhpcy5vYnN0YWNsZXMgPSBbXTsKICB0aGlzLm9ic3RhY2xlSGlzdG9yeSA9IFtdOwogIHRoaXMuaG9yaXpvbk9mZnNldHMgPSBbMCwgMF07CiAgdGhpcy5jbG91ZEZyZXF1ZW5jeSA9IHRoaXMuY29uZmlnLkNMT1VEX0ZSRVFVRU5DWTsKICB0aGlzLnNwcml0ZVBvcyA9IHNwcml0ZVBvczsKICB0aGlzLm5pZ2h0TW9kZSA9IG51bGw7CgogIC8vIENsb3VkCiAgdGhpcy5jbG91ZHMgPSBbXTsKICB0aGlzLmNsb3VkU3BlZWQgPSB0aGlzLmNvbmZpZy5CR19DTE9VRF9TUEVFRDsKCiAgLy8gSG9yaXpvbgogIHRoaXMuaG9yaXpvbkxpbmUgPSBudWxsOwogIHRoaXMuaW5pdCgpOwp9OwoKCi8qKgogKiBIb3Jpem9uIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkhvcml6b24uY29uZmlnID0gewogIEJHX0NMT1VEX1NQRUVEOiAwLjIsCiAgQlVNUFlfVEhSRVNIT0xEOiAuMywKICBDTE9VRF9GUkVRVUVOQ1k6IC41LAogIEhPUklaT05fSEVJR0hUOiAxNiwKICBNQVhfQ0xPVURTOiA2Cn07CgoKSG9yaXpvbi5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogSW5pdGlhbGlzZSB0aGUgaG9yaXpvbi4gSnVzdCBhZGQgdGhlIGxpbmUgYW5kIGEgY2xvdWQuIE5vIG9ic3RhY2xlcy4KICAgKi8KICBpbml0OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuYWRkQ2xvdWQoKTsKICAgIHRoaXMuaG9yaXpvbkxpbmUgPSBuZXcgSG9yaXpvbkxpbmUodGhpcy5jYW52YXMsIHRoaXMuc3ByaXRlUG9zLkhPUklaT04pOwogICAgdGhpcy5uaWdodE1vZGUgPSBuZXcgTmlnaHRNb2RlKHRoaXMuY2FudmFzLCB0aGlzLnNwcml0ZVBvcy5NT09OLAogICAgICAgIHRoaXMuZGltZW5zaW9ucy5XSURUSCk7CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVwZGF0ZU9ic3RhY2xlcyBVc2VkIGFzIGFuIG92ZXJyaWRlIHRvIHByZXZlbnQKICAgKiAgICAgdGhlIG9ic3RhY2xlcyBmcm9tIGJlaW5nIHVwZGF0ZWQgLyBhZGRlZC4gVGhpcyBoYXBwZW5zIGluIHRoZQogICAqICAgICBlYXNlIGluIHNlY3Rpb24uCiAgICogQHBhcmFtIHtib29sZWFufSBzaG93TmlnaHRNb2RlIE5pZ2h0IG1vZGUgYWN0aXZhdGVkLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24oZGVsdGFUaW1lLCBjdXJyZW50U3BlZWQsIHVwZGF0ZU9ic3RhY2xlcywgc2hvd05pZ2h0TW9kZSkgewogICAgdGhpcy5ydW5uaW5nVGltZSArPSBkZWx0YVRpbWU7CiAgICB0aGlzLmhvcml6b25MaW5lLnVwZGF0ZShkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CiAgICB0aGlzLm5pZ2h0TW9kZS51cGRhdGUoc2hvd05pZ2h0TW9kZSk7CiAgICB0aGlzLnVwZGF0ZUNsb3VkcyhkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CgogICAgaWYgKHVwZGF0ZU9ic3RhY2xlcykgewogICAgICB0aGlzLnVwZGF0ZU9ic3RhY2xlcyhkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjbG91ZCBwb3NpdGlvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKi8KICB1cGRhdGVDbG91ZHM6IGZ1bmN0aW9uKGRlbHRhVGltZSwgc3BlZWQpIHsKICAgIHZhciBjbG91ZFNwZWVkID0gdGhpcy5jbG91ZFNwZWVkIC8gMTAwMCAqIGRlbHRhVGltZSAqIHNwZWVkOwogICAgdmFyIG51bUNsb3VkcyA9IHRoaXMuY2xvdWRzLmxlbmd0aDsKCiAgICBpZiAobnVtQ2xvdWRzKSB7CiAgICAgIGZvciAodmFyIGkgPSBudW1DbG91ZHMgLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRoaXMuY2xvdWRzW2ldLnVwZGF0ZShjbG91ZFNwZWVkKTsKICAgICAgfQoKICAgICAgdmFyIGxhc3RDbG91ZCA9IHRoaXMuY2xvdWRzW251bUNsb3VkcyAtIDFdOwoKICAgICAgLy8gQ2hlY2sgZm9yIGFkZGluZyBhIG5ldyBjbG91ZC4KICAgICAgaWYgKG51bUNsb3VkcyA8IHRoaXMuY29uZmlnLk1BWF9DTE9VRFMgJiYKICAgICAgICAgICh0aGlzLmRpbWVuc2lvbnMuV0lEVEggLSBsYXN0Q2xvdWQueFBvcykgPiBsYXN0Q2xvdWQuY2xvdWRHYXAgJiYKICAgICAgICAgIHRoaXMuY2xvdWRGcmVxdWVuY3kgPiBNYXRoLnJhbmRvbSgpKSB7CiAgICAgICAgdGhpcy5hZGRDbG91ZCgpOwogICAgICB9CgogICAgICAvLyBSZW1vdmUgZXhwaXJlZCBjbG91ZHMuCiAgICAgIHRoaXMuY2xvdWRzID0gdGhpcy5jbG91ZHMuZmlsdGVyKGZ1bmN0aW9uKG9iaikgewogICAgICAgIHJldHVybiAhb2JqLnJlbW92ZTsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmFkZENsb3VkKCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBvYnN0YWNsZSBwb3NpdGlvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKi8KICB1cGRhdGVPYnN0YWNsZXM6IGZ1bmN0aW9uKGRlbHRhVGltZSwgY3VycmVudFNwZWVkKSB7CiAgICAvLyBPYnN0YWNsZXMsIG1vdmUgdG8gSG9yaXpvbiBsYXllci4KICAgIHZhciB1cGRhdGVkT2JzdGFjbGVzID0gdGhpcy5vYnN0YWNsZXMuc2xpY2UoMCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic3RhY2xlcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgb2JzdGFjbGUgPSB0aGlzLm9ic3RhY2xlc1tpXTsKICAgICAgb2JzdGFjbGUudXBkYXRlKGRlbHRhVGltZSwgY3VycmVudFNwZWVkKTsKCiAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIG9ic3RhY2xlcy4KICAgICAgaWYgKG9ic3RhY2xlLnJlbW92ZSkgewogICAgICAgIHVwZGF0ZWRPYnN0YWNsZXMuc2hpZnQoKTsKICAgICAgfQogICAgfQogICAgdGhpcy5vYnN0YWNsZXMgPSB1cGRhdGVkT2JzdGFjbGVzOwoKICAgIGlmICh0aGlzLm9ic3RhY2xlcy5sZW5ndGggPiAwKSB7CiAgICAgIHZhciBsYXN0T2JzdGFjbGUgPSB0aGlzLm9ic3RhY2xlc1t0aGlzLm9ic3RhY2xlcy5sZW5ndGggLSAxXTsKCiAgICAgIGlmIChsYXN0T2JzdGFjbGUgJiYgIWxhc3RPYnN0YWNsZS5mb2xsb3dpbmdPYnN0YWNsZUNyZWF0ZWQgJiYKICAgICAgICAgIGxhc3RPYnN0YWNsZS5pc1Zpc2libGUoKSAmJgogICAgICAgICAgKGxhc3RPYnN0YWNsZS54UG9zICsgbGFzdE9ic3RhY2xlLndpZHRoICsgbGFzdE9ic3RhY2xlLmdhcCkgPAogICAgICAgICAgdGhpcy5kaW1lbnNpb25zLldJRFRIKSB7CiAgICAgICAgdGhpcy5hZGROZXdPYnN0YWNsZShjdXJyZW50U3BlZWQpOwogICAgICAgIGxhc3RPYnN0YWNsZS5mb2xsb3dpbmdPYnN0YWNsZUNyZWF0ZWQgPSB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBDcmVhdGUgbmV3IG9ic3RhY2xlcy4KICAgICAgdGhpcy5hZGROZXdPYnN0YWNsZShjdXJyZW50U3BlZWQpOwogICAgfQogIH0sCgogIHJlbW92ZUZpcnN0T2JzdGFjbGU6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5vYnN0YWNsZXMuc2hpZnQoKTsKICB9LAoKICAvKioKICAgKiBBZGQgYSBuZXcgb2JzdGFjbGUuCiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRTcGVlZAogICAqLwogIGFkZE5ld09ic3RhY2xlOiBmdW5jdGlvbihjdXJyZW50U3BlZWQpIHsKICAgIHZhciBvYnN0YWNsZVR5cGVJbmRleCA9IGdldFJhbmRvbU51bSgwLCBPYnN0YWNsZS50eXBlcy5sZW5ndGggLSAxKTsKICAgIHZhciBvYnN0YWNsZVR5cGUgPSBPYnN0YWNsZS50eXBlc1tvYnN0YWNsZVR5cGVJbmRleF07CgogICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlcyBvZiB0aGUgc2FtZSB0eXBlIG9mIG9ic3RhY2xlLgogICAgLy8gQWxzbyBjaGVjayBvYnN0YWNsZSBpcyBhdmFpbGFibGUgYXQgY3VycmVudCBzcGVlZC4KICAgIGlmICh0aGlzLmR1cGxpY2F0ZU9ic3RhY2xlQ2hlY2sob2JzdGFjbGVUeXBlLnR5cGUpIHx8CiAgICAgICAgY3VycmVudFNwZWVkIDwgb2JzdGFjbGVUeXBlLm1pblNwZWVkKSB7CiAgICAgIHRoaXMuYWRkTmV3T2JzdGFjbGUoY3VycmVudFNwZWVkKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBvYnN0YWNsZVNwcml0ZVBvcyA9IHRoaXMuc3ByaXRlUG9zW29ic3RhY2xlVHlwZS50eXBlXTsKCiAgICAgIHRoaXMub2JzdGFjbGVzLnB1c2gobmV3IE9ic3RhY2xlKHRoaXMuY2FudmFzQ3R4LCBvYnN0YWNsZVR5cGUsCiAgICAgICAgICBvYnN0YWNsZVNwcml0ZVBvcywgdGhpcy5kaW1lbnNpb25zLAogICAgICAgICAgdGhpcy5nYXBDb2VmZmljaWVudCwgY3VycmVudFNwZWVkLCBvYnN0YWNsZVR5cGUud2lkdGgpKTsKCiAgICAgIHRoaXMub2JzdGFjbGVIaXN0b3J5LnVuc2hpZnQob2JzdGFjbGVUeXBlLnR5cGUpOwoKICAgICAgaWYgKHRoaXMub2JzdGFjbGVIaXN0b3J5Lmxlbmd0aCA+IDEpIHsKICAgICAgICB0aGlzLm9ic3RhY2xlSGlzdG9yeS5zcGxpY2UoUnVubmVyLmNvbmZpZy5NQVhfT0JTVEFDTEVfRFVQTElDQVRJT04pOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcmV2aW91cyB0d28gb2JzdGFjbGVzIGFyZSB0aGUgc2FtZSBhcyB0aGUgbmV4dCBvbmUuCiAgICogTWF4aW11bSBkdXBsaWNhdGlvbiBpcyBzZXQgaW4gY29uZmlnIHZhbHVlIE1BWF9PQlNUQUNMRV9EVVBMSUNBVElPTi4KICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGR1cGxpY2F0ZU9ic3RhY2xlQ2hlY2s6IGZ1bmN0aW9uKG5leHRPYnN0YWNsZVR5cGUpIHsKICAgIHZhciBkdXBsaWNhdGVDb3VudCA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic3RhY2xlSGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgICBkdXBsaWNhdGVDb3VudCA9IHRoaXMub2JzdGFjbGVIaXN0b3J5W2ldID09IG5leHRPYnN0YWNsZVR5cGUgPwogICAgICAgICAgZHVwbGljYXRlQ291bnQgKyAxIDogMDsKICAgIH0KICAgIHJldHVybiBkdXBsaWNhdGVDb3VudCA+PSBSdW5uZXIuY29uZmlnLk1BWF9PQlNUQUNMRV9EVVBMSUNBVElPTjsKICB9LAoKICAvKioKICAgKiBSZXNldCB0aGUgaG9yaXpvbiBsYXllci4KICAgKiBSZW1vdmUgZXhpc3Rpbmcgb2JzdGFjbGVzIGFuZCByZXBvc2l0aW9uIHRoZSBob3Jpem9uIGxpbmUuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5vYnN0YWNsZXMgPSBbXTsKICAgIHRoaXMuaG9yaXpvbkxpbmUucmVzZXQoKTsKICAgIHRoaXMubmlnaHRNb2RlLnJlc2V0KCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjYW52YXMgd2lkdGggYW5kIHNjYWxpbmcuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIENhbnZhcyB3aWR0aC4KICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IENhbnZhcyBoZWlnaHQuCiAgICovCiAgcmVzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0OwogIH0sCgogIC8qKgogICAqIEFkZCBhIG5ldyBjbG91ZCB0byB0aGUgaG9yaXpvbi4KICAgKi8KICBhZGRDbG91ZDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNsb3Vkcy5wdXNoKG5ldyBDbG91ZCh0aGlzLmNhbnZhcywgdGhpcy5zcHJpdGVQb3MuQ0xPVUQsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLldJRFRIKSk7CiAgfQp9Owp9KSgpOwoKCgogIAogICAgCiAgICAgIAogICAgICAKICAgICAgICBUaGlzIHNpdGUgY2Fu4oCZdCBiZSByZWFjaGVkCiAgICAgICAgbW9iaWxlLnR3aXR0ZXIuY29t4oCZcyBzZXJ2ZXIgRE5TIGFkZHJlc3MgY291bGQgbm90IGJlIGZvdW5kLgogICAgICAgIAogICAgICAgICAgVHJ5OgogICAgICAgICAgCiAgICAgICAgICAgIENoZWNraW5nIHRoZSBjb25uZWN0aW9uQ2hlY2tpbmcgdGhlIHByb3h5LCBmaXJld2FsbCwgYW5kIEROUyBjb25maWd1cmF0aW9uCiAgICAgICAgICAKICAgICAgICAKICAgICAgICBFUlJfTkFNRV9OT1RfUkVTT0xWRUQKICAgICAgICAKICAgICAgCiAgICAKICAgIAogICAgICAKICAgICAgICAKICAgICAgICBSZWxvYWQKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgCiAgICAgIERldGFpbHMKICAgIAogICAgCiAgICAgIAogICAgICAgIENoZWNrIHlvdXIgSW50ZXJuZXQgY29ubmVjdGlvbgogICAgICAgIENoZWNrIGFueSBjYWJsZXMgYW5kIHJlYm9vdCBhbnkgcm91dGVycywgbW9kZW1zLCBvciBvdGhlciBuZXR3b3JrCiAgICBkZXZpY2VzIHlvdSBtYXkgYmUgdXNpbmcuCiAgICAgIAogICAgICAgIENoZWNrIHlvdXIgRE5TIHNldHRpbmdzCiAgICAgICAgQ29udGFjdCB5b3VyIG5ldHdvcmsgYWRtaW5pc3RyYXRvciBpZiB5b3UncmUgbm90IHN1cmUgd2hhdCB0aGlzIG1lYW5zLgogICAgICAKICAgICAgICBUcnkgZGlzYWJsaW5nIG5ldHdvcmsgcHJlZGljdGlvbgogICAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAgU2V0dGluZ3MKICAgICAgICAgID4KICAgICAgICAgIFNob3cgYWR2YW5jZWQgc2V0dGluZ3PigKYKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJlZGljdGlvbiBzZXJ2aWNlIHRvIGxvYWQgcGFnZXMgbW9yZSBxdWlja2x5LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4KICAgICAgCiAgICAgICAgQWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3MuCiAgICAgICAgSWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLgogICAgICAKICAgICAgICBJZiB5b3UgdXNlIGEgcHJveHkgc2VydmVy4oCmCiAgICAgICAgQ2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAgU2V0dGluZ3MKICAgICAgICAgID4KICAgICAgICAgIFNob3cgYWR2YW5jZWQgc2V0dGluZ3PigKYKICAgICAgICAgID4KICAgICAgICAgIENoYW5nZSBwcm94eSBzZXR0aW5nc+KApgogICAgICAgICAgPgogICAgICAgICAgTEFOIFNldHRpbmdzCiAgICAgICAgICBhbmQgZGVzZWxlY3QgIlVzZSBhIHByb3h5IHNlcnZlciBmb3IgeW91ciBMQU4iLgogICAgICAKICAgIAogIAogIAogICAgCiAgICAKICAgIG1vYmlsZS50d2l0dGVyLmNvbeKAmXMgc2VydmVyIEROUyBhZGRyZXNzIGNvdWxkIG5vdCBiZSBmb3VuZC4KICAKCiAgCiAgICAKICAgIAogICAgCiAgCgoKLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwpsb2FkVGltZURhdGEuZGF0YSA9IHsiZGV0YWlscyI6IkRldGFpbHMiLCJlcnJvckNvZGUiOiJETlNfUFJPQkVfUE9TU0lCTEUiLCJmb250ZmFtaWx5IjoiJ1NlZ29lIFVJJywgVGFob21hLCBzYW5zLXNlcmlmIiwiZm9udHNpemUiOiI3NSUiLCJoZWFkaW5nIjp7Imhvc3ROYW1lIjoibW9iaWxlLnR3aXR0ZXIuY29tIiwibXNnIjoiVGhpcyBzaXRlIGNhbuKAmXQgYmUgcmVhY2hlZCJ9LCJoaWRlRGV0YWlscyI6IkhpZGUgZGV0YWlscyIsImljb25DbGFzcyI6Imljb24tZ2VuZXJpYyIsImxhbmd1YWdlIjoiZW4iLCJyZWxvYWRCdXR0b24iOnsibXNnIjoiUmVsb2FkIiwicmVsb2FkVHJhY2tpbmdJZCI6LTEsInJlbG9hZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24ifSwic3VnZ2VzdGlvbnNEZXRhaWxzIjpbXSwic3VnZ2VzdGlvbnNTdW1tYXJ5TGlzdCI6W10sInN1bW1hcnkiOnsiZG5zRGVmaW5pdGlvbiI6IkROUyBpcyB0aGUgbmV0d29yayBzZXJ2aWNlIHRoYXQgdHJhbnNsYXRlcyBhIHdlYnNpdGXigJlzIG5hbWUgdG8gaXRzIEludGVybmV0IGFkZHJlc3MuIiwiZmFpbGVkVXJsIjoiaHR0cHM6Ly9tb2JpbGUudHdpdHRlci5jb20vaS9ub2pzX3JvdXRlcj9wYXRoPSUyRmFtYXpvbiIsImhvc3ROYW1lIjoibW9iaWxlLnR3aXR0ZXIuY29tIiwibXNnIjoiXHUwMDNDc3Ryb25nIGpzY29udGVudD1cImhvc3ROYW1lXCI+XHUwMDNDL3N0cm9uZz7igJlzIFx1MDAzQ2FiYnIgaWQ9XCJkbnNEZWZpbml0aW9uXCI+RE5TIGFkZHJlc3NcdTAwM0MvYWJicj4gY291bGQgbm90IGJlIGZvdW5kLiBEaWFnbm9zaW5nIHRoZSBwcm9ibGVtLiJ9LCJ0ZXh0ZGlyZWN0aW9uIjoibHRyIiwidGl0bGUiOiJtb2JpbGUudHdpdHRlci5jb20ifTsvLyBDb3B5cmlnaHQgKGMpIDIwMTIgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCi8vIE5vdGU6IHZ1bGNhbml6ZSBzb21ldGltZXMgZGlzYWJsZXMgR1JJVCBwcm9jZXNzaW5nLiBJZiB5b3UncmUgaW1wb3J0aW5nIGkxOG4KLy8gc3R1ZmYgd2l0aCA8bGluayByZWw9ImltcG9ydCI+LCB5b3Ugc2hvdWxkIHByb2JhYmx5IGJlIHVzaW5nCi8vIGh0bWwvaTE4bl90ZW1wbGF0ZS5odG1sIGluc3RlYWQgb2YgdGhpcyBmaWxlLgoKLy8gLy8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKiogQHR5cGVkZWYge0RvY3VtZW50fERvY3VtZW50RnJhZ21lbnR8RWxlbWVudH0gKi8KdmFyIFByb2Nlc3NpbmdSb290OwoKLyoqCiAqIEBmaWxlb3ZlcnZpZXcgVGhpcyBpcyBhIHNpbXBsZSB0ZW1wbGF0ZSBlbmdpbmUgaW5zcGlyZWQgYnkgSnNUZW1wbGF0ZXMKICogb3B0aW1pemVkIGZvciBpMThuLgogKgogKiBJdCBjdXJyZW50bHkgc3VwcG9ydHMgdGhyZWUgaGFuZGxlcnM6CiAqCiAqICAgKiBpMThuLWNvbnRlbnQgd2hpY2ggc2V0cyB0aGUgdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQuCiAqCiAqICAgICA8c3BhbiBpMThuLWNvbnRlbnQ9Im15Q29udGVudCI+PC9zcGFuPgogKgogKiAgICogaTE4bi1vcHRpb25zIHdoaWNoIGdlbmVyYXRlcyA8b3B0aW9uPiBlbGVtZW50cyBmb3IgYSA8c2VsZWN0Pi4KICoKICogICAgIDxzZWxlY3QgaTE4bi1vcHRpb25zPSJteU9wdGlvbkxpc3QiPjwvc2VsZWN0PgogKgogKiAgICogaTE4bi12YWx1ZXMgaXMgYSBsaXN0IG9mIGF0dHJpYnV0ZS12YWx1ZSBvciBwcm9wZXJ0eS12YWx1ZSBwYWlycy4KICogICAgIFByb3BlcnRpZXMgYXJlIHByZWZpeGVkIHdpdGggYSAnLicgYW5kIGNhbiBjb250YWluIG5lc3RlZCBwcm9wZXJ0aWVzLgogKgogKiAgICAgPHNwYW4gaTE4bi12YWx1ZXM9InRpdGxlOm15VGl0bGU7LnN0eWxlLmZvbnRTaXplOmZvbnRTaXplIj48L3NwYW4+CiAqCiAqIFRoaXMgZmlsZSBpcyBhIGNvcHkgb2YgaTE4bl90ZW1wbGF0ZS5qcywgd2l0aCBtaW5vciB0d2Vha3MgdG8gc3VwcG9ydCB1c2luZwogKiBsb2FkX3RpbWVfZGF0YS5qcy4gSXQgc2hvdWxkIHJlcGxhY2UgaTE4bl90ZW1wbGF0ZS5qcyBldmVudHVhbGx5LgogKi8KCnZhciBpMThuVGVtcGxhdGUgPSAoZnVuY3Rpb24oKSB7CiAgLyoqCiAgICogVGhpcyBwcm92aWRlcyB0aGUgaGFuZGxlcnMgZm9yIHRoZSB0ZW1wbGF0aW5nIGVuZ2luZS4gVGhlIGtleSBpcyB1c2VkIGFzCiAgICogdGhlIGF0dHJpYnV0ZSBuYW1lIGFuZCB0aGUgdmFsdWUgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5CiAgICogc2luZ2xlIG5vZGUgdGhhdCBoYXMgdGhpcyBhdHRyaWJ1dGUuCiAgICogQHR5cGUgeyFPYmplY3R9CiAgICovCiAgdmFyIGhhbmRsZXJzID0gewogICAgLyoqCiAgICAgKiBUaGlzIGhhbmRsZXIgc2V0cyB0aGUgdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQuCiAgICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudCBUaGUgbm9kZSB0byBtb2RpZnkuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBuYW1lIG9mIHRoZSB2YWx1ZSBpbiB8ZGF0YXwuCiAgICAgKiBAcGFyYW0geyFMb2FkVGltZURhdGF9IGRhdGEgVGhlIGRhdGEgc291cmNlIHRvIGRyYXcgZnJvbS4KICAgICAqIEBwYXJhbSB7IVNldDxQcm9jZXNzaW5nUm9vdD59IHZpc2l0ZWQKICAgICAqLwogICAgJ2kxOG4tY29udGVudCc6IGZ1bmN0aW9uKGVsZW1lbnQsIGtleSwgZGF0YSwgdmlzaXRlZCkgewogICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gZGF0YS5nZXRTdHJpbmcoa2V5KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBUaGlzIGhhbmRsZXIgYWRkcyBvcHRpb25zIHRvIGEgPHNlbGVjdD4gZWxlbWVudC4KICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBzZWxlY3QgVGhlIG5vZGUgdG8gbW9kaWZ5LgogICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgbmFtZSBvZiB0aGUgdmFsdWUgaW4gfGRhdGF8LiBJdCBzaG91bGQKICAgICAqICAgICBpZGVudGlmeSBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gaW5pdGlhbGl6ZSBhbiA8b3B0aW9uPi4gRWFjaCB2YWx1ZSwKICAgICAqICAgICBpZiBhIHBhaXIsIHJlcHJlc2VudHMgW2NvbnRlbnQsIHZhbHVlXS4gT3RoZXJ3aXNlLCBpdCBzaG91bGQgYmUgYQogICAgICogICAgIGNvbnRlbnQgc3RyaW5nIHdpdGggbm8gdmFsdWUuCiAgICAgKiBAcGFyYW0geyFMb2FkVGltZURhdGF9IGRhdGEgVGhlIGRhdGEgc291cmNlIHRvIGRyYXcgZnJvbS4KICAgICAqIEBwYXJhbSB7IVNldDxQcm9jZXNzaW5nUm9vdD59IHZpc2l0ZWQKICAgICAqLwogICAgJ2kxOG4tb3B0aW9ucyc6IGZ1bmN0aW9uKHNlbGVjdCwga2V5LCBkYXRhLCB2aXNpdGVkKSB7CiAgICAgIHZhciBvcHRpb25zID0gZGF0YS5nZXRWYWx1ZShrZXkpOwogICAgICBvcHRpb25zLmZvckVhY2goZnVuY3Rpb24ob3B0aW9uRGF0YSkgewogICAgICAgIHZhciBvcHRpb24gPSB0eXBlb2Ygb3B0aW9uRGF0YSA9PSAnc3RyaW5nJyA/CiAgICAgICAgICAgIG5ldyBPcHRpb24ob3B0aW9uRGF0YSkgOgogICAgICAgICAgICBuZXcgT3B0aW9uKG9wdGlvbkRhdGFbMV0sIG9wdGlvbkRhdGFbMF0pOwogICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBUaGlzIGlzIHVzZWQgdG8gc2V0IEhUTUwgYXR0cmlidXRlcyBhbmQgRE9NIHByb3BlcnRpZXMuIFRoZSBzeW50YXggaXM6CiAgICAgKiAgIGF0dHJpYnV0ZW5hbWU6a2V5OwogICAgICogICAuZG9tUHJvcGVydHk6a2V5OwogICAgICogICAubmVzdGVkLmRvbS5wcm9wZXJ0eTprZXkKICAgICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBub2RlIHRvIG1vZGlmeS4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVBbmRLZXlzIFRoZSBwYXRoIG9mIHRoZSBhdHRyaWJ1dGUgdG8gbW9kaWZ5CiAgICAgKiAgICAgZm9sbG93ZWQgYnkgYSBjb2xvbiwgYW5kIHRoZSBuYW1lIG9mIHRoZSB2YWx1ZSBpbiB8ZGF0YXwuCiAgICAgKiAgICAgTXVsdGlwbGUgYXR0cmlidXRlL2tleSBwYWlycyBtYXkgYmUgc2VwYXJhdGVkIGJ5IHNlbWljb2xvbnMuCiAgICAgKiBAcGFyYW0geyFMb2FkVGltZURhdGF9IGRhdGEgVGhlIGRhdGEgc291cmNlIHRvIGRyYXcgZnJvbS4KICAgICAqIEBwYXJhbSB7IVNldDxQcm9jZXNzaW5nUm9vdD59IHZpc2l0ZWQKICAgICAqLwogICAgJ2kxOG4tdmFsdWVzJzogZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlQW5kS2V5cywgZGF0YSwgdmlzaXRlZCkgewogICAgICB2YXIgcGFydHMgPSBhdHRyaWJ1dGVBbmRLZXlzLnJlcGxhY2UoL1xzL2csICcnKS5zcGxpdCgvOy8pOwogICAgICBwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHsKICAgICAgICBpZiAoIXBhcnQpCiAgICAgICAgICByZXR1cm47CgogICAgICAgIHZhciBhdHRyaWJ1dGVBbmRLZXlQYWlyID0gcGFydC5tYXRjaCgvXihbXjpdKyk6KC4rKSQvKTsKICAgICAgICBpZiAoIWF0dHJpYnV0ZUFuZEtleVBhaXIpCiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hbGZvcm1lZCBpMThuLXZhbHVlczogJyArIGF0dHJpYnV0ZUFuZEtleXMpOwoKICAgICAgICB2YXIgcHJvcE5hbWUgPSBhdHRyaWJ1dGVBbmRLZXlQYWlyWzFdOwogICAgICAgIHZhciBwcm9wRXhwciA9IGF0dHJpYnV0ZUFuZEtleVBhaXJbMl07CgogICAgICAgIHZhciB2YWx1ZSA9IGRhdGEuZ2V0VmFsdWUocHJvcEV4cHIpOwoKICAgICAgICAvLyBBbGxvdyBhIHByb3BlcnR5IG9mIHRoZSBmb3JtICcuZm9vLmJhcicgdG8gYXNzaWduIGEgdmFsdWUgaW50bwogICAgICAgIC8vIGVsZW1lbnQuZm9vLmJhci4KICAgICAgICBpZiAocHJvcE5hbWVbMF0gPT0gJy4nKSB7CiAgICAgICAgICB2YXIgcGF0aCA9IHByb3BOYW1lLnNsaWNlKDEpLnNwbGl0KCcuJyk7CiAgICAgICAgICB2YXIgdGFyZ2V0T2JqZWN0ID0gZWxlbWVudDsKICAgICAgICAgIHdoaWxlICh0YXJnZXRPYmplY3QgJiYgcGF0aC5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgIHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFtwYXRoLnNoaWZ0KCldOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHRhcmdldE9iamVjdCkgewogICAgICAgICAgICB0YXJnZXRPYmplY3RbcGF0aF0gPSB2YWx1ZTsKICAgICAgICAgICAgLy8gSW4gY2FzZSB3ZSBzZXQgaW5uZXJIVE1MIChpZ25vcmluZyBvdGhlcnMpIHdlIG5lZWQgdG8gcmVjdXJzaXZlbHkKICAgICAgICAgICAgLy8gY2hlY2sgdGhlIGNvbnRlbnQuCiAgICAgICAgICAgIGlmIChwYXRoID09ICdpbm5lckhUTUwnKSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBwcm9jZXNzV2l0aG91dEN5Y2xlcyhlbGVtZW50LmNoaWxkcmVuW2ldLCBkYXRhLCB2aXNpdGVkLCBmYWxzZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3BOYW1lLCAvKiogQHR5cGUge3N0cmluZ30gKi8gKHZhbHVlKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9OwoKICB2YXIgcHJlZml4ZXMgPSBbJyddOwoKICAvLyBPbmx5IGxvb2sgdGhyb3VnaCBzaGFkb3cgRE9NIHdoZW4gaXQncyBzdXBwb3J0ZWQuIEFzIG9mIEFwcmlsIDIwMTUsIGlPUwogIC8vIENocm9tZSBkb2Vzbid0IHN1cHBvcnQgc2hhZG93IERPTS4KICBpZiAoRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU2hhZG93Um9vdCkKICAgIHByZWZpeGVzLnB1c2goJyogL2RlZXAvICcpOwoKICB2YXIgYXR0cmlidXRlTmFtZXMgPSBPYmplY3Qua2V5cyhoYW5kbGVycyk7CiAgdmFyIHNlbGVjdG9yID0gcHJlZml4ZXMKICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihwcmVmaXgpIHsKICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmFtZXMuam9pbignXSwgJyArIHByZWZpeCArICdbJykgKyAnXSc7CiAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpOwoKICAvKioKICAgKiBQcm9jZXNzZXMgYSBET00gdHJlZSB1c2luZyBhIHxkYXRhfCBzb3VyY2UgdG8gcG9wdWxhdGUgdGVtcGxhdGUgdmFsdWVzLgogICAqIEBwYXJhbSB7IVByb2Nlc3NpbmdSb290fSByb290IFRoZSByb290IG9mIHRoZSBET00gdHJlZSB0byBwcm9jZXNzLgogICAqIEBwYXJhbSB7IUxvYWRUaW1lRGF0YX0gZGF0YSBUaGUgZGF0YSB0byBkcmF3IGZyb20uCiAgICovCiAgZnVuY3Rpb24gcHJvY2Vzcyhyb290LCBkYXRhKSB7CiAgICBwcm9jZXNzV2l0aG91dEN5Y2xlcyhyb290LCBkYXRhLCBuZXcgU2V0KCksIHRydWUpOwogIH0KCiAgLyoqCiAgICogSW50ZXJuYWwgcHJvY2VzcygpIG1ldGhvZCB0aGF0IHN0b3BzIGN5Y2xlcyB3aGlsZSBwcm9jZXNzaW5nLgogICAqIEBwYXJhbSB7IVByb2Nlc3NpbmdSb290fSByb290CiAgICogQHBhcmFtIHshTG9hZFRpbWVEYXRhfSBkYXRhCiAgICogQHBhcmFtIHshU2V0PFByb2Nlc3NpbmdSb290Pn0gdmlzaXRlZCBBbHJlYWR5IHZpc2l0ZWQgcm9vdHMuCiAgICogQHBhcmFtIHtib29sZWFufSBtYXJrIFdoZXRoZXIgbm9kZXMgc2hvdWxkIGJlIG1hcmtlZCBwcm9jZXNzZWQuCiAgICovCiAgZnVuY3Rpb24gcHJvY2Vzc1dpdGhvdXRDeWNsZXMocm9vdCwgZGF0YSwgdmlzaXRlZCwgbWFyaykgewogICAgaWYgKHZpc2l0ZWQuaGFzKHJvb3QpKSB7CiAgICAgIC8vIEZvdW5kIGEgY3ljbGUuIFN0b3AgaXQuCiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBNYXJrIHRoZSBub2RlIGFzIHZpc2l0ZWQgYmVmb3JlIHJlY3Vyc2luZy4KICAgIHZpc2l0ZWQuYWRkKHJvb3QpOwoKICAgIHZhciBpbXBvcnRMaW5rcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbCgnbGlua1tyZWw9aW1wb3J0XScpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbXBvcnRMaW5rcy5sZW5ndGg7ICsraSkgewogICAgICB2YXIgaW1wb3J0TGluayA9IC8qKiBAdHlwZSB7IUhUTUxMaW5rRWxlbWVudH0gKi8gKGltcG9ydExpbmtzW2ldKTsKICAgICAgaWYgKCFpbXBvcnRMaW5rLmltcG9ydCkgewogICAgICAgIC8vIEhhcHBlbnMgd2hlbiBhIDxsaW5rIHJlbD1pbXBvcnQ+IGlzIGluc2lkZSBhIDx0ZW1wbGF0ZT4uCiAgICAgICAgLy8gVE9ETyhkYmVhbSk6IHNob3VsZCB3ZSBsb2cgYW4gZXJyb3IgaWYgd2UgZGV0ZWN0IHRoYXQgaGVyZT8KICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBwcm9jZXNzV2l0aG91dEN5Y2xlcyhpbXBvcnRMaW5rLmltcG9ydCwgZGF0YSwgdmlzaXRlZCwgbWFyayk7CiAgICB9CgogICAgdmFyIHRlbXBsYXRlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbCgndGVtcGxhdGUnKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcGxhdGVzLmxlbmd0aDsgKytpKSB7CiAgICAgIHZhciB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKHRlbXBsYXRlc1tpXSk7CiAgICAgIGlmICghdGVtcGxhdGUuY29udGVudCkKICAgICAgICBjb250aW51ZTsKICAgICAgcHJvY2Vzc1dpdGhvdXRDeWNsZXModGVtcGxhdGUuY29udGVudCwgZGF0YSwgdmlzaXRlZCwgbWFyayk7CiAgICB9CgogICAgdmFyIGlzRWxlbWVudCA9IHJvb3QgaW5zdGFuY2VvZiBFbGVtZW50OwogICAgaWYgKGlzRWxlbWVudCAmJiByb290LndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3RvcikpCiAgICAgIHByb2Nlc3NFbGVtZW50KC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovIChyb290KSwgZGF0YSwgdmlzaXRlZCk7CgogICAgdmFyIGVsZW1lbnRzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyArK2kpIHsKICAgICAgcHJvY2Vzc0VsZW1lbnQoZWxlbWVudHNbaV0sIGRhdGEsIHZpc2l0ZWQpOwogICAgfQoKICAgIGlmIChtYXJrKSB7CiAgICAgIHZhciBwcm9jZXNzZWQgPSBpc0VsZW1lbnQgPyBbcm9vdF0gOiByb290LmNoaWxkcmVuOwogICAgICBpZiAocHJvY2Vzc2VkKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9jZXNzZWQubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHByb2Nlc3NlZFtpXS5zZXRBdHRyaWJ1dGUoJ2kxOG4tcHJvY2Vzc2VkJywgJycpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgLyoqCiAgICogUnVuIHRocm91Z2ggdmFyaW91cyBbaTE4bi0qXSBhdHRyaWJ1dGVzIGFuZCBwb3B1bGF0ZS4KICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50CiAgICogQHBhcmFtIHshTG9hZFRpbWVEYXRhfSBkYXRhCiAgICogQHBhcmFtIHshU2V0PFByb2Nlc3NpbmdSb290Pn0gdmlzaXRlZAogICAqLwogIGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIGRhdGEsIHZpc2l0ZWQpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVOYW1lc1tpXTsKICAgICAgdmFyIGF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpOwogICAgICBpZiAoYXR0cmlidXRlICE9IG51bGwpCiAgICAgICAgaGFuZGxlcnNbbmFtZV0oZWxlbWVudCwgYXR0cmlidXRlLCBkYXRhLCB2aXNpdGVkKTsKICAgIH0KICB9CgogIHJldHVybiB7cHJvY2VzczogcHJvY2Vzc307Cn0oKSk7CgovLyAvLyBDb3B5cmlnaHQgMjAxNyBUaGUgQ2hyb21pdW0gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZQovLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLgoKaTE4blRlbXBsYXRlLnByb2Nlc3MoZG9jdW1lbnQsIGxvYWRUaW1lRGF0YSk7CgovLyBDb3B5cmlnaHQgKGMpIDIwMTIgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCi8vIFRoaXMgZmlsZSBzZXJ2ZXMgYXMgYSBwcm94eSB0byBicmluZyB0aGUgaW5jbHVkZWQganMgZmlsZSBmcm9tIC90aGlyZF9wYXJ0eQovLyBpbnRvIGl0cyBjb3JyZWN0IGxvY2F0aW9uIHVuZGVyIHRoZSByZXNvdXJjZXMgZGlyZWN0b3J5IHRyZWUsIHdoZW5jZSBpdCBpcwovLyBkZWxpdmVyZWQgdmlhIGEgY2hyb21lOi8vcmVzb3VyY2VzIFVSTC4gIFNlZSAuLi93ZWJ1aV9yZXNvdXJjZXMuZ3JkLgoKLy8gTm90ZTogdGhpcyA8aW5jbHVkZT4gaXMgbm90IGJlaGluZCBhIHNpbmdsZS1saW5lIGNvbW1lbnQgYmVjYXVzZSB0aGUgZmlyc3QKLy8gbGluZSBvZiB0aGUgZmlsZSBpcyBzb3VyY2UgY29kZSAoc28gdGhlIGZpcnN0IGxpbmUgd291bGQgYmUgc2tpcHBlZCkgaW5zdGVhZAovLyBvZiBhIGxpY2VuY2UgaGVhZGVyLgovLyBjbGFuZy1mb3JtYXQgb2ZmCihmdW5jdGlvbigpe3ZhciBpPW51bGw7ZnVuY3Rpb24gaygpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbC5hcHBseShBcnJheS5wcm90b3R5cGUuc2xpY2UsYXJndW1lbnRzKX1mdW5jdGlvbiBsKGEsYil7dmFyIGM9ayhhcmd1bWVudHMsMik7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGIuYXBwbHkoYSxjKX19ZnVuY3Rpb24gbShhLGIpe3ZhciBjPW5ldyBuKGIpO2ZvcihjLmY9W2FdO2MuZi5sZW5ndGg7KXt2YXIgZT1jLGQ9Yy5mLnNoaWZ0KCk7ZS5nKGQpO2ZvcihkPWQuZmlyc3RDaGlsZDtkO2Q9ZC5uZXh0U2libGluZylkLm5vZGVUeXBlPT0xJiZlLmYucHVzaChkKX19ZnVuY3Rpb24gbihhKXt0aGlzLmc9YX1mdW5jdGlvbiBvKGEpe2Euc3R5bGUuZGlzcGxheT0iIn1mdW5jdGlvbiBwKGEpe2Euc3R5bGUuZGlzcGxheT0ibm9uZSJ9O3ZhciBxPSI6IixyPS9ccyo7XHMqLztmdW5jdGlvbiBzKCl7dGhpcy5pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1zLnByb3RvdHlwZS5pPWZ1bmN0aW9uKGEsYil7aWYoIXRoaXMuYSl0aGlzLmE9e307aWYoYil7dmFyIGM9dGhpcy5hLGU9Yi5hLGQ7Zm9yKGQgaW4gZSljW2RdPWVbZF19ZWxzZSBmb3IoYyBpbiBkPXRoaXMuYSxlPXQsZSlkW2NdPWVbY107dGhpcy5hLiR0aGlzPWE7dGhpcy5hLiRjb250ZXh0PXRoaXM7dGhpcy5kPXR5cGVvZiBhIT0idW5kZWZpbmVkIiYmYSE9aT9hOiIiO2lmKCFiKXRoaXMuYS4kdG9wPXRoaXMuZH07dmFyIHQ9eyRkZWZhdWx0Oml9LHU9W107ZnVuY3Rpb24gdihhKXtmb3IodmFyIGIgaW4gYS5hKWRlbGV0ZSBhLmFbYl07YS5kPWk7dS5wdXNoKGEpfWZ1bmN0aW9uIHcoYSxiLGMpe3RyeXtyZXR1cm4gYi5jYWxsKGMsYS5hLGEuZCl9Y2F0Y2goZSl7cmV0dXJuIHQuJGRlZmF1bHR9fQpmdW5jdGlvbiB4KGEsYixjLGUpe2lmKHUubGVuZ3RoPjApe3ZhciBkPXUucG9wKCk7cy5jYWxsKGQsYixhKTthPWR9ZWxzZSBhPW5ldyBzKGIsYSk7YS5hLiRpbmRleD1jO2EuYS4kY291bnQ9ZTtyZXR1cm4gYX12YXIgeT0iYV8iLHo9ImJfIixBPSJ3aXRoIChhXykgd2l0aCAoYl8pIHJldHVybiAiLEQ9e307ZnVuY3Rpb24gRShhKXtpZighRFthXSl0cnl7RFthXT1uZXcgRnVuY3Rpb24oeSx6LEErYSl9Y2F0Y2goYil7fXJldHVybiBEW2FdfWZ1bmN0aW9uIEYoYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKXt2YXIgZD1hW2NdLmluZGV4T2YocSk7aWYoIShkPDApKXt2YXIgZjtmPWFbY10uc3Vic3RyKDAsZCkucmVwbGFjZSgvXlxzKy8sIiIpLnJlcGxhY2UoL1xzKyQvLCIiKTtkPUUoYVtjXS5zdWJzdHIoZCsxKSk7Yi5wdXNoKGYsZCl9fXJldHVybiBifTt2YXIgRz0ianNpbnN0YW5jZSIsSD0ianN0cyIsST0iKiIsSj0iZGl2IixLPSJpZCI7ZnVuY3Rpb24gTCgpe312YXIgTT0wLE49ezA6e319LFA9e30sUT17fSxSPVtdO2Z1bmN0aW9uIFMoYSl7YS5fX2pzdGNhY2hlfHxtKGEsZnVuY3Rpb24oYSl7VChhKX0pfXZhciBVPVtbImpzc2VsZWN0IixFXSxbImpzZGlzcGxheSIsRV0sWyJqc3ZhbHVlcyIsRl0sWyJqc3ZhcnMiLEZdLFsianNldmFsIixmdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYT1hLnNwbGl0KHIpLGM9MCxlPWEubGVuZ3RoO2M8ZTsrK2MpaWYoYVtjXSl7dmFyIGQ9RShhW2NdKTtiLnB1c2goZCl9cmV0dXJuIGJ9XSxbInRyYW5zY2x1ZGUiLGZ1bmN0aW9uKGEpe3JldHVybiBhfV0sWyJqc2NvbnRlbnQiLEVdLFsianNza2lwIixFXV07CmZ1bmN0aW9uIFQoYSl7aWYoYS5fX2pzdGNhY2hlKXJldHVybiBhLl9fanN0Y2FjaGU7dmFyIGI9YS5nZXRBdHRyaWJ1dGUoImpzdGNhY2hlIik7aWYoYiE9aSlyZXR1cm4gYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBiPVIubGVuZ3RoPTAsYz1VLmxlbmd0aDtiPGM7KytiKXt2YXIgZT1VW2JdWzBdLGQ9YS5nZXRBdHRyaWJ1dGUoZSk7UVtlXT1kO2QhPWkmJlIucHVzaChlKyI9IitkKX1pZihSLmxlbmd0aD09MClyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoImpzdGNhY2hlIiwiMCIpLGEuX19qc3RjYWNoZT1OWzBdO3ZhciBmPVIuam9pbigiJiIpO2lmKGI9UFtmXSlyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoImpzdGNhY2hlIixiKSxhLl9fanN0Y2FjaGU9TltiXTtmb3IodmFyIGg9e30sYj0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGQ9VVtiXSxlPWRbMF0sZz1kWzFdLGQ9UVtlXTtkIT1pJiYoaFtlXT1nKGQpKX1iPSIiKyArK007YS5zZXRBdHRyaWJ1dGUoImpzdGNhY2hlIixiKTtOW2JdPQpoO1BbZl09YjtyZXR1cm4gYS5fX2pzdGNhY2hlPWh9ZnVuY3Rpb24gVihhLGIpe2EuaC5wdXNoKGIpO2Euay5wdXNoKDApfWZ1bmN0aW9uIFcoYSl7cmV0dXJuIGEuYy5sZW5ndGg/YS5jLnBvcCgpOltdfQpMLnByb3RvdHlwZS5lPWZ1bmN0aW9uKGEsYil7dmFyIGM9WChiKSxlPWMudHJhbnNjbHVkZTtpZihlKShjPVkoZSkpPyhiLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGMsYiksZT1XKHRoaXMpLGUucHVzaCh0aGlzLmUsYSxjKSxWKHRoaXMsZSkpOmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTtlbHNlIGlmKGM9Yy5qc3NlbGVjdCl7dmFyIGM9dyhhLGMsYiksZD1iLmdldEF0dHJpYnV0ZShHKSxmPSExO2QmJihkLmNoYXJBdCgwKT09ST8oZD1wYXJzZUludChkLnN1YnN0cigxKSwxMCksZj0hMCk6ZD1wYXJzZUludChkLDEwKSk7dmFyIGg9YyE9aSYmdHlwZW9mIGM9PSJvYmplY3QiJiZ0eXBlb2YgYy5sZW5ndGg9PSJudW1iZXIiLGU9aD9jLmxlbmd0aDoxLGc9aCYmZT09MDtpZihoKWlmKGcpZD9iLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6KGIuc2V0QXR0cmlidXRlKEcsIiowIikscChiKSk7ZWxzZSBpZihvKGIpLGQ9PT1pfHxkPT09IiJ8fGYmJmQ8ZS0xKXtmPVcodGhpcyk7CmQ9ZHx8MDtmb3IoaD1lLTE7ZDxoOysrZCl7dmFyIGo9Yi5jbG9uZU5vZGUoITApO2IucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaixiKTtaKGosYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGosdixnLGkpfVooYixjLGQpO2c9eChhLGNbZF0sZCxlKTtmLnB1c2godGhpcy5iLGcsYix2LGcsaSk7Vih0aGlzLGYpfWVsc2UgZDxlPyhmPWNbZF0sWihiLGMsZCksZz14KGEsZixkLGUpLGY9Vyh0aGlzKSxmLnB1c2godGhpcy5iLGcsYix2LGcsaSksVih0aGlzLGYpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBjPT1pP3AoYik6KG8oYiksZz14KGEsYywwLDEpLGY9Vyh0aGlzKSxmLnB1c2godGhpcy5iLGcsYix2LGcsaSksVih0aGlzLGYpKX1lbHNlIHRoaXMuYihhLGIpfTsKTC5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLmpzZGlzcGxheTtpZihlKXtpZighdyhhLGUsYikpe3AoYik7cmV0dXJufW8oYil9aWYoZT1jLmpzdmFycylmb3IodmFyIGQ9MCxmPWUubGVuZ3RoO2Q8ZjtkKz0yKXt2YXIgaD1lW2RdLGc9dyhhLGVbZCsxXSxiKTthLmFbaF09Z31pZihlPWMuanN2YWx1ZXMpe2Q9MDtmb3IoZj1lLmxlbmd0aDtkPGY7ZCs9MilpZihnPWVbZF0saD13KGEsZVtkKzFdLGIpLGcuY2hhckF0KDApPT0iJCIpYS5hW2ddPWg7ZWxzZSBpZihnLmNoYXJBdCgwKT09Ii4iKXtmb3IodmFyIGc9Zy5zdWJzdHIoMSkuc3BsaXQoIi4iKSxqPWIsTz1nLmxlbmd0aCxCPTAsJD1PLTE7QjwkOysrQil7dmFyIEM9Z1tCXTtqW0NdfHwoaltDXT17fSk7aj1qW0NdfWpbZ1tPLTFdXT1ofWVsc2UgZyYmKHR5cGVvZiBoPT0iYm9vbGVhbiI/aD9iLnNldEF0dHJpYnV0ZShnLGcpOmIucmVtb3ZlQXR0cmlidXRlKGcpOmIuc2V0QXR0cmlidXRlKGcsIiIrCmgpKX1pZihlPWMuanNldmFsKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmOysrZCl3KGEsZVtkXSxiKX1lPWMuanNza2lwO2lmKCFlfHwhdyhhLGUsYikpaWYoYz1jLmpzY29udGVudCl7aWYoYz0iIit3KGEsYyxiKSxiLmlubmVySFRNTCE9Yyl7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWU9Yi5maXJzdENoaWxkLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKTtiLmFwcGVuZENoaWxkKHRoaXMuai5jcmVhdGVUZXh0Tm9kZShjKSl9fWVsc2V7Yz1XKHRoaXMpO2ZvcihlPWIuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyllLm5vZGVUeXBlPT0xJiZjLnB1c2godGhpcy5lLGEsZSk7Yy5sZW5ndGgmJlYodGhpcyxjKX19O2Z1bmN0aW9uIFgoYSl7aWYoYS5fX2pzdGNhY2hlKXJldHVybiBhLl9fanN0Y2FjaGU7dmFyIGI9YS5nZXRBdHRyaWJ1dGUoImpzdGNhY2hlIik7aWYoYilyZXR1cm4gYS5fX2pzdGNhY2hlPU5bYl07cmV0dXJuIFQoYSl9CmZ1bmN0aW9uIFkoYSxiKXt2YXIgYz1kb2N1bWVudDtpZihiKXt2YXIgZT1jLmdldEVsZW1lbnRCeUlkKGEpO2lmKCFlKXt2YXIgZT1iKCksZD1ILGY9Yy5nZXRFbGVtZW50QnlJZChkKTtpZighZilmPWMuY3JlYXRlRWxlbWVudChKKSxmLmlkPWQscChmKSxmLnN0eWxlLnBvc2l0aW9uPSJhYnNvbHV0ZSIsYy5ib2R5LmFwcGVuZENoaWxkKGYpO2Q9Yy5jcmVhdGVFbGVtZW50KEopO2YuYXBwZW5kQ2hpbGQoZCk7ZC5pbm5lckhUTUw9ZTtlPWMuZ2V0RWxlbWVudEJ5SWQoYSl9Yz1lfWVsc2UgYz1jLmdldEVsZW1lbnRCeUlkKGEpO3JldHVybiBjPyhTKGMpLGM9Yy5jbG9uZU5vZGUoITApLGMucmVtb3ZlQXR0cmlidXRlKEspLGMpOml9ZnVuY3Rpb24gWihhLGIsYyl7Yz09Yi5sZW5ndGgtMT9hLnNldEF0dHJpYnV0ZShHLEkrYyk6YS5zZXRBdHRyaWJ1dGUoRywiIitjKX07d2luZG93LmpzdEdldFRlbXBsYXRlPVk7d2luZG93LkpzRXZhbENvbnRleHQ9czt3aW5kb3cuanN0UHJvY2Vzcz1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBMO1MoYik7Yy5qPWI/Yi5ub2RlVHlwZT09OT9iOmIub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQ6ZG9jdW1lbnQ7dmFyIGU9bChjLGMuZSxhLGIpLGQ9Yy5oPVtdLGY9Yy5rPVtdO2MuYz1bXTtlKCk7Zm9yKHZhciBoLGcsajtkLmxlbmd0aDspaD1kW2QubGVuZ3RoLTFdLGU9ZltmLmxlbmd0aC0xXSxlPj1oLmxlbmd0aD8oZT1jLGc9ZC5wb3AoKSxnLmxlbmd0aD0wLGUuYy5wdXNoKGcpLGYucG9wKCkpOihnPWhbZSsrXSxqPWhbZSsrXSxoPWhbZSsrXSxmW2YubGVuZ3RoLTFdPWUsZy5jYWxsKGMsaixoKSl9Owp9KSgpCi8vIGNsYW5nLWZvcm1hdCBvbgp2YXIgdHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndCcpO2pzdFByb2Nlc3MobG9hZFRpbWVEYXRhLmNyZWF0ZUpzRXZhbENvbnRleHQoKSwgdHApOw==
ChildNodes : 3 : 3, 27, 28
ChildElementCount : 2
FirstElementChild : 3
LastElementChild : 28
Children : 2 : 3, 28
PreviousElementSibling : null 
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : html
TagName : HTML
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : i18n-values
Name : i18n-values
Value : dir:textdirection;lang:language

NamespaceURI : === null
Prefix : === null
LocalName : dir
Name : dir
Value : ltr

NamespaceURI : === null
Prefix : === null
LocalName : lang
Name : lang
Value : en

NamespaceURI : === null
Prefix : === null
LocalName : i18n-processed
Name : i18n-processed
Value : === empty

NodeId : 3
NodeType : 1
NodeName : HEAD
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 2
ParentElement : 2
FirstChild : 4
LastChild : 26
PreviousSibling : null 
NextSibling : 27
NodeValue : === null
TextContent : == CiAgCiAgCiAgbW9iaWxlLnR3aXR0ZXIuY29tCiAgLyogQ29weXJpZ2h0IDIwMTQgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAgIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKICAgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4gKi8KCmEgewogIGNvbG9yOiAjNTg1ODU4Owp9CgouYmFkLWNsb2NrIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBWUFBQUJWN2JOSEFBQUZvMGxFUVZSNFh1M2NTMU9UVnh3RzhIYTZkc1pOdC8wUzdvelgrd1VTR0tON3ljSXZrSjJPaU5jZGJ2d01mQUJYTFMxVnZMWEZTTVdVZ0ZBaDFvSklDQ0VHcThVRnA4K2ZQdTg3SjRTM3ZybWN2SWZPY2VhWk1LT1NuTi84ei8rYzk1WXYzQjhYRnhjWEZ4Y1hGek5SWjg5K3JaTEpKTktMRENBWmRmcDBIaW5pNXpXSi9Jems1ZStRQWY3YnBQemYveXZLTGtEMEkxbEFyQ09xd2F6TDcwRDY1WGR1YjVSVWFnY0Ewa0RKQ1lDSjhIZW41YjIyRDh5NWN6dlZtVE45Z0NrUndIendYdktlOHQ3MndpajFKV0I2QUZNSUJEQVBWWkRQSUovRnRoN3pEV0FlRVNENjRMUElaN0lDQndBeFpCRlJsbVVSaVVXTGsweW11Q3dyRzhOdFF5cUtLZlVWWUc0UndQN2dzOHBuYmhzT0FPNGdhcHZsVGx1UXpGYU8rVW95M25OTUFheXVybGFsY09xVUthU1V1ZFVLVGE5ZFFOL3QzbTBFaVdPSXRYNmZ3Nlc4blVDRHlGSkhoNWt0QU1iVXVoMHlONEh0QlBwV2dHSXhOWVFVVFNCaFRDM1pjY3ZXM1FOb2F3VVI2QWZrN3A0OVpwQXd0dVlQUEhsc0ZVa0ZFZWhIQUEwank2MUd3dGhrak0xVVR4OEJJcTJnSWVEY1ErN3YzYXRLbloydHJxSyt4cy9uOEpSRlZCVUVKTCtDQkdnWVFEL3QzNjlXV29tRU1UWjBQZ2tBYVE4ZzZpazJSSnlIKy9hcHh3RDZCU20zdHBMUzlRUHhUR0RVRlRRa1RaclQ2d0dBcElKR2tLY0hENnAzOFhqTHpreldmdzZaQURiMG9IdkFFYUJIQVBwWktvaEF2N1lTQ1dPdXAzcjZDUkJwQlgzdjlSK3BIdVN4QUIwNG9ES0k0RWpHRGgxcURSTEdYQTlRMWlhZ1lRRmlneGFnSndSNkJwd3hwdElzRXNZYytyb1ZBTmFqQmhwa2N4YWcrM3FEQnM1VFJNZDVqb3dmUHR3czBycU1QVXoxSkFrUWJROGkwRjF2QldQL0dRSE9xRXd2Z1dHeXdQbU5XVzBHQ1dNUEE5UnJBOUNnMzM5WVBRUjZBaHdCR3R1RU00N2tqaHhSRTBqRFNCaDdHS0FCQzRDcUd6U0JaSHBsTkNEQTZQR0JYaHc5cXQ0bkVvMEFEWVFCeXRnQ0pMdm5COTd5THMyWlFNK1E1OVdWNCtOTThuV3FFU1NNUGN3T09tOEJFQTh2MktDNVFjeElneFlnVHEwc2dTWThIRmFQNEV3anZ4ODdWaTlTUGd4UTBRWWdIcUQ2cTljSUsyalU3ejJzSElZNE5VQXp5Ri9oa1lwaHB0aWFEVUJqRnk2b1lhLy9hTHRuQXJIbjFGYU9qdk1Ta2RmWnNFZ1krN1lCcXBUTEtudnhvbnJJL2pQaVRTL2lqQlBIQXhLWUZ4ck9ORExENUk4ZjMzajlBS1FRUUhaT3NhVnIxd1NsQm1rY1NON2h4YWdHbFB0TTVYZzRzd1I2eFh3R3FXaG5rMmFXcjEvZkVtbmkwaVVmaU5QTFg4NG5RK0w4d2J3K2NlSy9rUEtHbG5uelNGTkE4bmJQT1FCTmFsT0tPRXcxRGlNd2Z1YVFqMTFkRFM3ejNDaEdtVklBMG5SdnI4b0NhS1B2Yk1KNXljeHFPTE9iS3VkUDRzeWZQQ21wUmNMWURSeHFtTWxLQU5MTTVjdlNmL3pxbVVJNHJRaWs5WndBbkRua0RiS0EvSzBqWWV5aEQxWnRSbm9GSkt4U1d1VndXakhFRVJqaXlDc3JSOE41aXl1M2k0aVBoTEViT04xaE51VUFwTmRYcmdBb29ISnFnSFFjaERpU0FwRStkWFh4ZEllQkUyYW04KzdHalMyUjVvQlUxWkNEcDVXZkJSMkh3ZVZ0dWVhV05YREtOWHFrZVNBUlJsdXRpTVA0MDRwWkpKQ0hVMFJ3S2FuZjhFbDc4NmtFSUwwQkVpc25zT2ZvT0pJQ0l6akxTTG1qWTVmRmwzM0NaL1htelNDa3dNcVpENWhXZ2tPZ25JRUxoL1lodmIxNlZjMFJxWGExWW1weDFFb2lrVFp3NlRuYXZBOUFXdWpwRVJnZGgwQis1YkFwKzcybnBCS0pIUVp1WHJBUHFYRDdkbERsRUlkVncrQkdDS21lUGdPM3Y5aUhCSnpheW1GMG5DVU5COWYzQzZxN2U2ZUJHNmpzeW9mejU3VjlEck9wSVJjMEdNa0tVdW5zN0RGd0M1NmR3WUdudnBUWDloekd3eW5GNDd3Rno4Qk5uTFlHeDFTY1VuNjRXbFhqbE9QeHhZOFlrNkhiZ08xSDBuc09vK09zVlJLSm1ORWJ5VzNQR3BBQWhHZzlod0ZPeWoyS1FDUi9Xakc0VGVhV2U1aGxFNUxBbEJHOGJ2VXdpM3NjNmxOMzkwYmxHTUJ4RDlTNVJ6SU54RDNVNng0TGQxOHM0TDZhd3Q2NEx6ZHhYNC96RHhqOS9JRXVlQXZoQUFBQUFFbEZUa1N1UW1DQykgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFDdmxCTVZFVUFBQUQvZ0lEL2dJRC9WVlgvVlZYL1RrNy9ZbUwvWUdEL1ZWWHpVVkgvWFYzMlVsTC9XMXYyVDAvL1dGajNVbEwvVWxMM1VGRC9XRmp3VGs3L1UxUC9VMVB4VFUzL1YxZnlUMC8vVkZUelRrNy9VbEx3VFUzL1ZWWDBVRkQvVkZUL1ZGVDFUazcvVlZYL1ZGVC9VMVB5VDAvL1ZGVC9VMVB4VEV6L1VsTHVTMHYvVTFQL1VsTC9WRlQwVDAvL1UxUDBUazcvVkZUL1UxUHVUVTMvVWxMelRVMy9VMVAvVTFQd1RFei9VbEwvVTFQdlRVMy9VMVAvVTFQeFRVMy9VMVB6VGs3MFRrNy9VMVB5VGs3L1UxUHpUazcvVTFQL1UxUDZVRkQvVWxMelRrNy9VMVAvVTFQeVRrNy9VMVB0VEV6L1VsTHlUVTMvVTFQL1VsTC9VbEx4VGs3L1VsTHZURXovVTFQdlRVMy9VMVAvVTFQL1VsTHhURXp4VFUzelRVMy9VbEs3T3p1OE96dThQRHk5UER5K1BEeStQVDIvUER5L1BUM0FQRHpBUFQzQlBUM0JQajdDUFQzQ1BqN0RQVDNEUGo3RVBqN0VQei9GUGo3RlB6L0dQajdHUHovSFB6L0hRRURJUHovSVFFREpQei9KUUVES1FFREtRVUhMUUVETFFVSE1RRURNUVVITlFVSE5Ra0xPUVVIT1FrTE9aV1hQUVVIUFFrTFBaV1hRUWtMUlFrTFJRMFBTUWtMU1EwUFNabWJUUTBQVFptYlVRMFBVUkVUVlEwUFZSRVRWYUdqV1JFVFdSVVhYUkVUWFJVWFhhR2pZUlVYWlJVWFphR2phUlVYYVJrYmFhV25iUlVYYlJrYmJhV25jUmtiZFJrYmRhV25lUmtiZVIwZmZSa2JmUjBmZmEydmdSMGZnYTJ2aFIwZmhTRWpoYTJ2aVIwZmlTRWppYTJ2alNFampiR3prU0Vqa1NVbmtiR3psU0VqbFNVbmxiR3ptU1VubWJHem5TVW5uU2tyb1Nrcm9iVzNwU2tycVNrcnFTMHZxaTR2clMwdnJpWW5yaTR2c1MwdnNpWW50UzB2dFRFenVURXp2VEV6d1RFendUVTN3Nk9qeFRVM3g2T2p5VFUzeTZPank2ZW55OHZMejgvUDBUazcxVGs3MlRrNzJjbkwzVDAvM2NuTDRUMC80Y25MNVQwLzVjM1A2VDAvN1VGRDhVRkQ5VUZEL1VsSkpXWldnQUFBQVlYUlNUbE1BQWdRR0RBME5FQlVXRmh3Y0hSMGZIeUFnTkRRM09EZzlQVDQrUWtKRFEwbExTMTVmZEhSMWZIeUVoSVdHaUlpSmlZdVZsYWlvcWF1cnJLK3Z1TG01dTd1N3dzTEV4TVhHeHN6TTB0VFUyZG5hMnQvcDdPenQ3ZlB6K2Z2Ky92NytqRCt0alFBQUNZaEpSRUZVZUFIczFjRnF3akFjeC9HMUZSMGlJcUtJRkZFVUhLSlFLbElSRktHVWlsU0tWQ21pSHJLcENEdVBIY2JBOTl4dGpBMStiN0hMam1Na2FlSXUrVHpCbDE4Qy94dEZVUlJGVVJTRlE2YmM2ZzBuczhVcTN1M2kxV0kyR2ZaYTVjei90S1FhZlcrTlg2MjlmaU4xMVJpajFwM3Y4YWY5dkZzenJwUlRHV3hBWlRPb3lLOHBkcFpnc093VXBlYVV4Z1NNeUxna0xhYzZCWmRwVlVwTzNRTTNyeTQ4SnpkQ0lxT2MwQnk5dlVWQzI3WXVyc2NNSVVCb2lwckhJaENDV0VKR3l2c1F4aGZ3azVveEJJcWJDWE0wbTBBb1ltdUpycWdENFJ5RHZ5ZnRRZ0kzemR1VERTQkZjTXZYVTRnZ1NWVGcyaWVDTkZHVzQvOEVrQ2hnL2tlR0M2bGNnNjFIYzhEZzdjYzc2RGthVTVBTm5xQW5saUtiNlY0UXJxQjdsaUxDY0VYeU1maUNIcDQvUUMzTzAvYm9QbmlERGk4TVJiNU9HV1NCTitod09MNHlGRmwwUFNZQi8wTEgwK1VUdEloSjlXQWhFZ1NkVHVmTEYyaUZOSTkyQnlSYTZQeklVUFROaWgyMXVGRzFjUUMvS2V3bjZHV2gwQmRlU3UxTktSUktTMitFVXVpRjJDS2w3VVdSM1dhYk5IRm1rODRrMldTVG5kbXNHeWZaTWM0MnppWW1KaG96Ym8waHhTVnNNWVJZRmhFRUZXdDdVYXUxVjNxK2hmK1RzMlpYTXNtTW5Iayt3WS8vZWM1NXpqbi9kL0hldWM0RG1xVWcvNHByMFhYbk8rMVp3cDJRUDVCMUxUcnIrRDRsSEtDM2FROEJGSHhuM2JYSTZVMzdPdUZQS0JBVUk0VS8zYjZ5SGY0VENJcXJoM3crdndDUVZIUXJtdjRUY1lGd0ozVEhIeElrU1lxWkxrVVhwdjcvRUM0UVRtcmYzSjFRU0F3RHRGaDJLWnIyZjNTT0d6UVhDTndOQ2JJa3g1THBxanZSdVNuL2RiY0lidy81ZllHUUlONlQ1RVE2clg3cVNuUnI4cS9mY1lMaTJ2YXo4NzZBSUlyMzRvbEVTbEV6emIrSWl6bytFZlFtSndpZStXQVFMWFF2R2srbWxFd21hN2tSdlRIeHY1ZHdKM1I3UGlBSW9peEhrOG1VbW5Fcm12UjdmSm9YTkhzYnAzUlFrTUxSYUh3NUJZNm1hVis0RUoyZThQSzV4ZzJhcGFDSWlKWk9KSmZWYkRhclpYTnRaOUUxK3pmUkVjSU5vaTBVWEpCak1icGlxL0JvdVp6V2NSWWRzUVdkNEFmTllZNHRMT0FRaWlkVmRWV2pucHl1ZitVb09tRUx1c1FQOGdmUTB3dXluRUJDcXdEbGRIaDB3MUYweWM1ejZDWTNhTTZQT1NaSXNyeVlTQ3RvSWF5WFhzZ2JodDUxRU4wOFpBTTZTcmhCUGw5SUZERHBGeGZUNlF4YUd2a1VVRWJSNkR1SWp0cUFUdkdEL0w2N29paEY1TVRTVWxyTmFEb0tITjBvRnMydnlkUTZaWHMxNDEreXU0SVFGdW1lWDFMWDF2S2FSajJHVVFTbzlNMS92cVpkOVNBaFAwQmhLWUVPVWpKcldyNmdGM1RxMlRCTnMvU1lUS21yNDU0WndnK2F4NkFYby9GNE1xa3FhM2w0REpZUE9HYWxza3VtMU13WTZMQUhJQVFrU2hJR3E2S2doZkk2V3k4RVZDcVZLcFh5dDJSeUhSNEQvYzhEVUNBZ1JpSlIzRHh3OVVCTEc2eWZUWGpNVXFWYXJYMUhKdGF4TWRCSkQwQkJRWWhFcEVRcXFXQnM1S2pJK0NlZUtrRFRSQ2ZIUUdjOEFOR0FaRG1lU3VHWXBoN1dQMFVtcXRVYXRjYjNaRUtkNFg5djJDVVVCQWhqUTFsWndkZ29JQjU0aGh6a1U2azFHdlhtRDY3ZkhwYzhBQW5oU0NRbUp4UUVsRjFmM3lpQU0vU1V3VUZBOVVhejJmelI3VFM3N0FWSUFDaVd4aW1FTVZZb0ROZUw1Vk9EaDNLc2htVXZ1andHdXVJQktCU095QUFwNmlydUhSczREdW51TW9mdHpFQ1d0YlZsL1VSczZzb1k2QzBQUU8rS21QUm9JVXg2QkFTUXVkOC9hQ0RMYWdMVWF2MXM5d002QnJyaEFlakplMUVKUGEycTJieW1iMnpRZkVieDFGays4TFRhTnFJYlhvSmVQdDhYeFpNSlZWV3lHS3ZZODhQMVFqdFhXZjhBWkcyMUhyVGJyVitjUVR4TDl1cjV2dWo5WkFvTGx0SHpCbGFzc2hjUVBBMTRtaXlmZHJ2VGVlYXdaSnhOL2Z1VEE2TGxsSnJWQURLS0ZSUTgxUnJ5b1IyOWhRS28xZWxzYno5emJPckx4Q1BSQitvcU5wbHh2MWl1bFBmeW9acmhCb01HK1d3RDFQM1ZhZHRmSkY2SlBxUnpvM0Fmb2lvN0VKdDFpeGFMcDQxOEhuWlIveFpkSEFPZEo5NkpOR3g2YzdOQzQ2RWUxS2gvT2dnSStYUzNkM1pla0FOMTNubTRjb2crV3NjZTI5eGtHeDdGTnJ3MUJJSHpjSHVudTdQVGUvUmk2bkE5U2J3VFBmMTR2V0NXMlg1bkc3N0o4a0UvZHhBUERhalg2L1YvSTZONmJReDBqSGdwK3NRc2xzdXNmNXFzZlNpSWN0b1VOT1QwK29OOTBUSHVLNnlENkROY0VSdXNmeG9XMis1REQyc2ZnUHI5L21EdytPWGtLK3dNOFZiMGVhbTZOeThzeG5rQVVCdWdJUWVlM21BdzZJOUVNL2JQSUc3UjB3T2llbjAwTUZwMFlBdzVYZlJ6cjl2clBScjB3ZG5kM1gwMTZSbUVoNklIOWNjQjBaZVVNMXF2djdzNTM5WW1naUNNeDVTK0tQNFJGVVJFQktGYUZTcWlTTFdDVlZTd0JkRUtJcjVRUDZJZ3RZcllpTmU3dW5wdWRsZVdwSGxyeGRSdjRjd09teVlWbVN1ZGc2WHpDWDdNUG5ONXNqc3orUDBCb0NYSXorREFzaXpQaWtCMFQrYXZORVAwbXZ3UDhkRDNCdzVzbVdnUUJ6SlVGQ0ZIVjVqTEJpR2lOK1IvSVBEM0FyL1BwR2Nzc0N6N25DTlBvZFFHWFRZdzF6RWlSRy9qOTVuMFBCQjAwRFB5S09BcDlRWmR4L0EyWHlCSDVIOUlQd0NFY2c0RkZzOUxsV3RhcXdmTWxaNGcwVHZTYzhCQlFiZWluaUUvR2VTbmhORG1vdHlsSjA5RStVRUJZWDBCelVmQVFRR2hmQUJJSzIxT3lWMEw4MFFmeVArOGgxaEduaGJWRitBVU9mSm9iWjZOU1Y2YzgwVGtmMGpQK0gybStxSUVLZUF4VnlXZUZwajR1VVhVWFFrL1lMRytTTTVaRVdoSzVESEhHLytKeDRKRXY0Wnl0RUwrQjNGSVB3V0VXcVB6TXVhUjhQTVVUOVQ5dEJSL1VHTzVGMEUrQ25pc1BTL3pnTWNUZGJlSVZzbi9vSDVBejNtUUR5V29iVjhjRVgvaTVJbldWMXNEL1dSNFhzUmpNRUUzK1VmZ1dvakkvMlN4dkVKOXRZSEhIWk43SnVlSjFpTlE3eXY1bjNCZU9lR1V4Z0xQclJvYUNYaWkzcmZvZjBKK0ZNb25DTnE0RTdLdEZqd1I4UXo1bnlobkF6VE8zWlZ2UnVHSmVsOUcvQThkbUduamdiblREU1p1eUJOaGZrYjhUNm1OQmh4bm5iOHUzOURFRTMzL3gvOW9Bd0ZFL3ZuK0Jodm4va2pINzN5Ny85RVdjYXozWit0cGl1T2lYMnp6UDhiaWlYbi9zQ25mTmxpUmFNVC9BSkJ6d1BQeXBIeGpaVlVpTmV4L3FMNmN2eVRmZWxxZHFCenlQNlNmenYxbVhjMjVsWWowd1ArMHJZUHdUdy9XMXI1Y2pjaEUvd004b09oWForcHI4SzVPcENrOWNGNytjbzB0OEpXSmduNU1JTHEyTDRFaGdUN3lCQngvZXl5Sk1ZcStDencvT2d2amlReWE5RzNJeitKRU1xTTQvWTcxbmNYRENRMHJiWGI4d2tSUzQxeWJkOGJUSDNoTGZ5UXcvYUhKdXNaS0R5VS9lTHNIUnBNcFNWTzdIOTZlYXNxT3Q4L3VqbWYyd0Y1ZkFKRGdpb1FFbDBqUW1vMGRlWUFuRjQ2bXY0Z2svVlV0S1MyemtWLzNNems5TXpjZjEvM016ODFNVHdxdCsva0xjNVc1UjVKb0d6MEFBQUFBU1VWT1JLNUNZSUk9KSAyeCk7Cn0KCmJvZHkgewogIGJhY2tncm91bmQtY29sb3I6ICNmN2Y3Zjc7CiAgY29sb3I6ICM2NDY0NjQ7Cn0KCmJvZHkuc2FmZS1icm93c2luZyB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIwNiwgNTIsIDM4KTsKICBjb2xvcjogd2hpdGU7Cn0KCmJ1dHRvbiB7CiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsKICBiYWNrZ3JvdW5kOiByZ2IoNjYsIDEzMywgMjQ0KTsKICBib3JkZXI6IDA7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgY29sb3I6ICNmZmY7CiAgY3Vyc29yOiBwb2ludGVyOwogIGZsb2F0OiByaWdodDsKICBmb250LXNpemU6IC44NzVlbTsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMTBweCAyNHB4OwogIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTsKfQoKW2Rpcj0ncnRsJ10gYnV0dG9uIHsKICBmbG9hdDogbGVmdDsKfQoKYnV0dG9uOmFjdGl2ZSB7CiAgYmFja2dyb3VuZDogcmdiKDUwLCAxMDIsIDIxMyk7CiAgb3V0bGluZTogMDsKfQoKYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAuNTApOwp9CgojZGVidWdnaW5nIHsKICBkaXNwbGF5OiBpbmxpbmU7CiAgb3ZlcmZsb3c6IGF1dG87Cn0KCi5kZWJ1Z2dpbmctY29udGVudCB7CiAgbGluZS1oZWlnaHQ6IDFlbTsKICBtYXJnaW4tYm90dG9tOiAwOwogIG1hcmdpbi10b3A6IDFlbTsKfQoKLmRlYnVnZ2luZy1jb250ZW50LWZpeGVkLXdpZHRoIHsKICBkaXNwbGF5OiBibG9jazsKICBmb250LWZhbWlseTogbW9ub3NwYWNlOwogIGZvbnQtc2l6ZTogMS4yZW07CiAgbWFyZ2luLXRvcDogMC41ZW07Cn0KCi5kZWJ1Z2dpbmctdGl0bGUgewogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgojZGV0YWlscyB7CiAgY29sb3I6ICM2OTY5Njk7CiAgbWFyZ2luOiA0NXB4IDAgNTBweDsKfQoKI2RldGFpbHMgcDpub3QoOmZpcnN0LW9mLXR5cGUpIHsKICBtYXJnaW4tdG9wOiAyMHB4Owp9CgojZGV0YWlscy1idXR0b24gewogIGJhY2tncm91bmQ6IGluaGVyaXQ7CiAgYm9yZGVyOiAwOwogIGZsb2F0OiBub25lOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAxMHB4IDA7CiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKfQoKI2RldGFpbHMtYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiBpbmhlcml0OwogIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwp9CgouZXJyb3ItY29kZSB7CiAgY29sb3I6ICM2NDY0NjQ7CiAgZGlzcGxheTogaW5saW5lOwogIGZvbnQtc2l6ZTogLjg2NjY3ZW07CiAgbWFyZ2luLXRvcDogMTVweDsKICBvcGFjaXR5OiAxOwogIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7Cn0KCiNlcnJvci1kZWJ1Z2dpbmctaW5mbyB7CiAgZm9udC1zaXplOiAwLjhlbTsKfQoKaDEgewogIGNvbG9yOiAjMzMzOwogIGZvbnQtc2l6ZTogMS42ZW07CiAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICBsaW5lLWhlaWdodDogMS4yNWVtOwogIG1hcmdpbi1ib3R0b206IDE2cHg7Cn0KCmgyIHsKICBmb250LXNpemU6IDEuMmVtOwogIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5oaWRkZW4gewogIGRpc3BsYXk6IG5vbmU7Cn0KCmh0bWwgewogIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsKICBmb250LXNpemU6IDEyNSU7Cn0KCi5pY29uIHsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQtc2l6ZTogMTAwJTsKICBoZWlnaHQ6IDcycHg7CiAgbWFyZ2luOiAwIDAgNDBweDsKICB3aWR0aDogNzJweDsKfQoKaW5wdXRbdHlwZT1jaGVja2JveF0gewogIG9wYWNpdHk6IDA7Cn0KCmlucHV0W3R5cGU9Y2hlY2tib3hdOmZvY3VzIH4gLmNoZWNrYm94IHsKICBvdXRsaW5lOiAtd2Via2l0LWZvY3VzLXJpbmctY29sb3IgYXV0byA1cHg7Cn0KCi5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBmb250LXNpemU6IDFlbTsKICBsaW5lLWhlaWdodDogMS42ZW07CiAgbWFyZ2luOiAxMDBweCBhdXRvIDA7CiAgbWF4LXdpZHRoOiA2MDBweDsKICB3aWR0aDogMTAwJTsKfQoKI21haW4tbWVzc2FnZSA+IHAgewogIGRpc3BsYXk6IGlubGluZTsKfQoKI2V4dGVuZGVkLXJlcG9ydGluZy1vcHQtaW4gewogIGZvbnQtc2l6ZTogLjg3NWVtOwogIG1hcmdpbi10b3A6IDM5cHg7Cn0KCiNleHRlbmRlZC1yZXBvcnRpbmctb3B0LWluIGxhYmVsIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZGlzcGxheTogZmxleDsKICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsKfQoKLm5hdi13cmFwcGVyIHsKICBtYXJnaW4tdG9wOiA1MXB4Owp9CgoubmF2LXdyYXBwZXI6OmFmdGVyIHsKICBjbGVhcjogYm90aDsKICBjb250ZW50OiAnJzsKICBkaXNwbGF5OiB0YWJsZTsKICB3aWR0aDogMTAwJTsKfQoKLnNhZmUtYnJvd3NpbmcgOi13ZWJraXQtYW55KAogICAgYSwgI2RldGFpbHMsICNkZXRhaWxzLWJ1dHRvbiwgaDEsIGgyLCBwLCAuc21hbGwtbGluaykgewogIGNvbG9yOiB3aGl0ZTsKfQoKLnNhZmUtYnJvd3NpbmcgYnV0dG9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC4xNSk7Cn0KCi5zYWZlLWJyb3dzaW5nIGJ1dHRvbjphY3RpdmUgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjI1KTsKfQoKLnNhZmUtYnJvd3NpbmcgYnV0dG9uOmhvdmVyIHsKICBib3gtc2hhZG93OiAwIDJweCAzcHggcmdiYSgwLCAwLCAwLCAuNSk7Cn0KCi5zYWZlLWJyb3dzaW5nIC5lcnJvci1jb2RlIHsKICBkaXNwbGF5OiBub25lOwp9Cgouc2FmZS1icm93c2luZyAuaWNvbiB7CiAgYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVnQUFBQklDQU1BQUFCaU0wTjFBQUFBK1ZCTVZFVUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzkvZjMvLy8vOS9mMzYrdnI4L1B6NysvdjcrL3Y3Ky92Nysvdi8vLy9yNit2bjUrZms1T1Q1K2ZuMTlmWDQrUGp1N3U3djcrL282T2p4OGZIMDlQVHk4dkx6OC9QajQrUDM5L2ZtNXVicDZlbmk0dUw4L1B6dzhQRHQ3ZTMyOXZiczdPemc0T0RoNGVIZTN0N2w1ZVg2K3ZyZDNkM3E2dXJmMzkvYzNOemJSRGY3Ky92YjI5dlcxdGJaMmRrK0Q5YXJBQUFBTFhSU1RsTUEvZUl4QmZBQ0hqM1l3aFlKRHlmT3RmcjJXSE9iZ0VxcGplbGxnWTZjNm1aTFYzTDJxS2pPWmVtTityVXY3TnBBQUFBQ2NVbEVRVlI0WHUyVTUzYmFRQlFHQXhpTWFRWlQzV3Q2cm5xbDl1S1c5djRQazVYRXNwRzRXRm1KL0dNZVlNNjM1Y3k3Lzh5ZVBYdjIzTjd1eG5Od2RIU3dFMUVOb0xZTFR6NE5rTTd2UUhRRmhLdjRubFFDQ0lsVWJGRU9YSEp4UFZWWVVZM25LU1NwS0ZtSUpicUFOUmR4UEljblRIUnlHRVBVQWdhMG9udXk0Q01iMVpNNUJoL0htWWlpR3dod0U4MVR2SVlBMThWSW9rdlk0REtLcDFTQkRTcWxDS0l5SUpUNVBVMUFhZkwzRlZDNHExdURMZFM0KzRyQ1hkMDZiS1hPMjFmS2R4Y05LRnpWelVGUTlLb0RKUmVocjB6MHRCZ0JwY3JmVnlaYXZBeE03dW8yQUJITk84czJOVFc0KzhwRXM0SFVNeFMrNnJZQUVaRkJZbCtZOEZRM0M1aG9JSW1HTU5WVnZMcDRYMUZSWjJuMEJVMDM1WCt1N2ptZ29tV3YvenpXUjIzbEI3aWNoL2IxREJlUlFWTk50eTFGSFlMRFdWaDFUd0VYaWM0Z3M2MTA1VWZQZE1yZDEvSENmZnJucVRheXJZa3FQM3FtU29tN3I5cTg0eHlNRExJVXg3TXlsZm43T3ZJR21iWXlVWW1HYm1yeTk5VVduWU9aN3NGYzVPSGIxYjJITGJTOVFWMXZFRDNkUFg5ZlFYRnVXaUVlRjlrenBmTWNmYVVaa2J5bjkrYlFUZlh3dm00VzBpQTNSTmRRVXlJVjFsZWtrRE9oU3gzc2RHaDE3K0F0MGN0QTBwbERwci9nTHFTdlNJK2tYdDhtQWo5RFZsMjByM2hHQk0waU93S21CdFpYSE9QWDc5ZkZYQ0ovVXJlNzlHeHI0ME93dXU5aEs4TFBwMW1uUjdKbVd1djdac00rb0gzRkdaT2JGb1d4M2lZL1VsMUoyTFZuMGI3aTZCMlJaTTFXdW13TDgzM01vSDNGTVExaFBISUdzYWRudms5NFgzRXNjdFBFNHhLOHA4OUZ2Szg0RXhJUnVvVWE2UHQ5OGZVMURKVU1vc2orMy9TMTVPdHJHT3NCOUxuWXFtK2U1dytlczRKQWhZUURkZ0FBQUFCSlJVNUVya0pnZ2c9PSkgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFCUGxCTVZFVUFBQUQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzYrdnI3Ky92NysvdjcrL3Y5L2YzNit2cjcrL3Y3Ky92Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzkvZjMvLy8vLy8vLy8vLy84L1B6Ly8vLzUrZm4vLy8vLy8vLzYrdnIvLy8vLy8vLzgvUHo3Ky92Nysvdi8vLy9rNU9UaDRlSGYzOS9lM3Q3ZzRPRDYrdnJiUkRmNStmbnY3Ky94OGZIMDlQVFkyTmpjM056MzkvZnE2dXI0K1BqejgvUG41K2Y3Ky92WjJkblcxdGJ0N2UzVTFOVFYxZFhsNWVYcjYrdjE5Zlh5OHZMczdPejI5dmJhMnRyYjI5dm82T2ptNXVidTd1N2QzZDM4L1B6cDZlbmo0K1BpNHVMdzhQRC8vLytCUTMwbkFBQUFRSFJTVGxNQUhoWUZEekVKQWlmaXd2Yjk4TTc2UGRqcXRvR3BabGwwYzQ2cWoxaWNUSjFLUzQyQTZXV2IyV2RhZFlLMWN2Q2IvY0pYVitLQTlxaW9QYzVsNlkzNnVSanlTZ0FBQlhWSlJFRlVlRjdzMWt1S3dsQVVCTkRTK0p0cWdna2ttT0RJSDRnUFJJZ0QxMVA3MzBCREk2SFYyNjBaMVd1NFp4VUgvNHR6empubm5IUE9PZWVjcTJ0RUpkbHNFc1JrVCs0UmtlR1JQQTRSajRZa0cwUmpmQ0xKMHhpeENQd1dFSWtkNzNhSXd1VE11L01FTVRpd2M0QWVCaGQyTGdQb2xmeWhoRnpMQnkzRXBsYyt1RTZodGVXVExhUkdDejVaaktCVThVVUZvZG1OTDI0ejZLUTBwSkNwYWFvaGtzeHBtaWZRS0doaklYdXJTYmJaaHI5cVJHODF5VFliYUpKdE51ZWZjc0ZiVGJMTlpud2pFN3pWSU50c3liZEs0VnR0cmV5dEhkbG1sL3pJVXZUV2pteXpGVDlVU2Q3YWtXMDJwVW0yMlRWN1dPdmVLdHRzd1Y0SzFWdGxtMTJ4cDVYbXJiTE5CdllXaEcrMTVZSzNxamFiMFNUYjdGY3Y1dG1jT0JLRTRRMlhjN0tyVEpXM3locy8yUnN1Wnd2QmpzUVNoUGQwSnhDeUpWbUE1di8vZ2V0cGdZZXh0TFNZS2RIZitQYlVPOTNObzM2SHQ3N2VxSEN2Tm52QVNhQkxwNHJvb0NsdnBZR3VycHg5MlN4Nkt3M1V2ODczWmJPSHZBN1F0ZDEybTdaWjZhMDBVTisyMjVhN0Y1dHQ4WHBBN1k2MXJKaTFWaVBlU2dQWjdYWm51Vmg0emRzc2Vpc05oQUV0emdPdmFadDl5R3NDZFN3TGVKS2sxNkROU20rbGdTQ2doUUFheDlOR2JmYUkxd1FTRDdZSWduRThIMGEzaVk0YThGWVN5TUtBeGdKb01xQnMxdHhiYVNEczZBUjVadjZBc2xsemI2V0JJS0FraWVmekNRQTVBOEptamIyVkJ0b01LSFhjVVNNMmU4eDNBRG9QQUFoNEpyN3Y1RzdJVktMamhyMjFESFMrRHNoUDB4eUFlbDNDWmsyOWxRYTZlYkFVZUx4ZTc0S3dXVE52cFlHU0ZWRHFPSzRMUEZGMFFkaXNpYmZTUUJzZGpRRk5vOUVvSTJ6V3hGdHBJTmlKdytGczVoY0JUYWVEd2FpYkVUYXI3NjAwMEdaQW5nZ0llTHFTeU54bUQvbHVRT000TG5nY2VEQlA4QUNRU25UWStMMTExZ2VSdHF4bE1mTERBc2lGa1Y4SDFHV1N5TkJtVzd4TytlaUp5bzdPODdCNE1DYUExSXhhemQ5YlV3Z0lnRllkN2E4RHdvNEdJcVlRZ2MwMmYyOTFrRWNkK1lKSFZtWnVzeWU4ZGprQWxLeEhIbmpFaUVVSVZPVERGS0tUUGR4YlhkblJqZ2hJN0dqZ1VTcVRObXZ1clRSUmtNUUF0QnA1M0lrakp1TlJpWTcyY1c4Tml3ZExIZHlKZ21jZGtHVEtUR3oyR2QreFBPaG9HVkFValpnQ284emFzMzNjVzNsdmlGcVdoeUYyTkQ3WWJhWk0ycXk1dDlKRXM4SVRQZXhvSmxGa3NVelRabys1VGszRmlJV2g3S0FLcEV6YXJMbTMwdi8yY2tjemxZWGRzR1U2TnZ1WTZ3RmRKam4reTRPWEtSM0V5dFAvV01OYk5ZRDZZOUFnOFdDcy9GNHlvNTF0OW9CckFvR0p6SlYvK1dva0pEb3c5TmJhRjdRSkFLa05wTXliOUtQZmpMMlZCckx0em5McFEwRGxZTlRLZHJIWnAxd2ZxQTBpRWpoTVlzaXNsTjlJOUxTbXR6N1JCeExtR0NTeFc5azlwWXllMUxQWlI5d0FDTlFhZ0lidXRnYVNmdlRJM0Z2cCt4RHdnRGQ2WkVSQVZNOW1UN2tCMEhJWkpJbjRFa3A3VytLUlJLZkcza3FmWXlBZzRISHk2Wlp3cEIrZGFIZ3JWZkcvLy8zejV1MWwzOGFPRHNiRnJjSDFvcEo3VlBnUmFiTm5mUGVhSTgrMTNSRWRQVjRGQkE0Q1JrUXlaV2VrdDJyVThNM2xWUkVRbnM5QUc0WG1neExSamMwK3YwZDRxMVpOVmp6bk53OFdnc1RpdmlhUlhtaDVLLzE5anpzYUwrYml3Vndoc2JlWGRMVWZmZmErbnJmU1g5UDRyWWpuUmNkRkJXR1NRK0tVZjMveWJwN3Z1WDZsRnA3d29hTjllREJ4aVVFSXdDREgvd2ZDV3pVclh3VHJnTENqMTRyR3VoVFN4eDhRM3FwWkxuU1E0TWxYSFMySGU4dSt4dnFKOEZiZENtRUZUWHhjUWRGQUprUFAycWZWTnZzTE55MXZqZzlXQktRc1FNS1BmaVc4VmJ0NlNrZExGa2I1MFZlRXQyclgxTUdBNE1IVWxoa1JmdlRGaDRTM2FsY0VIYVNjem1yMjBSK0V0K3JYQ0R1NjNESnN1eC85K1I3aHJRWkUwTkZFSGxWaC9VVjRxMEYxQjZ6U0VkbFdGL2xTc2RuL0FjY0xnS2N0akJoZUFBQUFBRWxGVGtTdVFtQ0MpIDJ4KTsKfQoKLnNtYWxsLWxpbmsgewogIGNvbG9yOiAjNjk2OTY5OwogIGZvbnQtc2l6ZTogLjg3NWVtOwp9Cgouc3NsIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBTUFBQUJpTTBOMUFBQUJBbEJNVkVVQUFBRGNSVGZjUkRmZFJFVC9nSURjUmpyL1ptYmpWVG5jUkRmY1JUZmNSRGZkUkR6Z1NUbmNSRGplU0R2Y1JUamJSRGZiUkRqZVJ6dmNSamZiUmpqY1JUamNSVGpjUlRmZFJUZmNSRGpkUlRqY1JUamJSRGpiUlRqYlJUamJSVGZjUmpqZFJEcmNSamZiUlRqWlF6ZmNSRGpaUkRmWlJ6YldRelhYUkRYWFF6YlhRemJXUWpYWVNEdldRamJiUkRmT1FEUFNRVFRVUWpYQ1BERE5QelBKUGpMR1BUSFZRalhNUHpQUlFUVFdRalhMUHpQRFBESFlRemJBT3pEVFFUWEhQVExJUGpLOE9pKytPeS9GUFRIRVBUSFBRRFRRUURUVVFUWEJQRERLUGpLL096QzlPaS8vLy8vUFFEUFJRRFMzT1M2Nk9TN1RRVFRFUERIWFFqYk1Qak1CaExhV0FBQUFMM1JTVGxNQTR0Z1BBaFlGQ2NMOThCNHg5aWUxK3M0OVdJQ2JxWE5LWlkzcGp1cWNnVmRMWm5MMnFLZzl6bVhwamZvbnRWOExBTnNBQUFKclNVUkJWSGhlN1pUbmR1SXdGQVkzQVJJZ0JBZzl2VzF2MTczUk95bGJ5L3UveXNvMkZ4M01OYXhzOWgvekFITStTZmE4K00vczJMRmp4KzN0ZGp3SCsvc0hXeEhWQWVyYjhLU3lBTm5VRmtSWHdMaUs3OGxsZ0pISnhSYWx3U01kMTFPR09lVjRuc005Rk8wZHhoSmR3NExyT0o2all5NDZQb29ocWdFSGF0RTlKVmlpRk5XVFBJRWxUcElSUlhjUTRDNmFKM0VKQVM0VGtVUVhzTUpGRkUrK0NDc1U4eEZFQlNBb2lIc2FRTklRN3l1UUNGZTNEaUhVaGZ0S0lsemRLb1JTRmUwcjhzWERBa1NvdW1rSWlnWWFJT2tJZmVXaTU2RUVTRm04cjF3MGZGSWw0ZXBXZ0JBOXFPTXBtaXJDZmVXaWp0b2E5V1N4NnRhQUVMRkJSbC92aWxTM0JKUkliUms5L1ZGVHNMcmlmVVhSdU5mWExVMHkvN202cDBDS3hxTit2NmxKVS9rM2VKeHU3T3M1TFdLREhpMXRZc3RLRzF6T04xWDNER2lSTVI4ME14M2ZkQ2JjMStiUWUzbzJTSnJZWGNWMGZGTXhMOXhYaXowOTg3QkJ0dXg2NXFhQ2VGOGxIQ1IzRmFiQlRRM3h2azRNMXlONUIvTXcyK3VyZXc4aFRQMUJNMzhRbnU1ZXZLOGdNdys3SWNmSDlFM1psRUJmTVNPLy9LZjM1K0NtNnVhK3JoYlNZRGVFYTlDVXlXM3FLMUhJamo1REJ6OGRXZDBiV0NkNlVsdC91TVBFcitCbWJWL0pIclZHL2E5TXNFeWJWNWZzSzUwUjNmcm1CRlh0Q3RWWG10NzNINFBoUTR0OWs5cmtKNTV0WVh3WnJPNHJDRVVmUEhmVUVjdWFaQy91bXc5N1RmYVZwc2x1MnRDYjJsUlduQmxLRnRmK2h1d3JqYWE2UHh2N1JmZ1c3bnViSlB0S0kvWDBwdVFPNGsvUGZlL292dExZN0tieFZ3dmUwL3NFM1ZlYUxvc0lia0VEdnQ4SG9xL2hLR3dRWXZvcTVPTW5vcS9oTEFiZ2MvRlZuMzNQWDdwQWZFNVFIUjZmQUFBQUFFbEZUa1N1UW1DQykgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUpBQUFBQ1FDQU1BQUFEUW1CS0tBQUFCVFZCTVZFVUFBQURjUkRmL1ptYmNSanJqVlRuL2dJRGRSRVRkUkR6WlF6YlhRelhXUXpiWFFqYldRelhaUkRiYlJEbldRalhXUXpYWVNEdmJSVGpjUlRqYlJUZmNSamZjUlRqY1JUamRSam5jUlRmZFJUbmRSVGZkUkRyYlJUamNSRG5iUkRmYlJEamJSamZjUmpmYlJUamNSVGpkUlRqYlJqamNSVGpjUkRqY1JqbmNSVG5jUlRuZFJEbmJSVGpjUkRmWlF6YmNSVGZnU1RuY1JEZmNSampaUXpqY1JUZlZSRGJjUkRqY1JEaldRelhlUnp2YlJEalhSRFhYUXpiWFF6YmJSRGZlU0R2V1FqYlZRalhJUGpMT1FEUFhRamJDUERETlB6UFVRVFhSUVRTNU9TN1FRRFRVUWpXM09TN1NRVFRQUURURlBESEpQaksyT0MyNk9TN0hQakhPUHpQTFBqTE1QalBSUURUR1BESFRRVFRFUFRITFB6UEdQVEc3T2kvSFBUTEtQakxUUVRYWVF6YTlPaS9NUHpQRlBUSERQREhCUERDL096QytPeSs4T2kvQU96RFdRalgvLy8vYlJEZDN1bmRIQUFBQVFuUlNUbE1BMkFVV0NRSVBIajM5d3ZiTzhESDY0aWZxcVlGbXRyVk1jMWxLUzV4MG5ZNlBXS3FiallEcFpYV0NaMXB5OEp2OU1jSlhWK0tBOXFpb1BjNWw2WTM2SjdWbWNIZThBQUFGV1VsRVFWUjRYdXpXUzRyQ1FCU0cwZXV6NTZJU2dpYUVqSHdnR2hBaERuUkYzLzZIRFkxSWE1V1BqUDRhM0xPS1kyODU1NXh6empubm5IUE91U3l6cFBSN3ZiNmxaQVVyUzhoZ0I3dUJwYU1FS0MwWmh6M0EvbUNwYVBqVFdDSzIzR3d0Q2NNak44ZWhwV0ROM2RvUzhIUGk3dlJqZWpYLzFDYlg4cUExc2RHWkIrZVJhVzE0c2pHcDhZUW5rN0VwVlFRcUU3cGVDRnl1cGpNblltNHlHVkdaN3ExRXlUWmJFRWNoZTJ1VWJMTWxMNVc2dDRaa20yMklrbTAyNTYxYzg5YVFiTE5UUHBncTNocVNiYmJtbzFyNDFyaFc4TmFBYUxNenZqSVR2RFVnMld6Rmx5ckJXd09DemM2SmttMTJRUWNMM1Z0bG15M29wRkM5VmJiWkpSMHROVytWYmJhaHMwYjQxcmhjOEZiVlpxZEV5VGI3MjR0NS9iWU5BM0c0ZSs4ME5ZSTBnR0ZrdmFSNzc5S0taVVd1RktlN25sSXNUNVgvLzJNNVZNWmlaQjlEUWo3NHhXOGZmcndqUDkwTWIvMDdWZjVDYlhZSmcwQnRPNHRvS1M5dmhZSEdZMXZEWmcyOEZRWTZ0Qlpsczh0WUJlaHdOTFR5dDFuaHJURFFhRFFjV0F1eDJTSldBeHBPQnBXTVdTdm00cTB3MEdnNG5GUXFGVGQvbTcySGxZQllRSlYrdzgzYlp1OWpSYURKWUVCNG9zakowMmFGdDhKQVNVQlJxK1BsYXJNcldCR0k4bFFhalZhblhBNWtvcFVjdkJVRUdyQ0FXaFNvWHMzUFp0ZXdLaEEvTU1iVGJjcEVhN2w0S3d3VVJaU0hBTm5Wbkd6MkNWWUdtZzZvWjF1MVhHeTJoTldCQ0E4Qm9nRTFtN1psK1NoTlZNcmRXMldnL3YrQW1yMmVSWUNjR0xCWlUyK0ZnY1NCRVNEZmRaeGR3R2JOdkJVR2loS2duazFPalBBRXdTNWdzeWJlQ2dOTmRUUUx5QXRxdFJDd1dRTnZoWUg0bmRqdE5ubEFubGV0MXVJUXNGbDliNFdCcGdOeWFVQ0VKNDVEd0dhMXZSVUdhblU2bk1jbUIrWlNubG9zRVMzbnZtL3RVcEdtMXRGUGQ1RERBeUtGQkpHcHpSYXhTalc1SjBvOC9NQVE0WkV5S3VhL2IrME5wMTc1YmxNRVJEdWFFQ0ZCWkdxekJheFk5aUFqSU1iREswMVUwT1ZaeGNwbEU2QklqTHpGUml4Z1FEd2ZsQ0phWGNDKzFUb0t5T1lIRnZDT2xqUGlObXZ1clRCUkkrb1FvR1RrMloxWVF5SWVpV2hsRWZ0V254OFlmOFJjeWlNQ0VreWhpYzJ1NHhPV1N3OU1CQlFFTlRRRkk4M2EraUwycmRncEoxcm1zNDVtQnlZemhiRE53dDZxVHRUbFFDN3I2RlQvQ0xSUTAyWkxXS2M4T21LK0x6b29DeWtoS3BsNHE3cCs3Qi9kMFNqTmdnUmJxR096bTFnUHFMM1BYM25pWmFrT1FzZW5mMVBEV3pXQXhyK0pCdEVEUXhubkpUSVNObXZ1cmZCSzc1dDQ1Yk9SQk5HU29iY3FiOURxQkNqZFFPbDVFMzcweHRoYllhRFJpSWpSRHhLUXdKazlhK28ydTQzMWdZWkVSQm8va2NCSWZ2Si9UclN0NksxYitrRFVITWtyYTJWM2o1elJscHJOYm1BRElMYlE2NVMvejJnZ3lZODJ6TDBWWHNkUW5uTGRoU09LUXpXYkxXQURJTXBEZ09yZDNxOTU4UWlpZ3JHM3d1c1l6bU5iWG1ZNHNoK3RhbmdyVkoyRGd5OTdYOXYwQ21JTHp6SUhjajNaUFRMK2g2RE43bWhZUjVueEhJNG10S05iTENBbWFYOVFEREtGTzZDMzZoRHR0Y2RKUUZHTGVUV1JJdXBvY0dPajYyY0JiOVdxZXNMVEZ3Zm0wMDBNUWdxejlsRExXK0h2ZTM1SE05Rm5xdzlIZXRCa05zRjYrWWFldDhKZjAreGJrYTBYYllzcFNNSWcrNUQ4Lzhwc25xZFl2M3FzbzF2c1M5SHk2U2FHUTZBWUhQOW5nTGRxbGxWcGlJQjhSeWdSUWpHRWRPc2M0SzI2Ukd6azZZVHhqaGJERGR6WGNmd0M4RmJkOGdsUG5SNFk2MmdCQU0vYTFXeWJmWVZOeXlVQmlaRlBYWUNBSDcwR3ZGVzduRlJISDdFZ3lJOHVBZDZxWFo3TkFxb2lsRzZaS3VCSDE4NEQzcXBkQVFsSVdwMHA5ZEU3d0Z2MXE4WTYrbmpMb1BsKzlQNEM0SzBHUktTamdUeXl3dm9BZUt0QnhWV1U2WWhvcm92Y3ZBMTRxMEh0b3V3VTBGdy8ranpOOHcvY1Evemc2dWcyL1FBQUFBQkpSVTVFcmtKZ2dnPT0pIDJ4KTsKfQoKLmNhcHRpdmUtcG9ydGFsIC5pY29uIHsKICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUNBUUFBQUQvNUh2TUFBQUV5RWxFUVZSNFh1M2FmV2hWWlJ3SDhMdmRtalZTakt5UWJLYXppYTFrMXNMNll6WG9aZHkyOC9KOGY1WFJDN2h3RVZrMGhaUUNYWTJTaXBDZ1lnYXBwWE1RNVlhOUVMWnFvRU0zVkhxeEJrYXBtMjFqT0JXbWJMZnVkayswUGVldTIrbWMzems5NTE0V2JOOS96ejE4ZHM3NVBjL3ZQTStKVFA5Tlp6clQrYjlGbjJuR3hIcmFpbmI4Z2dFYVJnTG4wSU9qYU1Gcm9sb1UvU3NnMXl4QkxacHhCRDAwUXVmcE9EclJpRlg2SWlVS1hZOFhjUkFKc3J5QzNuUkw3RXBzUUovcjBWM2lTUzAvTUtVNEQ2dW9Rd0xZL1AxcTRpMGFZWDl4VnF5UFJIMWpicjhVdGZTYkU4Q0RxSUs2MHdCak9FYjdhRGYyNENCTy9nTjEyTGpKRjRkTStkUEFvTmdNZE5rVXhMRU5RbHRBRlZpSmRiVFdmRlRjYVJiaU1YeUNwRTFDTTR2UjV1QXpkd0IvaGN4Q0RJNWpYcUdGZUFhZE5Kb0dIMEVyVmhnM1lQczQ2QWQ5SmxkTlMzR0NBYkRQa0ZHRy9lSkdXa3RuM1BBNElVQjNveFB6R1k0QVhTQkxDU1RMZ2ZaeHgyTUxWMVE1dEZIZVd4V1FETmFsSHVsV2VvNHE5R1c0VlZTaG5nNUowS2daOCtia1lwY0VxSUprNkgyeTBDaVc0SDU4Z0dNWVFoeW44RGxxVVVsdFpJazFYRjAxa0tVVzV5aG0zZ1ZCM1E3Nk1EYVJ5WEJRUjFhSUlKbnlpNmpOWlVnczh1VFFmVWlHREpJeFo5T1BmeEV3aEFPMEY3MFRvNU5SNXNreHJzVWdXYUdEWkxRQ0hCSFZ4bkt4V2p3dWl2UlM3TWNLN25hMWtwVVprRXdVelhiRmlaZlpjVms4cEU2eFozdTM0QVY1VEZKVXNWMk9iQkhVMCtRNXd1MGVKMjFrcncrZUQ0bHpCdk9ZZjd3TGV5STVERWZMeDJsMURQcW9TWEs4U0l0aXMvZ200MW1sYWdvLzlQMlVBcGtsWkUwcGtIaGRBdjZZSWlCOE53RVFMOUh2VXdDa3paSHoxNWc1R3c4am1SMFF0c2l6dk9vQUNVakFJZGxPWlFVa0hwQ2dEcWQxZ3dSc2xoWDNkalpBbURzQndwQVRKUHREVVpQcUdGdXlVV1U0NTNJV3U3ZkZIWk92aGppUSthcWlEaGVRL2JKalhwZjJvUCtjYVJBK2NnUEpwa3hja2VaZmlJSE1nbWlyQzhnZWU0cnowcUY2S1YzSUpFaTg2UjhrZzBvYXpRNkl2MlV5b2lhanQ0eC9xSjFCZmNDZTZKUVpDL0JRODJYdkRMWUhKUFVFSzN0bVlIVG1sb3RwYnpDU3dzRG9tRHBjK21ENlZnSEVUQjNNNU9yMmM1eFVCdkdUcTdQOThEakJFanFyQk9MYkQyZURaajdvK2FKZGhuaG9vSnhVYmQvcjFjSit5bDFtSk1NQkdXVVNQNnpsZXpUNVNJaXJHTkthY0VCNGJ3S0VYY3hyRU43Z1RoVUdTQ3RJTGFaWE1DK0tpR04rNWtIWUlUbmRrU2o3S28zR1RJUE1FdnRKRkt0OUxEWWdpWnRWUVRMbnFVUFVPSmNWOEtXRTk1ZGY0bTg1cHMwK0NRL2lnNjh4TjcybHNjRjR5dmVDRlRhNWc5QVhuRFI1bGN6QzFKcis0VWh1Q3NBdjZZbEgzRURVUkZiZ1BDRzNZMmFsdG1QRzlGSUo4TG5vT1lMYlhORHpnaStNeXZrcWlpOXNJdW9jQUhaWnVOOXRBS2k2aG5haUJ3a2E5Zjk0MnkycnpGY3V0NHRaT08rM3I1SjZ4Y1ZtWUVlS2M5eGxQdUMzRmhESHluQkE2TFE1R0dBMmZ0bk5sODJScURySURnYjFaVTRBbnh6VVRjN3JhRGVXaHdQQ1VXMEJBL0M3Z1llUDljV3FJTFNVWDhZQWdteHhJb0YzdFlML0RrSzlZL3pud204Q0k0bHZSTFYrZFZBUVRoT3BPUGh0OHArb2daNFc5L2ppakZGRDVlWGhXUGdQQ1hqTWgvcFNWWUQ2cHhheXdQR09LT0lCV2ZrWWhYWUtvemd2eTUvcllCdmE4YXZ6Y3gxOXNTcmdUMmpKbmpKTVZNaVVBQUFBQUVsRlRrU3VRbUNDKSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUNBUUFBQUJOVHlvekFBQUtTVWxFUVZSNFh1MmRlMndVeHgzSGZ4aGo1ZGtTSWdPaHBJQ0RXaWxIMUFqVEdFd2RuYUNOZGJpKzIvbitFR2xLQXZTQm9wUklLYStLU0M1dENVK1pvS2FLUTlXU05paHFnc1hEcVJNa0hCUkJERGkwNFE5a0dRRkc0SkFFcUYxVElrd1NQK0JjakJYSzd6QzM1NTFaZTN6ZHovN05uZmZEM3V6OEhqTkQvaEFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFT0FNamVXcE9WakY1ZGpGQjdnV0RXam1ObTVETXhxNGxnOWdGNWRqbFpvVHkzT0drbWNldXpOV29CYWlERHU1RG1mNE0yNi9lbjJHTTF5SG5TaFRDMk1GajkxSk5oRyt5NGx3S1ZlamtUdFR2OURJMVZ6cVJNSjNVYW9NeGxTMUJvZjVpdXVuWDhGaHRRWlRhVEQxSjZFc05VMnRSQTA2dU5QN2hRN1VrQ3V4QjNrRE4vWDYwNXQ0USt4QjZnOHdHV1Y4bmp2TlhKUVVub0g5T3ArTy9UeUQrZzVuTEVwd1hBandVUkNLK0pDUjd6aUVJdktmNkNSVUlDNEUrQ2lJYzdEVDVMZGdKK2VRZjhRS3VFb0k4RmRRQmkvakw0MS8wNWU4akRMSVBNNTByaFlDZkJhRSsvQ2VpNERMK0NlMm9neS80V2U0aTJmd0c1UmhLMy9JbDVOTHdudTRqMHlDMGRncUJmZ3ZLS21lSS93U29wR3YwUzM0L3RjUnhSLzRTREpGWklwd3BsckNMZHpaNTRMRzlEaW5hbEcvTHg1SDErQVFQNGROcU9TRGZJb3ZYYjFPOFVGVVloTS94Nkd2UmpCK2lTLzFOUC9DR0RJREh1VTZEUUZhWTVDYWdsWnhXMmQ1V2RFOVJNVjNxRG44T3A5TEt2d2N2NjdtVExtZHFPZ2VQSSt6UWsrcm1tTG8yZUcxT3U4ci9iZVk4K1IxQVcxNFBwUkZGTWxXdjBOenF0THhiL3cya2swVXlzTHozUGFWSU9kSk1rSHNmbzJwbWJIWFBGWjF6MkE0UlBURGIvQkcvcUxYNnIvQUs5RlJSQnpxbmsxaEZaa0FSZUwvcWQ4RTBTQzhpWkp3SmhHZXdnWFArdi9UOWRTRU0xR0NOMmtRYVpPQmRUby9MZk9oaGhxT0N0M1B4dzQxM0ZENGlTMUNnQVdDc052RU4yQTM2Uk85Vy93eGxnZ3EvdVl0MHlqSCtEVzFSaTFVczY5ZUM5VWEvSldQQ1MxbVgrMXF1QWdMclJGRUZNdm5Obkc3Y2J5RGVSaDlpMm50UEx5VE1FaTBZU3JwZ2pHbzUwNTdCRWt3NzRhYi9VdDNoaWVTalpuOE12YnlFVzdpZG03aUk5akxMMk5tSlB0YTl1alYvMGxWUHpIdzlBZzlWZ2lTY0dsM1pzZDVnQ2gzaVBNRWFzUlRJcCt2R3ZXamNLYnpBUFoxNmNGNkEyT1ArSEZaS1lneWVMdGFRaG1Vd2MveXB5bEkvNVNmRFdkaU1XK25ETzAzbHhpYUxSTWs0UkErU0YwN1B1QVFhWk1oWHV5V0M4S09YcXJmVHJwZ0hYZmFMVWdXZkhvMUdCelNMditnQ0hIYkJVbG1qTVJIcWVuQlJ6Tkdhb2VrSXVheVdKQXNBTjBRbDdWakwxYmdhV2NXbnNZTGVKL2JyK3U1b0YzdUNXZUtpTjFxUVJJbjNEWEhRVE4rWFhRUENRcUg4ZkpyeGFnMkoweTY4Rm9od0hKQkVqVWJsV280VVN3ZnIrQW90M0FManFLc094VVdIY0Z2cTlrR3NvV0lXeVBvRW5tZ1MwU2lhRlJHUjVqS0Y5Ylo4L3p3S2ZJQTN1OUpOdmFTQ1hpcFJYbzZzWU04b0NiMGtKSy9wQ1lZS2VSd2l3MWlkSU5KUEg2VDZzZkpCTmhta3g2Y0xiNkRQS0plRktKZk5GVWw3YlRwVWo4bDd3em1QZGNGN1RIVURjVFZOdW5CSnRJaWtvMVB1dlRnazBpMm9SWUVtL1R3bjNLSGtDYk9JMmhGcS9NSW1ZR3JiSkdEai9FVUdVSE5WL09OOWZkWW9LWUY5ZGlDSDRkdkkvdEFoUVdoZzcwNFl4RVBCQ1VCSmNrRkJJTHFBMEZKd09Ua0FnSkJaWUdncE1VZFBoOElTb0thbGx4QUlHaWxiTTdIdmtDUUFEVkN3S0xDWVh3c0VIVERnaVc1SXNkNStOcTA4Vi9wSjhoNVdLNGtTbkd4bFJNUi82eTV1MWZQeWVWTDZTYUlCc2xhbnhPaFZPQlNJV2piRFF1Tk9xd1dwSjh2TGZXUUpGTUw2RHI0ZWJvSlVndUVvR3BLQmRubEp6UC9XR0ZhRHk3MHE2QUpzanN4cGFXMmN1Qkt6T0x4YTRZRnZVLzlTTzRRT1d5a3NIdzRsaWNFMWZmd2tlOGFGTlNHNzlvVWxNZnl5QTAxVjl6QTJ6MDJBQjgySXVjYy9zNGg2bWRrU1ZyTklUZXdXanhCNjZrSG9xUHdjYm9FRWxndjduZTF1OUZ5WVhUK0xmdi9McVNISURWZjNFRjVieXNaaGNuNmJ0SkJFQmNLUVZXOWpNT1NMU2h6bmtBOERaNmdLV0pJcVhFM1dpdEc5WWNvQ2ZqVndCY1VlMGpjUVMyNWdRWVJuWXpWelR6YVg3MFJUMUFEdVNIRE4zV3ZhMC83V3dOYmtMbzNJVFIzUXc2OW9TeHlZY3J0ZkhBZ0N3cGx5WW1ySVVHeVo0SlBwSmtnL1orWUpEcWVtOUx2SjZZL1NNc0k3b3MwRzZUMVgvTVNGZU1yL3hldmVUNGdCT1ZUeXVBWFBoZUl6bUVyNXhnWGxDOEVIU0Ezc0V1R0dwYjE0N2VvYi9rWmFtQ1hUckRxemlCK3cyOUZxUFEzV05WTmQ3aS9OUGY0cktqSjEzVEhLbmVqYzF3U1pxNHBXNzhYTHZpYk1QT1Fjdld3c3V5TXJZTGNVNjRhU2Z2VVVkL0J4WUVoS0hjSVg1WkpleTlsSHcrb0gzQzdIWUwweXo3dWhVTlBxTGxXQ05JdkhMcVhubTFyQS9XejlLelJ2T0FGL05rQ1Fmck5DKzd0THhwTGdYZGFJRWkzL2NXOWdZbzhJQmIzV3lxSUY4bUV2ZGNXdkgya1FYUUVHbXdWSkZzTDFVcnZUWnc1V29xK3plZHRGTVE1VXJ5YTVyME5lRGxwb2I3SFgxb29hTGtRZEQ2VTViMlIvQVJwZ3BsOHhUWkJNcE9PTXEybENMRjgwZ1MvdEV0UUxGOXF4MlRxSFhJZmNXd21iZXdTaE0xQ3ozSE5lVEE2aXNlbGs2RGljWEt1aHhMOUJYVWIwMGtRL2lqMHhKMngya3N5MFJvZGxTNkNvcVBRS2dSVm1GblV1eUZkQlBFR3FUdzZ5Y2l5Y0h5T01la2dDR01TaXB4VjVqWVdlSXMwOEczaCtIRit3NW1WK2pRdnNSOGxWbUJ3YXdvVTJTTklYampKVENtQW9nVEIxV1kzTnpubGZZbS8vNnNZc2Q1dEo4M3diWHhLQ25LbWt4Nkp4MEJnQlhrRS8vQmJrSHNkRHk5SVBkaHFmSU1sZEhnNEtVQ2tjbjIrT0ZuREpqcmsrSVhScEk5YUlxM3o2Y0poNUFFbnR5OEU0YVFvVk1sdEFVOUxtV3FKMFUzZTlPdmplTGN2RkRtenFFZFFtU0N6THB4SkFvUGJCR0t4dHlvVVd2MFhoTDlSRDJDeDFJTTRIaVdCMlkwbTI3Mk4vbXAySHdnNjN1UGJPTEdRdVpZRXhyY3F4VVZNSkEvZ1o5enVkdzhSSllDSmlhVnc3SGY5ZWVsdmRvdkc2SGlQKzRKODZLK2l4QlpUTkVvOWFJN2RUKzdvYjVlTWt4NDNHUjdrUlBoVkhNVkZ2c0tYL1JVMFkyVGkxQkJ4bDNqQTZJYmJ0VUtSSlNHSTBGT2JxQS9yeUFXalc3YmpaSFM4cllLaTQzSHlKajFiWE1JUjg1ditveEVUYlJTRWlXaThTYzl1dDZqZmwyTWpjTkdaYnBzZ1ozb1BUVnlIb25lVEJqb0hqN1R6SXBzRThhS2JKeE9vMXpyMVNmL29HbFFXRHJORDBQV2dRdWpSeUljYU8vem90SnFpSWNqUDY1REcwMlB5K0N4MFlFWDROdHNFWWJmTzJHUCtBTFpUS0xKSkVMYm92N25NSCtIM0ZzYllJQWh4ck5PWTkvaDVDQ1ErNXczUlVmMHJDTTI2UVlYUHg0aWlsVGNXaitzdlFkaHZJaVQxL1NCYWRHQnpMTCt2QlNIT2EwMG1OUHcveXZnRUwrZWNQaE5VSjdPRjlqeEhTNU1mTVlGOXZNaDVtQWI1S3FpRmw0WXp5Vll3R3R0U0dEcTNxUVZxUXU0UTg0S3dEYVBKRHZRUDVFY0g2dmx0ckRlbXAxcUV6SFlUSytqakF3T3FZZ1UwMEloT1FvWC8yNzRqamdyUjN6UGdkc1l2UWIxdmN1cFI0b3lsZ1E4bW84eHdiOGQ1bEdFeXBST2hMRFZOclVTTjNuYW42RUNOV3FtbWhiSW9YUW5mNVVTNGxLdlIyQ3N4alZ6TnBVNUVMRmhLZDV5aHNUdzFGNnU1bkt0UXc3Vm9RRE8zY1J1YTBjQzFxT0VxTHNkcU5UZVc1d3dsYS9ndnBYekplbzdHVG5jQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKfQoKLmNoZWNrYm94ZXMgewogIGZsZXg6IDAgMCAyNHB4Owp9CgouY2hlY2tib3ggewogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50OwogIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBkaXNwbGF5OiBibG9jazsKICBoZWlnaHQ6IDE0cHg7CiAgbGVmdDogMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IDA7CiAgdG9wOiAzcHg7CiAgd2lkdGg6IDE0cHg7Cn0KCi5jaGVja2JveDo6YmVmb3JlIHsKICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsKICBib3JkZXI6IDJweCBzb2xpZCB3aGl0ZTsKICBib3JkZXItcmlnaHQtd2lkdGg6IDA7CiAgYm9yZGVyLXRvcC13aWR0aDogMDsKICBjb250ZW50OiAnJzsKICBoZWlnaHQ6IDRweDsKICBsZWZ0OiAycHg7CiAgb3BhY2l0eTogMDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAzcHg7CiAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTsKICB3aWR0aDogOXB4Owp9Cgouc3NsLW9wdC1pbiAuY2hlY2tib3ggewogIGJvcmRlci1jb2xvcjogIzY5Njk2OTsKfQoKLnNzbC1vcHQtaW4gLmNoZWNrYm94OjpiZWZvcmUgewogIGJvcmRlci1jb2xvcjogIzY5Njk2OTsKfQoKaW5wdXRbdHlwZT1jaGVja2JveF06Y2hlY2tlZCB+IC5jaGVja2JveDo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9CgpAbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHsKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgcGFkZGluZzogMCAxMCU7CiAgfQoKICAjZXJyb3ItZGVidWdnaW5nLWluZm8gewogICAgb3ZlcmZsb3c6IGF1dG87CiAgfQp9CgpAbWVkaWEgKG1heC1oZWlnaHQ6IDYwMHB4KSB7CiAgLmVycm9yLWNvZGUgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA0MjBweCkgewogIGJ1dHRvbiwKICBbZGlyPSdydGwnXSBidXR0b24sCiAgLnNtYWxsLWxpbmsgewogICAgZmxvYXQ6IG5vbmU7CiAgICBmb250LXNpemU6IC44MjVlbTsKICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICBtYXJnaW46IDA7CiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogICAgd2lkdGg6IDEwMCU7CiAgfQoKICAjZGV0YWlscyB7CiAgICBtYXJnaW46IDIwcHggMCAyMHB4IDA7CiAgfQoKICAjZGV0YWlscyBwOm5vdCg6Zmlyc3Qtb2YtdHlwZSkgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CgogICNkZXRhaWxzLWJ1dHRvbiB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB3aWR0aDogMTAwJTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAwIDUlOwogIH0KCiAgI2V4dGVuZGVkLXJlcG9ydGluZy1vcHQtaW4gewogICAgbWFyZ2luLXRvcDogMjRweDsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiAzMHB4OwogIH0KfQoKLyoqCiAqIE1vYmlsZSBzcGVjaWZpYyBzdHlsaW5nLgogKiBOYXZpZ2F0aW9uIGJ1dHRvbnMgYXJlIGFuY2hvcmVkIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbi4KICogRGV0YWlscyBtZXNzYWdlIHJlcGxhY2VzIHRoZSB0b3AgY29udGVudCBpbiBpdHMgb3duIHNjcm9sbGFibGUgYXJlYS4KICovCgpAbWVkaWEgKG1heC13aWR0aDogNDIwcHgpIGFuZCAobWF4LWhlaWdodDogNzM2cHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7CiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIGJvcmRlcjogMDsKICAgIG1hcmdpbjogOHB4IDAgMDsKICB9CgogIC5zZWNvbmRhcnktYnV0dG9uIHsKICAgIC13ZWJraXQtbWFyZ2luLWVuZDogMDsKICAgIG1hcmdpbi10b3A6IDE2cHg7CiAgfQp9CgovKiBGaXhlZCBuYXYuICovCkBtZWRpYSAobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQKICAgICAgIChtaW4taGVpZ2h0OiA0MDFweCkgYW5kIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjpwb3J0cmFpdCksCiAgICAgICAobWluLXdpZHRoOiA0MjFweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQKICAgICAgIChtYXgtaGVpZ2h0OiA0MjBweCkgYW5kIChvcmllbnRhdGlvbjpsYW5kc2NhcGUpIHsKICBib2R5IC5uYXYtd3JhcHBlciB7CiAgICBiYWNrZ3JvdW5kOiAjZjdmN2Y3OwogICAgYm90dG9tOiAwOwogICAgYm94LXNoYWRvdzogMCAtMjJweCA0MHB4IHJnYigyNDcsIDI0NywgMjQ3KTsKICAgIGxlZnQ6IDA7CiAgICBtYXJnaW46IDA7CiAgICBtYXgtd2lkdGg6IDczNnB4OwogICAgcGFkZGluZy1sZWZ0OiAyNHB4OwogICAgcGFkZGluZy1yaWdodDogMjRweDsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIHotaW5kZXg6IDI7CiAgfQoKICBib2R5LnNhZmUtYnJvd3NpbmcgLm5hdi13cmFwcGVyIHsKICAgIGJhY2tncm91bmQ6IHJnYigyMDYsIDUyLCAzOCk7CiAgICBib3gtc2hhZG93OiAwIC0yMnB4IDQwcHggcmdiKDIwNiwgNTIsIDM4KTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXgtd2lkdGg6IDczNnB4OwogIH0KCiAgI2RldGFpbHMsCiAgI21haW4tY29udGVudCB7CiAgICBwYWRkaW5nLWJvdHRvbTogNDBweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA0MjBweCkgYW5kIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpLAogICAgICAgKG1heC13aWR0aDogNzM2cHgpIGFuZCAobWF4LWhlaWdodDogNDIwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkgewogIGJvZHkgewogICAgbWFyZ2luOiAwIGF1dG87CiAgfQoKICBidXR0b24sCiAgW2Rpcj0ncnRsJ10gYnV0dG9uLAogIGJ1dHRvbi5zbWFsbC1saW5rIHsKICAgIGZvbnQtZmFtaWx5OiBSb2JvdG8tUmVndWxhcixIZWx2ZXRpY2E7CiAgICBmb250LXNpemU6IC45MzNlbTsKICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICBtYXJnaW46IDZweCAwOwogICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRleigwKTsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgcGFkZGluZy1ib3R0b206IDhweDsKICAgIHdpZHRoOiAxMDAlOwogIH0KCiAgLmVycm9yLWNvZGUgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogICNkZXRhaWxzIHsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBoZWlnaHQ6IGF1dG87CiAgICBtYXJnaW46IDA7CiAgICBvcGFjaXR5OiAxOwogICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpOwogIH0KCiAgI2RldGFpbHMuaGlkZGVuLAogICNtYWluLWNvbnRlbnQuaGlkZGVuIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgaGVpZ2h0OiAwOwogICAgb3BhY2l0eTogMDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICB0cmFuc2l0aW9uOiBub25lOwogIH0KCiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIHBhZGRpbmctYm90dG9tOiAxNnB4OwogICAgcGFkZGluZy10b3A6IDE2cHg7CiAgfQoKICBoMSB7CiAgICBmb250LXNpemU6IDEuNWVtOwogICAgbWFyZ2luLWJvdHRvbTogOHB4OwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgbWFyZ2luOiAyNHB4IGF1dG8gMTJweDsKICAgIHBhZGRpbmc6IDAgMjRweDsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciBwIHsKICAgIGZvbnQtc2l6ZTogLjk1ZW07CiAgICBsaW5lLWhlaWdodDogMS42MWVtOwogICAgbWFyZ2luLXRvcDogOHB4OwogIH0KCiAgI21haW4tY29udGVudCB7CiAgICBtYXJnaW46IDA7CiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDEwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7CiAgfQoKICAuc21hbGwtbGluayB7CiAgICBib3JkZXI6IDA7CiAgfQoKICAuc3VnZ2VzdGVkLWxlZnQgPiAjY29udHJvbC1idXR0b25zLAogIC5zdWdnZXN0ZWQtcmlnaHQgPiAjY29udHJvbC1idXR0b25zIHsKICAgIGZsb2F0OiBub25lOwogICAgbWFyZ2luOiAwOwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA0MDBweCkgYW5kIChvcmllbnRhdGlvbjpwb3J0cmFpdCkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiAxNDVweDsKICB9Cn0KCkBtZWRpYSAobWluLWhlaWdodDogMjk5cHgpIGFuZCAob3JpZW50YXRpb246cG9ydHJhaXQpIHsKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZy1ib3R0b206IDE2cHg7CiAgfQp9CgpAbWVkaWEgKG1pbi1oZWlnaHQ6IDQwNXB4KSBhbmQgKG1heC1oZWlnaHQ6IDczNnB4KSBhbmQKICAgICAgIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgKG9yaWVudGF0aW9uOnBvcnRyYWl0KSB7CiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMjRweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiA2NHB4OwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA0ODBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQKICAgICAgIChtYXgtaGVpZ2h0OiA3MzZweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpLAogICAgICAgKG1pbi1oZWlnaHQ6IDMzOHB4KSBhbmQgKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1heC13aWR0aDogNzM2cHgpIGFuZAogICAgICAgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAuaWNvbiB7CiAgICBtYXJnaW4tYm90dG9tOiAyNHB4OwogIH0KCiAgLm5hdi13cmFwcGVyIHsKICAgIHBhZGRpbmctYm90dG9tOiAyNHB4OwogIH0KfQoKQG1lZGlhIChtaW4taGVpZ2h0OiA1MDBweCkgYW5kIChtYXgtd2lkdGg6IDQxNHB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tdG9wOiA5NnB4OwogIH0KfQoKLyogUGhhYmxldCBzaXppbmcgKi8KQG1lZGlhIChtaW4td2lkdGg6IDM3NXB4KSBhbmQgKG1pbi1oZWlnaHQ6IDY0MXB4KSBhbmQgKG1heC1oZWlnaHQ6IDczNnB4KSBhbmQKICAgICAgIChtYXgtd2lkdGg6IDQxNHB4KSBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkgewogIGJ1dHRvbiwKICBbZGlyPSdydGwnXSBidXR0b24sCiAgLnNtYWxsLWxpbmsgewogICAgZm9udC1zaXplOiAxZW07CiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDsKICAgIHBhZGRpbmctdG9wOiAxMnB4OwogIH0KCiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogODBweDsKICAgIHdpZHRoOiA4MHB4OwogIH0KCiAgI2RldGFpbHMtYnV0dG9uIHsKICAgIG1hcmdpbi10b3A6IDI4cHg7CiAgfQoKICBoMSB7CiAgICBmb250LXNpemU6IDEuN2VtOwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMjhweDsKICB9CgogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAyOHB4OwogIH0KCiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHAgewogICAgZm9udC1zaXplOiAxLjA1ZW07CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZzogMjhweDsKICB9Cn0KCkBtZWRpYSAobWluLXdpZHRoOiA0MjBweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQKICAgICAgIChtaW4taGVpZ2h0OiAyNDBweCkgYW5kIChtYXgtaGVpZ2h0OiAyOThweCkgYW5kCiAgICAgICAob3JpZW50YXRpb246bGFuZHNjYXBlKSB7CiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogNTBweDsKICAgIHdpZHRoOiA1MHB4OwogIH0KCiAgLmljb24gewogICAgcGFkZGluZy10b3A6IDA7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMTZweDsKICB9CgogIC5uYXYtd3JhcHBlciB7CiAgICBwYWRkaW5nOiAwIDI0cHggOHB4OwogIH0KfQoKQG1lZGlhIChtaW4td2lkdGg6IDQyMHB4KSBhbmQgKG1heC13aWR0aDogNzM2cHgpIGFuZAogICAgICAgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQKICAgICAgIChvcmllbnRhdGlvbjpsYW5kc2NhcGUpIHsKICAjZGV0YWlscy1idXR0b24gewogICAgbWFyZ2luOiAwOwogIH0KCiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHsKICAgIG1hcmdpbi1ib3R0b206IDcwcHg7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogICNleHRlbmRlZC1yZXBvcnRpbmctb3B0LWluIHsKICAgIG1hcmdpbi10b3A6IDA7CiAgfQp9CgovKiBQaGFibGV0IGxhbmRzY2FwZSAqLwpAbWVkaWEgKG1pbi13aWR0aDogNjgwcHgpIGFuZCAobWF4LWhlaWdodDogNDE0cHgpIHsKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luOiAyNHB4IGF1dG87CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luOiAxNnB4IGF1dG8gMDsKICB9Cn0KCkBtZWRpYSAobWF4LWhlaWdodDogMjQwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksCiAgICAgICAobWF4LWhlaWdodDogNDgwcHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSwKICAgICAgIChtYXgtd2lkdGg6IDQxOXB4KSBhbmQgKG1heC1oZWlnaHQ6IDMyM3B4KSB7CiAgYm9keTpub3QoLm9mZmxpbmUpIC5pY29uIHsKICAgIGhlaWdodDogNTZweDsKICAgIHdpZHRoOiA1NnB4OwogIH0KCiAgLmljb24gewogICAgbWFyZ2luLWJvdHRvbTogMTZweDsKICB9Cn0KCi8qIFNtYWxsIG1vYmlsZSBzY3JlZW5zLiBObyBmaXhlZCBuYXYuICovCkBtZWRpYSAobWF4LWhlaWdodDogNDAwcHgpIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSwKICAgICAgIChtYXgtaGVpZ2h0OiAyMzlweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSwKICAgICAgIChtYXgtd2lkdGg6IDQxOXB4KSBhbmQgKG1heC1oZWlnaHQ6IDM5OXB4KSB7CiAgLmludGVyc3RpdGlhbC13cmFwcGVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgbWFyZ2luLWJvdHRvbTogMDsKICB9CgogICNkZXRhaWxzIHsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgb3JkZXI6IDA7CiAgfQoKICAjbWFpbi1jb250ZW50IHsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgb3JkZXI6IDA7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgZmxleDogMCAxIGF1dG87CiAgICBtYXJnaW4tdG9wOiA4cHg7CiAgICBvcmRlcjogMTsKICAgIHBhZGRpbmctbGVmdDogMDsKICAgIHBhZGRpbmctcmlnaHQ6IDA7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB3aWR0aDogMTAwJTsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiAyMzlweCkgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHsKICAubmF2LXdyYXBwZXIgewogICAgcGFkZGluZy1sZWZ0OiAwOwogICAgcGFkZGluZy1yaWdodDogMDsKICB9Cn0KCiAgLyogQ29weXJpZ2h0IDIwMTMgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4gKi8KCi8qIERvbid0IHVzZSB0aGUgbWFpbiBmcmFtZSBkaXYgd2hlbiB0aGUgZXJyb3IgaXMgaW4gYSBzdWJmcmFtZS4gKi8KaHRtbFtzdWJmcmFtZV0gI21haW4tZnJhbWUtZXJyb3IgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi8qIERvbid0IHVzZSB0aGUgc3ViZnJhbWUgZXJyb3IgZGl2IHdoZW4gdGhlIGVycm9yIGlzIGluIGEgbWFpbiBmcmFtZS4gKi8KaHRtbDpub3QoW3N1YmZyYW1lXSkgI3N1Yi1mcmFtZS1lcnJvciB7CiAgZGlzcGxheTogbm9uZTsKfQoKI2RpYWdub3NlLWJ1dHRvbiB7CiAgLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDA7CiAgZmxvYXQ6IG5vbmU7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBtYXJnaW4tdG9wOiAyMHB4Owp9CgpoMSB7CiAgbWFyZ2luLXRvcDogMDsKICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7Cn0KCmgxIHNwYW4gewogIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KCmgyIHsKICBjb2xvcjogIzY2NjsKICBmb250LXNpemU6IDEuMmVtOwogIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgbWFyZ2luOiAxMHB4IDA7Cn0KCmEgewogIGNvbG9yOiByZ2IoMTcsIDg1LCAyMDQpOwogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKLmljb24gewogIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgouaWNvbi1nZW5lcmljIHsKICAvKioKICAgKiBDYW4ndCBhY2Nlc3MgY2hyb21lOi8vdGhlbWUvSURSX0VSUk9SX05FVFdPUktfR0VORVJJQyBmcm9tIGFuIHVudHJ1c3RlZAogICAqIHJlbmRlcmVyIHByb2Nlc3MsIHNvIGVtYmVkIHRoZSByZXNvdXJjZSBtYW51YWxseS4KICAgKi8KICBjb250ZW50OiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBRWdBQUFCSUFRTUFBQUJ2SXlFRUFBQUFCbEJNVkVVQUFBQlRVMU9vYVNmL0FBQUFBWFJTVGxNQVFPYllaZ0FBQUVOSlJFRlVlRjd0emJFSkFDRVFSTkdCTGVBYXNCQ3phMmxMRUd4MEN4RkdHOWhCTUREeFJ5LzcyTzlGTW5JRmFwR3lsc3UxZmdvQmRrWGZVSExyUWdkZnJsSk4xQmRZQmpRUW0zVUFBQUFBU1VWT1JLNUNZSUk9KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUFRTUFBQURkaUhEN0FBQUFCbEJNVkVVQUFBQlRVMU9vYVNmL0FBQUFBWFJTVGxNQVFPYllaZ0FBQUZKSlJFRlVlRjd0MGNFTmdEQU1ROUZ3WWd4RzZXanBhSXpDQ0F4UXhWZ2dGdURpQ3ZsTE9lUmRIUjl5empuY0hWb3EzbnB1K3dRVXJVdUpIeWxTVG1CYWVzcEp5SlFvT2JVZXl4RFFiM2JFbTVBdTgxYzBwU0NEOEhZQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKfQoKLmljb24tb2ZmbGluZSB7CiAgY29udGVudDogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVnQUFBQklBUU1BQUFCdkl5RUVBQUFBQmxCTVZFVUFBQUJUVTFPb2FTZi9BQUFBQVhSU1RsTUFRT2JZWmdBQUFHeEpSRUZVZUY3dHlNRUp3a0FRUnVGZjVpcE1LeFlRaUozWjJuU3dyV3dCQTArRFFaY2R4RU91ZWFlUHA5K2RRWkZCN0dwVWNVUlNWVTY2eVZORmo2TEZJQ2F0VGhaQjZyL2tvL3BiUnBVZ2lsWTBDYnc1c05tYjl0eEdYVUt5dUg3ZVYyNXgzOUR0SlhVTlBRR0p0V0ZWK0JUL1FBQUFBQUJKUlU1RXJrSmdnZz09KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSkFBQUFDUUJBTUFBQUFWYVArTEFBQUFHRkJNVkVVQUFBQlRVMU5OVFUxVFUxTlBUMDlTVWxKU1VsSlRVMU84QjdERUFBQUFCM1JTVGxNQW9BclZLdlZnQnVFZEtnQUFBSjFKUkVGVWVGN3QxVEVPd3lBTVFORzBRNi9VRStSTVhEOWQvdEM2d29tSUZTTDlQK01uQVlPWGVUSXpNek16TXpNemF6OEo5Umk2SG9JVG11SFhoSVNFOG5FaDl5eERoNTVhQ0VVb1RHYmJRd2pxSHdJa1JBRWlJYUcwKzBBQTlWQk1hRTg5Um9nZW93dzkzNk1RcldkQnI0R04vejBJQWRRNm5RL0ZJcFJYRHdIY0ErSklKY1Fvd1FBbEZVQTBNZlFwWExsVlFma3pSNGlnUzZFTmprbm0vd2lhR2hzQUFBQUFTVVZPUks1Q1lJST0pIDJ4KTsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5pY29uLWRpc2FibGVkIHsKICBjb250ZW50OiAtd2Via2l0LWltYWdlLXNldCgKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSEFBQUFCSUNBTUFBQUFaRjRHNUFBQUFCbEJNVkVWTWFYRlRVMU9YVWo4dEFBQUFBWFJTVGxNQVFPYllaZ0FBQVNaSlJFRlVlQUhkMTFGcTdqQU1SR0dmL1cvNlBvV0I2N1lNcXY1RHlid0cvQ0ZqUnVSOEpCdzMrQnlpUmpnVjlXL1RKMzFQMHRCZkM2K2NqMWhhVUZYS0htVkpvNXdQOThXd1EwWkNiZlVjNkxRNlZ1VUJ6MzFpa0FEa0xNa0RyZlVDNHJSNlFHVytnRjZyeDdOYUhXQ2oxWS9XNmxmNEw3dXR2Z0JTdDNyQkZTUy9YQk1QVUlMY0pJTkhDQldZVWZwV240TkJpMVpmdWRJYzNyZjYvTkdFdkVBK0FzWVRKb3ptWGVtalhlTFpBb3YrbW5rTjJIZnpYcE1TVlFEbkd3Kys1N3FOSjREMXhpdEEyc0orVkFXTXlnU0VhWWYybVlQVGpaZmsySzh3bVA3SExJSDVNZzQvcFArUEVjRHpVdkRNdllicy8yTld3UE81dkJkTVpFNEVFNVVUUUxpQkZEYVVsVERQQlJvSjlIZEFZSWtJbzA2b2czQk5YdEN6eTd6QTFhWGs1eCt0SkFScTYzZUF5Z0FBQUFCSlJVNUVya0pnZ2c9PSkgMXgsCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU9BQUFBQ1FBUU1BQUFBcndmVmpBQUFBQmxCTVZFVk1hWEZUVTFPWFVqOHRBQUFBQVhSU1RsTUFRT2JZWmdBQUFZZEpSRUZVZUY3RjFFRnF3ekFVQk5BUkFtVmowRlplNVFvQkg2QlgrZG40R2xZMlBZTnpHeC9BMEN2a0NJSnV2SXJhS0pLYmdCdnpmMmc2MndlREdEN0NZZ2dwZkZSZWlzNEowZXk5RUdGSWlFUVFvakZTbEE5a1NJaXFkMEtrRmpLc2V3Z1JiU3RFTjE5bXhVUFR0bVc5SFEvaDZ0eXFOUThObFNNWmR6eUU2cWtvRTB0clZZR0ZtMG4xV1llQmhkdXp3YndCQzd2b1Mrdkl4ZmVNamVhaUx4c01NdFFOd01QdHVldytEanpjVEhrOFlNZkRrbkVjSVVPdGYybFZmZ1ZIM0s0WHY1UFJZQVhSVk10SXRJSjNyZmFDSVZuOURzVEgyTnhpc0FWUmV4MkhoM2hYKy9tUlVSMDhiQXdQRVlzSTUxWnhXSDRRMFNwaWNRUlhleUVhSXVnNDhGRWRlZ0FSZk16L3RBRFZzUmNpd1RBeFczMDhlaG1DMmdMcmFDK1lDYlYzUW9UWmV4YSt6ZWdBRVc1UGhoZ1lmbWJ2SmdjUnFuZ0dCeU9TWGRGSmNMazJKZURQRU4wa3hlMUpoSXQ1RmlGQSt3K0l0TUVMc1V5UEYySWFKNGFJTHFiNEZieFB3aEltd2o2SmF1S2dEVUNZYXhtWUlzZDRLWGRNaklDOUl0QjVCbjRCTlJ3c0cwWE0ybndBQUFBQVNVVk9SSzVDWUlJPSkgMngpOwogIHdpZHRoOiAxMTJweDsKfQoKLmVycm9yLWNvZGUgewogIGRpc3BsYXk6IGJsb2NrOwogIGZvbnQtc2l6ZTogLjhlbTsKfQoKI2NvbnRlbnQtdG9wIHsKICBtYXJnaW46IDIwcHg7Cn0KCiNoZWxwLWJveC1pbm5lciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTsKICBib3JkZXItdG9wOiAxcHggc29saWQgI0VFRTsKICBjb2xvcjogIzQ0NDsKICBwYWRkaW5nOiAyMHB4OwogIHRleHQtYWxpZ246IHN0YXJ0Owp9CgouaGlkZGVuIHsKICBkaXNwbGF5OiBub25lOwp9Cgojc3VnZ2VzdGlvbiB7CiAgbWFyZ2luLXRvcDogMTVweDsKfQoKI3N1Z2dlc3Rpb25zLWxpc3QgcCB7CiAgLXdlYmtpdC1tYXJnaW4tYWZ0ZXI6IDA7Cn0KCiNzdWdnZXN0aW9ucy1saXN0IHVsIHsKICBtYXJnaW4tdG9wOiAwOwp9Cgouc2luZ2xlLXN1Z2dlc3Rpb24gewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBwYWRkaW5nLWxlZnQ6IDA7Cn0KCiNzaG9ydC1zdWdnZXN0aW9uIHsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KCiNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CgogIGNvbG9yOiAjOEY4RjhGOwoKICAvKiBOb3QgZG9uZSBvbiBtb2JpbGUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuICovCiAgdGV4dC1zaGFkb3c6IDAgMXB4IDAgcmdiYSgyNTUsMjU1LDI1NSwwLjMpOwoKfQoKW2pzY29udGVudD1ob3N0TmFtZV0sCltqc2NvbnRlbnQ9ZmFpbGVkVXJsXSB7CiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDsKfQoKI3NlYXJjaC1jb250YWluZXIgewogIC8qIFByZXZlbnRzIGEgc3BhY2UgYmV0d2VlbiBjb250cm9scy4gKi8KICBkaXNwbGF5OiBmbGV4OwogIG1hcmdpbi10b3A6IDIwcHg7Cn0KCiNzZWFyY2gtYm94IHsKICBib3JkZXI6IDFweCBzb2xpZCAjY2RjZGNkOwogIGZsZXgtZ3JvdzogMTsKICBmb250LXNpemU6IDFlbTsKICBoZWlnaHQ6IDI2cHg7CiAgbWFyZ2luLXJpZ2h0OiAwOwogIHBhZGRpbmc6IDFweCA5cHg7Cn0KCiNzZWFyY2gtYm94OmZvY3VzIHsKICBib3JkZXI6IDFweCBzb2xpZCByZ2IoOTMsIDE1NCwgMjU1KTsKICBvdXRsaW5lOiBub25lOwp9Cgojc2VhcmNoLWJ1dHRvbiB7CiAgYm9yZGVyOiBub25lOwogIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7CiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDsKICBib3gtc2hhZG93OiBub25lOwogIGRpc3BsYXk6IGZsZXg7CiAgaGVpZ2h0OiAzMHB4OwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwogIHdpZHRoOiA2MHB4Owp9Cgojc2VhcmNoLWltYWdlIHsKICBjb250ZW50OgogICAgICAtd2Via2l0LWltYWdlLXNldCgKICAgICAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUE0QUFBQVBDQVFBQUFCK0hUYi9BQUFBckVsRVFWUjRYbjNOc1VvQ1VCekcwWHZCM1UwY2hSNGdlbzVxaWhwdDZna0N4MGJYRnNNRVJXajJLV3FJYW5Bdm1sVVVvUWFwd1U2ZzRsOEg1YmQ5Wi9pU1BTMGh1L1JxWnFybmNCdXpMbDdVM1JuNGNTcFFGVGVyb2VqSmwxTGdzN2Y0Y2VEUGRlQk1YWXA4NmdhT05ZSmtZODNBbnFIaUdrOXdIbmprMTZQS2dvNU45QlVDa3pQZjVqNk0wUGZ1Vmc1TXltb2V0RndvYUtBbEIyNldkWEF2Sjd1NW1leml0cXRrVC8vN1N2L3U5NkNhTFFBQUFBQkpSVTVFcmtKZ2dnPT0pIDF4LAogICAgICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQndBQUFBZUNBUUFBQUNWekxZVUFBQUJZRWxFUVZSNFhyM1ZNVXVWVVJ6SDhYTzk4amdrR2lrRU5rUkQwS1JHRFVWRFF5MGgyU2lDNEl1SWlrdEw0QXZRdDFDREJKVUp3bzFLWFhTNmNXZEh3N3Rjald3b0M1SHJ4K1VaZ25OTzVDWGlPLzc1akQvK1FaZjlNempza1ZVN0RyVTF6UnY5RzlpcjVoc0E0TmlpODMrR0E5WkkxbkkxRDZ0V0FFMVRSbFFNdXV1RkR0aHpNUWVmZ280bktyK2YzZElHRGRVVUhQWUQxSVNvTVFkZ0pnVWZncWFLRU9jeFdFL0JWVEFySkJ2d0MwY0dZN2dOTGdpWk5zRDFHUDRFUFZuNEV0eUxZUnVjemNKMzRIWU1QNEU3R2RhakRTN0ZjQjQ4ejhBSjhGbUk0VGpvdUJreloyeUJ1UlFNbHNCdXRJWitkZkRWVUJxT2FJSHZhdnBMVkhYZkZtQXF2NDVyOWdFSE5yM3kzaGNBZkxTZ1NNUGdpaVpSKzZaOUFNdUtOQXdxcGpVY0EyaDU1cHhnQWZCV2tZUmxRMjU0WU1KbG9heFBIYkNraUdDeW1MNVJsTEE3R25SRFh5dUM3dWhpY0xvS2RSeWFERTVQbDAwSy8vOTNuQUJxUGdCREs4c2ZXZ0FBQUFCSlJVNUVya0pnZ2c9PSkgMngpOwogIG1hcmdpbjogYXV0bzsKfQoKLnNlY29uZGFyeS1idXR0b24gewogIC13ZWJraXQtbWFyZ2luLWVuZDogMTZweDsKICBiYWNrZ3JvdW5kOiAjZDlkOWQ5OwogIGNvbG9yOiAjNjk2OTY5Owp9Cgouc25hY2tiYXIgewogIGJhY2tncm91bmQ6ICMzMjMyMzI7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGJvdHRvbTogMjRweDsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGNvbG9yOiAjZmZmOwogIGZvbnQtc2l6ZTogLjg3ZW07CiAgbGVmdDogMjRweDsKICBtYXgtd2lkdGg6IDU2OHB4OwogIG1pbi13aWR0aDogMjg4cHg7CiAgb3BhY2l0eTogMDsKICBwYWRkaW5nOiAxNnB4IDI0cHggMTJweDsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDkwcHgpOwogIHdpbGwtY2hhbmdlOiBvcGFjaXR5LCB0cmFuc2Zvcm07CiAgei1pbmRleDogOTk5Owp9Cgouc25hY2tiYXItc2hvdyB7CiAgLXdlYmtpdC1hbmltYXRpb246CiAgICBzaG93LXNuYWNrYmFyIC4yNXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpIGZvcndhcmRzLAogICAgaGlkZS1zbmFja2JhciAuMjVzIGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSkgZm9yd2FyZHMgNXM7Cn0KCkAtd2Via2l0LWtleWZyYW1lcyBzaG93LXNuYWNrYmFyIHsKICAxMDAlIHsKICAgIG9wYWNpdHk6IDE7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7CiAgfQp9CgpALXdlYmtpdC1rZXlmcmFtZXMgaGlkZS1zbmFja2JhciB7CiAgMCUgewogICAgb3BhY2l0eTogMTsKICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OiAwOwogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDkwcHgpOwogIH0KfQoKLnN1Z2dlc3Rpb25zIHsKICBtYXJnaW4tdG9wOiAxOHB4Owp9Cgouc3VnZ2VzdGlvbi1oZWFkZXIgewogIGZvbnQtd2VpZ2h0OiBib2xkOwogIG1hcmdpbi1ib3R0b206IDRweDsKfQoKLnN1Z2dlc3Rpb24tYm9keSB7CiAgY29sb3I6ICM3Nzc7Cn0KCi8qIEluY3JlYXNlIGxpbmUgaGVpZ2h0IGF0IGhpZ2hlciByZXNvbHV0aW9ucy4gKi8KQG1lZGlhIChtaW4td2lkdGg6IDY0MXB4KSBhbmQgKG1pbi1oZWlnaHQ6IDY0MXB4KSB7CiAgI2hlbHAtYm94LWlubmVyIHsKICAgIGxpbmUtaGVpZ2h0OiAxOHB4OwogIH0KfQoKLyogRGVjcmVhc2UgcGFkZGluZyBhdCBsb3cgc2l6ZXMuICovCkBtZWRpYSAobWF4LXdpZHRoOiA2NDBweCksIChtYXgtaGVpZ2h0OiA2NDBweCkgewogIGgxIHsKICAgIG1hcmdpbjogMCAwIDE1cHg7CiAgfQogICNjb250ZW50LXRvcCB7CiAgICBtYXJnaW46IDE1cHg7CiAgfQogICNoZWxwLWJveC1pbm5lciB7CiAgICBwYWRkaW5nOiAyMHB4OwogIH0KICAuc3VnZ2VzdGlvbnMgewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9CiAgLnN1Z2dlc3Rpb24taGVhZGVyIHsKICAgIG1hcmdpbi1ib3R0b206IDA7CiAgfQp9CgovKiBEb24ndCBhbGxvdyBvdmVyZmxvdyB3aGVuIGluIGEgc3ViZnJhbWUuICovCmh0bWxbc3ViZnJhbWVdIGJvZHkgewogIG92ZXJmbG93OiBoaWRkZW47Cn0KCiNzdWItZnJhbWUtZXJyb3IgewogIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjREREOwogIGRpc3BsYXk6IC13ZWJraXQtZmxleDsKICAtd2Via2l0LWZsZXgtZmxvdzogY29sdW1uOwogIGhlaWdodDogMTAwJTsKICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyOwogIGxlZnQ6IDA7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB0b3A6IDA7CiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgZWFzZS1pbi1vdXQ7CiAgd2lkdGg6IDEwMCU7Cn0KCiNzdWItZnJhbWUtZXJyb3I6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNFRUU7Cn0KCiNzdWItZnJhbWUtZXJyb3IgLmljb24tZ2VuZXJpYyB7CiAgbWFyZ2luOiAwIDAgMTZweDsKfQoKI3N1Yi1mcmFtZS1lcnJvci1kZXRhaWxzIHsKICBtYXJnaW46IDAgMTBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgdmlzaWJpbGl0eTogaGlkZGVuOwp9CgovKiBTaG93IGRldGFpbHMgb25seSB3aGVuIGhvdmVyaW5nLiAqLwojc3ViLWZyYW1lLWVycm9yOmhvdmVyICNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CiAgdmlzaWJpbGl0eTogdmlzaWJsZTsKfQoKLyogSWYgdGhlIGlmcmFtZSBpcyB0b28gc21hbGwsIGFsd2F5cyBoaWRlIHRoZSBlcnJvciBjb2RlLiAqLwovKiBUT0RPKG1tZW5rZSk6IFNlZSBpZiBvdmVyZmxvdzogbm8tZGlzcGxheSB3b3JrcyBiZXR0ZXIsIG9uY2Ugc3VwcG9ydGVkLiAqLwpAbWVkaWEgKG1heC13aWR0aDogMjAwcHgpLCAobWF4LWhlaWdodDogOTVweCkgewogICNzdWItZnJhbWUtZXJyb3ItZGV0YWlscyB7CiAgICBkaXNwbGF5OiBub25lOwogIH0KfQoKLyogQWRqdXN0IGljb24gZm9yIHNtYWxsIGVtYmVkZGVkIGZyYW1lcyBpbiBhcHBzLiAqLwpAbWVkaWEgKG1heC1oZWlnaHQ6IDEwMHB4KSB7CiAgI3N1Yi1mcmFtZS1lcnJvciAuaWNvbi1nZW5lcmljIHsKICAgIGhlaWdodDogYXV0bzsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmctdG9wOiAwOwogICAgd2lkdGg6IDI1cHg7CiAgfQp9CgovKiBkZXRhaWxzLWJ1dHRvbiBpcyBzcGVjaWFsOyBpdCdzIGEgPGJ1dHRvbj4gZWxlbWVudCB0aGF0IGxvb2tzIGxpa2UgYSBsaW5rLiAqLwojZGV0YWlscy1idXR0b24gewogIGJveC1zaGFkb3c6IG5vbmU7CiAgbWluLXdpZHRoOiAwOwp9CgovKiBTdHlsZXMgZm9yIHBsYXRmb3JtIGRlcGVuZGVudCBzZXBhcmF0aW9uIG9mIGNvbnRyb2xzIGFuZCBkZXRhaWxzIGJ1dHRvbi4gKi8KLnN1Z2dlc3RlZC1sZWZ0ID4gI2NvbnRyb2wtYnV0dG9ucywKLnN1Z2dlc3RlZC1sZWZ0ICNzdGFsZS1sb2FkLWJ1dHRvbiwKLnN1Z2dlc3RlZC1yaWdodCA+ICNkZXRhaWxzLWJ1dHRvbiB7CiAgZmxvYXQ6IGxlZnQ7Cn0KCi5zdWdnZXN0ZWQtcmlnaHQgPiAjY29udHJvbC1idXR0b25zLAouc3VnZ2VzdGVkLXJpZ2h0ICNzdGFsZS1sb2FkLWJ1dHRvbiwKLnN1Z2dlc3RlZC1sZWZ0ID4gI2RldGFpbHMtYnV0dG9uIHsKICBmbG9hdDogcmlnaHQ7Cn0KCi5zdWdnZXN0ZWQtbGVmdCAuc2Vjb25kYXJ5LWJ1dHRvbiB7CiAgLXdlYmtpdC1tYXJnaW4tZW5kOiAwcHg7CiAgLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDE2cHg7Cn0KCiNkZXRhaWxzLWJ1dHRvbi5zaW5ndWxhciB7CiAgZmxvYXQ6IG5vbmU7Cn0KCi8qIGRvd25sb2FkLWJ1dHRvbiBzaG93cyBib3RoIGljb24gYW5kIHRleHQuICovCiNkb3dubG9hZC1idXR0b24gewogIGJveC1zaGFkb3c6IG5vbmU7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgojZG93bmxvYWQtYnV0dG9uOmJlZm9yZSB7CiAgLXdlYmtpdC1tYXJnaW4tZW5kOiA0cHg7CiAgYmFja2dyb3VuZDogLXdlYmtpdC1pbWFnZS1zZXQoCiAgICAgIHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQVlDQVFBQUFCS2Z2VnpBQUFBTzBsRVFWUTR5Mk5nR0FyZ1B4SVkxWUNoc09FL0x0QkFtcFlHMG14cElPU0RCcEtVbzJscElEWnhOSkNrSEtxbFlaQWxhM1JBSFExREZnQUFSUnJvSHlMTlR3d0FBQUFBU1VWT1JLNUNZSUk9KSAxeCwKICAgICAgdXJsKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBREFBQUFBd0NBUUFBQUQ5Q3pFTUFBQUFaRWxFUVZSWXcrM1J1dzNBTUF3RFVZM096WlVtUlJENEU5aWltOXdOd0FkYkVVUkh5azRBQUFBQVRpQ1ZLOGxMeVBzS2VUOUszbHNvd25udW5ma1B4Tzc4aEtpWUh4QlY4eDJpY3I1QlZNKy9DTWY4ZzNETjM0UnpuczZWaXdIVUFVUS82d0lBZDVLbTdsNmM4QUFBQUFCSlJVNUVya0pnZ2c9PSkgMngpCiAgICBuby1yZXBlYXQ7CiAgY29udGVudDogJyc7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIHdpZHRoOiAyNHB4OwogIGhlaWdodDogMjRweDsKICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9CgojZG93bmxvYWQtYnV0dG9uOmRpc2FibGVkIHsKICBiYWNrZ3JvdW5kOiByZ2IoMTgwLCAyMDYsIDI0OSk7CiAgY29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTsKfQoKI2J1dHRvbnM6OmFmdGVyIHsKICBjbGVhcjogYm90aDsKICBjb250ZW50OiAnJzsKICBkaXNwbGF5OiBibG9jazsKICB3aWR0aDogMTAwJTsKfQoKLyogT2ZmbGluZSBwYWdlICovCi5vZmZsaW5lIHsKICB0cmFuc2l0aW9uOiAtd2Via2l0LWZpbHRlciAxLjVzIGN1YmljLWJlemllcigwLjY1LCAwLjA1LCAwLjM2LCAxKSwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEuNXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuMDUsIDAuMzYsIDEpOwogIHdpbGwtY2hhbmdlOiAtd2Via2l0LWZpbHRlciwgYmFja2dyb3VuZC1jb2xvcjsKfQoKLm9mZmxpbmUgI21haW4tbWVzc2FnZSA+IHAgewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5vZmZsaW5lLmludmVydGVkIHsKICAtd2Via2l0LWZpbHRlcjogaW52ZXJ0KDEwMCUpOwogIGJhY2tncm91bmQtY29sb3I6ICMwMDA7Cn0KCi5vZmZsaW5lIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgY29sb3I6ICMyYjJiMmI7CiAgZm9udC1zaXplOiAxZW07CiAgbGluZS1oZWlnaHQ6IDEuNTU7CiAgbWFyZ2luOiAwIGF1dG87CiAgbWF4LXdpZHRoOiA2MDBweDsKICBwYWRkaW5nLXRvcDogMTAwcHg7CiAgd2lkdGg6IDEwMCU7Cn0KCi5vZmZsaW5lIC5ydW5uZXItY29udGFpbmVyIHsKICBkaXJlY3Rpb246IGx0cjsKICBoZWlnaHQ6IDE1MHB4OwogIG1heC13aWR0aDogNjAwcHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAzNXB4OwogIHdpZHRoOiA0NHB4Owp9Cgoub2ZmbGluZSAucnVubmVyLWNhbnZhcyB7CiAgaGVpZ2h0OiAxNTBweDsKICBtYXgtd2lkdGg6IDYwMHB4OwogIG9wYWNpdHk6IDE7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIHotaW5kZXg6IDI7Cn0KCi5vZmZsaW5lIC5jb250cm9sbGVyIHsKICBiYWNrZ3JvdW5kOiByZ2JhKDI0NywyNDcsMjQ3LCAuMSk7CiAgaGVpZ2h0OiAxMDB2aDsKICBsZWZ0OiAwOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgd2lkdGg6IDEwMHZ3OwogIHotaW5kZXg6IDE7Cn0KCiNvZmZsaW5lLXJlc291cmNlcyB7CiAgZGlzcGxheTogbm9uZTsKfQoKQG1lZGlhIChtYXgtd2lkdGg6IDQyMHB4KSB7CiAgLnN1Z2dlc3RlZC1sZWZ0ID4gI2NvbnRyb2wtYnV0dG9ucywKICAuc3VnZ2VzdGVkLXJpZ2h0ID4gI2NvbnRyb2wtYnV0dG9ucyB7CiAgICBmbG9hdDogbm9uZTsKICB9CgogIC5zbmFja2JhciB7CiAgICBsZWZ0OiAwOwogICAgYm90dG9tOiAwOwogICAgd2lkdGg6IDEwMCU7CiAgICBib3JkZXItcmFkaXVzOiAwOwogIH0KfQoKQG1lZGlhIChtYXgtaGVpZ2h0OiAzNTBweCkgewogIGgxIHsKICAgIG1hcmdpbjogMCAwIDE1cHg7CiAgfQoKICAuaWNvbi1vZmZsaW5lIHsKICAgIG1hcmdpbjogMCAwIDEwcHg7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogNSU7CiAgfQoKICAubmF2LXdyYXBwZXIgewogICAgbWFyZ2luLXRvcDogMzBweDsKICB9Cn0KCkBtZWRpYSAobWluLXdpZHRoOiA2MDBweCkgYW5kIChtYXgtd2lkdGg6IDczNnB4KSBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAub2ZmbGluZSAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgbWFyZ2luLWxlZnQ6IDA7CiAgICBtYXJnaW4tcmlnaHQ6IDA7CiAgfQp9CgpAbWVkaWEgKG1pbi13aWR0aDogNDIwcHgpIGFuZCAobWF4LXdpZHRoOiA3MzZweCkgYW5kCiAgICAgICAobWluLWhlaWdodDogMjQwcHgpIGFuZCAobWF4LWhlaWdodDogNDIwcHgpIGFuZAogICAgICAgKG9yaWVudGF0aW9uOmxhbmRzY2FwZSkgewogIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiAxMDBweDsKICB9Cn0KCkBtZWRpYSAobWluLWhlaWdodDogMjQwcHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkgewogIC5vZmZsaW5lIC5pbnRlcnN0aXRpYWwtd3JhcHBlciB7CiAgICBtYXJnaW4tYm90dG9tOiA5MHB4OwogIH0KCiAgLmljb24tb2ZmbGluZSB7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIH0KfQoKQG1lZGlhIChtYXgtaGVpZ2h0OiAzMjBweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7CiAgLmljb24tb2ZmbGluZSB7CiAgICBtYXJnaW4tYm90dG9tOiAwOwogIH0KCiAgLm9mZmxpbmUgLnJ1bm5lci1jb250YWluZXIgewogICAgdG9wOiAxMHB4OwogIH0KfQoKQG1lZGlhIChtYXgtd2lkdGg6IDI0MHB4KSB7CiAgYnV0dG9uIHsKICAgIHBhZGRpbmctbGVmdDogMTJweDsKICAgIHBhZGRpbmctcmlnaHQ6IDEycHg7CiAgfQoKICAuaW50ZXJzdGl0aWFsLXdyYXBwZXIgewogICAgb3ZlcmZsb3c6IGluaGVyaXQ7CiAgICBwYWRkaW5nOiAwIDhweDsKICB9Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiAxMjBweCkgewogIGJ1dHRvbiB7CiAgICB3aWR0aDogYXV0bzsKICB9Cn0KCiAgLy8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwoKICAvLyBDb3B5cmlnaHQgMjAxMyBUaGUgQ2hyb21pdW0gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZQovLyBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlLgoKZnVuY3Rpb24gdG9nZ2xlSGVscEJveCgpIHsKICB2YXIgaGVscEJveE91dGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGFpbHMnKTsKICBoZWxwQm94T3V0ZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgdmFyIGRldGFpbHNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscy1idXR0b24nKTsKICBpZiAoaGVscEJveE91dGVyLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpCiAgICBkZXRhaWxzQnV0dG9uLmlubmVyVGV4dCA9IGRldGFpbHNCdXR0b24uZGV0YWlsc1RleHQ7CiAgZWxzZQogICAgZGV0YWlsc0J1dHRvbi5pbm5lclRleHQgPSBkZXRhaWxzQnV0dG9uLmhpZGVEZXRhaWxzVGV4dDsKCiAgLy8gRGV0YWlscyBhcHBlYXJzIG92ZXIgdGhlIG1haW4gY29udGVudCBvbiBzbWFsbCBzY3JlZW5zLgogIGlmIChtb2JpbGVOYXYpIHsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluLWNvbnRlbnQnKS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTsKICAgIHZhciBydW5uZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucnVubmVyLWNvbnRhaW5lcicpOwogICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICBydW5uZXJDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBkaWFnbm9zZUVycm9ycygpIHsKLy8gCiAgICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpCiAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuZGlhZ25vc2VFcnJvcnNCdXR0b25DbGljaygpOwovLyAKLy8gCn0KCi8vIFN1YmZyYW1lcyB1c2UgYSBkaWZmZXJlbnQgbGF5b3V0IGJ1dCB0aGUgc2FtZSBodG1sIGZpbGUuICBUaGlzIGlzIHRvIG1ha2UgaXQKLy8gZWFzaWVyIHRvIHN1cHBvcnQgcGxhdGZvcm1zIHRoYXQgbG9hZCB0aGUgZXJyb3IgcGFnZSB2aWEgZGlmZmVyZW50Ci8vIG1lY2hhbmlzbXMgKEN1cnJlbnRseSBqdXN0IGlPUykuCmlmICh3aW5kb3cudG9wLmxvY2F0aW9uICE9IHdpbmRvdy5sb2NhdGlvbikKICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdWJmcmFtZScsICcnKTsKCi8vIFJlLXJlbmRlcnMgdGhlIGVycm9yIHBhZ2UgdXNpbmcgfHN0cmluZ3N8IGFzIHRoZSBkaWN0aW9uYXJ5IG9mIHZhbHVlcy4KLy8gVXNlZCBieSBOZXRFcnJvclRhYkhlbHBlciB0byB1cGRhdGUgRE5TIGVycm9yIHBhZ2VzIHdpdGggcHJvYmUgcmVzdWx0cy4KZnVuY3Rpb24gdXBkYXRlRm9yRG5zUHJvYmUoc3RyaW5ncykgewogIHZhciBjb250ZXh0ID0gbmV3IEpzRXZhbENvbnRleHQoc3RyaW5ncyk7CiAganN0UHJvY2Vzcyhjb250ZXh0LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndCcpKTsKfQoKLy8gR2l2ZW4gdGhlIGNsYXNzTGlzdCBwcm9wZXJ0eSBvZiBhbiBlbGVtZW50LCBhZGRzIGFuIGljb24gY2xhc3MgdG8gdGhlIGxpc3QKLy8gYW5kIHJlbW92ZXMgdGhlIHByZXZpb3VzbHktCmZ1bmN0aW9uIHVwZGF0ZUljb25DbGFzcyhjbGFzc0xpc3QsIG5ld0NsYXNzKSB7CiAgdmFyIG9sZENsYXNzOwoKICBpZiAoY2xhc3NMaXN0Lmhhc093blByb3BlcnR5KCdsYXN0X2ljb25fY2xhc3MnKSkgewogICAgb2xkQ2xhc3MgPSBjbGFzc0xpc3RbJ2xhc3RfaWNvbl9jbGFzcyddOwogICAgaWYgKG9sZENsYXNzID09IG5ld0NsYXNzKQogICAgICByZXR1cm47CiAgfQoKICBjbGFzc0xpc3QuYWRkKG5ld0NsYXNzKTsKICBpZiAob2xkQ2xhc3MgIT09IHVuZGVmaW5lZCkKICAgIGNsYXNzTGlzdC5yZW1vdmUob2xkQ2xhc3MpOwoKICBjbGFzc0xpc3RbJ2xhc3RfaWNvbl9jbGFzcyddID0gbmV3Q2xhc3M7CgogIGlmIChuZXdDbGFzcyA9PSAnaWNvbi1vZmZsaW5lJykgewogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdvZmZsaW5lJyk7CiAgICBuZXcgUnVubmVyKCcuaW50ZXJzdGl0aWFsLXdyYXBwZXInKTsKICB9IGVsc2UgewogICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCduZXRlcnJvcicpOwogIH0KfQoKLy8gRG9lcyBhIHNlYXJjaCB1c2luZyB8YmFzZVNlYXJjaFVybHwgYW5kIHRoZSB0ZXh0IGluIHRoZSBzZWFyY2ggYm94LgpmdW5jdGlvbiBzZWFyY2goYmFzZVNlYXJjaFVybCkgewogIHZhciBzZWFyY2hUZXh0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtYm94Jyk7CiAgZG9jdW1lbnQubG9jYXRpb24gPSBiYXNlU2VhcmNoVXJsICsgc2VhcmNoVGV4dE5vZGUudmFsdWU7CiAgcmV0dXJuIGZhbHNlOwp9CgovLyBVc2UgdG8gdHJhY2sgY2xpY2tzIG9uIGVsZW1lbnRzIGdlbmVyYXRlZCBieSB0aGUgbmF2aWdhdGlvbiBjb3JyZWN0aW9uCi8vIHNlcnZpY2UuICBJZiB8dHJhY2tpbmdJZHwgaXMgbmVnYXRpdmUsIHRoZSBlbGVtZW50IGRvZXMgbm90IGNvbWUgZnJvbSB0aGUKLy8gY29ycmVjdGlvbiBzZXJ2aWNlLgpmdW5jdGlvbiB0cmFja0NsaWNrKHRyYWNraW5nSWQpIHsKICAvLyBUaGlzIGNhbid0IGJlIGRvbmUgd2l0aCBYSFJzIGJlY2F1c2UgWEhScyBhcmUgY2FuY2VsbGVkIG9uIG5hdmlnYXRpb24KICAvLyBzdGFydCwgYW5kIGJlY2F1c2UgdGhlc2UgYXJlIGNyb3NzLXNpdGUgcmVxdWVzdHMuCiAgaWYgKHRyYWNraW5nSWQgPj0gMCAmJiBlcnJvclBhZ2VDb250cm9sbGVyKQogICAgZXJyb3JQYWdlQ29udHJvbGxlci50cmFja0NsaWNrKHRyYWNraW5nSWQpOwp9CgovLyBDYWxsZWQgd2hlbiBhbiA8YT4gdGFnIGdlbmVyYXRlZCBieSB0aGUgbmF2aWdhdGlvbiBjb3JyZWN0aW9uIHNlcnZpY2UgaXMKLy8gY2xpY2tlZC4gIFNlcGFyYXRlIGZ1bmN0aW9uIGZyb20gdHJhY2tDbGljayBzbyB0aGUgcmVzb3VyY2VzIGRvbid0IGhhdmUgdG8KLy8gYmUgdXBkYXRlZCBpZiBuZXcgZGF0YSBpcyBhZGRlZCB0byBqc3RkYXRhLgpmdW5jdGlvbiBsaW5rQ2xpY2tlZChqc3RkYXRhKSB7CiAgdHJhY2tDbGljayhqc3RkYXRhLnRyYWNraW5nSWQpOwp9CgovLyBJbXBsZW1lbnRzIGJ1dHRvbiBjbGlja3MuICBUaGlzIGZ1bmN0aW9uIGlzIG5lZWRlZCBkdXJpbmcgdGhlIHRyYW5zaXRpb24KLy8gYmV0d2VlbiBpbXBsZW1lbnRpbmcgdGhlc2UgaW4gdHJ1bmsgY2hyb21pdW0gYW5kIGltcGxlbWVudGluZyB0aGVtIGluCi8vIGlPUy4KZnVuY3Rpb24gcmVsb2FkQnV0dG9uQ2xpY2sodXJsKSB7CiAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICBlcnJvclBhZ2VDb250cm9sbGVyLnJlbG9hZEJ1dHRvbkNsaWNrKCk7CiAgfSBlbHNlIHsKICAgIGxvY2F0aW9uID0gdXJsOwogIH0KfQoKZnVuY3Rpb24gc2hvd1NhdmVkQ29weUJ1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5zaG93U2F2ZWRDb3B5QnV0dG9uQ2xpY2soKTsKICB9Cn0KCmZ1bmN0aW9uIGRvd25sb2FkQnV0dG9uQ2xpY2soKSB7CiAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRvd25sb2FkQnV0dG9uQ2xpY2soKTsKICAgIHZhciBkb3dubG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb3dubG9hZC1idXR0b24nKTsKICAgIGRvd25sb2FkQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTsKICAgIGRvd25sb2FkQnV0dG9uLnRleHRDb250ZW50ID0gZG93bmxvYWRCdXR0b24uZGlzYWJsZWRUZXh0OwogIH0KfQoKZnVuY3Rpb24gZGV0YWlsc0J1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuZGV0YWlsc0J1dHRvbkNsaWNrKCk7Cn0KCi8qKgogKiBSZXBsYWNlIHRoZSByZWxvYWQgYnV0dG9uIHdpdGggdGhlIEdvb2dsZSBjYWNoZWQgY29weSBzdWdnZXN0aW9uLgogKi8KZnVuY3Rpb24gc2V0VXBDYWNoZWRCdXR0b24oYnV0dG9uU3RyaW5ncykgewogIHZhciByZWxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVsb2FkLWJ1dHRvbicpOwoKICByZWxvYWRCdXR0b24udGV4dENvbnRlbnQgPSBidXR0b25TdHJpbmdzLm1zZzsKICB2YXIgdXJsID0gYnV0dG9uU3RyaW5ncy5jYWNoZVVybDsKICB2YXIgdHJhY2tpbmdJZCA9IGJ1dHRvblN0cmluZ3MudHJhY2tpbmdJZDsKICByZWxvYWRCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uKGUpIHsKICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIHRyYWNrQ2xpY2sodHJhY2tpbmdJZCk7CiAgICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpIHsKICAgICAgZXJyb3JQYWdlQ29udHJvbGxlci50cmFja0NhY2hlZENvcHlCdXR0b25DbGljaygpOwogICAgfQogICAgbG9jYXRpb24gPSB1cmw7CiAgfTsKICByZWxvYWRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICcnOwogIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sLWJ1dHRvbnMnKS5oaWRkZW4gPSBmYWxzZTsKfQoKdmFyIHByaW1hcnlDb250cm9sT25MZWZ0ID0gdHJ1ZTsKLy8gCgpmdW5jdGlvbiBvbkRvY3VtZW50TG9hZCgpIHsKICB2YXIgY29udHJvbEJ1dHRvbkRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sLWJ1dHRvbnMnKTsKICB2YXIgcmVsb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbG9hZC1idXR0b24nKTsKICB2YXIgZGV0YWlsc0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzLWJ1dHRvbicpOwogIHZhciBzaG93U2F2ZWRDb3B5QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3ctc2F2ZWQtY29weS1idXR0b24nKTsKICB2YXIgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtYnV0dG9uJyk7CgogIHZhciByZWxvYWRCdXR0b25WaXNpYmxlID0gbG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdyZWxvYWRCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ3JlbG9hZEJ1dHRvbicpLm1zZzsKICB2YXIgc2hvd1NhdmVkQ29weUJ1dHRvblZpc2libGUgPQogICAgICBsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ3Nob3dTYXZlZENvcHlCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ3Nob3dTYXZlZENvcHlCdXR0b24nKS5tc2c7CiAgdmFyIGRvd25sb2FkQnV0dG9uVmlzaWJsZSA9CiAgICAgIGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygnZG93bmxvYWRCdXR0b24nKSAmJgogICAgICBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2Rvd25sb2FkQnV0dG9uJykubXNnOwoKICB2YXIgcHJpbWFyeUJ1dHRvbiwgc2Vjb25kYXJ5QnV0dG9uOwogIGlmIChzaG93U2F2ZWRDb3B5QnV0dG9uLnByaW1hcnkpIHsKICAgIHByaW1hcnlCdXR0b24gPSBzaG93U2F2ZWRDb3B5QnV0dG9uOwogICAgc2Vjb25kYXJ5QnV0dG9uID0gcmVsb2FkQnV0dG9uOwogIH0gZWxzZSB7CiAgICBwcmltYXJ5QnV0dG9uID0gcmVsb2FkQnV0dG9uOwogICAgc2Vjb25kYXJ5QnV0dG9uID0gc2hvd1NhdmVkQ29weUJ1dHRvbjsKICB9CgogIC8vIFNldHMgdXAgdGhlIHByb3BlciBidXR0b24gbGF5b3V0IGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybS4KICBpZiAocHJpbWFyeUNvbnRyb2xPbkxlZnQpIHsKICAgIGJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgnc3VnZ2VzdGVkLWxlZnQnKTsKICAgIGNvbnRyb2xCdXR0b25EaXYuaW5zZXJ0QmVmb3JlKHNlY29uZGFyeUJ1dHRvbiwgcHJpbWFyeUJ1dHRvbik7CiAgfSBlbHNlIHsKICAgIGJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgnc3VnZ2VzdGVkLXJpZ2h0Jyk7CiAgICBjb250cm9sQnV0dG9uRGl2Lmluc2VydEJlZm9yZShwcmltYXJ5QnV0dG9uLCBzZWNvbmRhcnlCdXR0b24pOwogIH0KCiAgLy8gQ2hlY2sgZm9yIEdvb2dsZSBjYWNoZWQgY29weSBzdWdnZXN0aW9uLgogIGlmIChsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ2NhY2hlQnV0dG9uJykpIHsKICAgIHNldFVwQ2FjaGVkQnV0dG9uKGxvYWRUaW1lRGF0YS5nZXRWYWx1ZSgnY2FjaGVCdXR0b24nKSk7CiAgfQoKICBpZiAocmVsb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICYmCiAgICAgIHNob3dTYXZlZENvcHlCdXR0b24uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgJiYKICAgICAgZG93bmxvYWRCdXR0b24uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgIGRldGFpbHNCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2luZ3VsYXInKTsKICB9CgogIC8vIFNob3cgY29udHJvbCBidXR0b25zLgogIGlmIChyZWxvYWRCdXR0b25WaXNpYmxlIHx8IHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlIHx8CiAgICAgIGRvd25sb2FkQnV0dG9uVmlzaWJsZSkgewogICAgY29udHJvbEJ1dHRvbkRpdi5oaWRkZW4gPSBmYWxzZTsKCiAgICAvLyBTZXQgdGhlIHNlY29uZGFyeSBidXR0b24gc3RhdGUgaW4gdGhlIGNhc2VzIG9mIHR3byBjYWxsIHRvIGFjdGlvbnMuCiAgICBpZiAoKHJlbG9hZEJ1dHRvblZpc2libGUgfHwgZG93bmxvYWRCdXR0b25WaXNpYmxlKSAmJgogICAgICAgIHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlKSB7CiAgICAgIHNlY29uZGFyeUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdzZWNvbmRhcnktYnV0dG9uJyk7CiAgICB9CiAgfQp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgb25Eb2N1bWVudExvYWQpOwoKICAvLyBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KKGZ1bmN0aW9uKCkgewondXNlIHN0cmljdCc7Ci8qKgogKiBULVJleCBydW5uZXIuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRlckNvbnRhaW5lcklkIE91dGVyIGNvbnRhaW5pbmcgZWxlbWVudCBpZC4KICogQHBhcmFtIHtPYmplY3R9IG9wdF9jb25maWcKICogQGNvbnN0cnVjdG9yCiAqIEBleHBvcnQKICovCmZ1bmN0aW9uIFJ1bm5lcihvdXRlckNvbnRhaW5lcklkLCBvcHRfY29uZmlnKSB7CiAgLy8gU2luZ2xldG9uCiAgaWYgKFJ1bm5lci5pbnN0YW5jZV8pIHsKICAgIHJldHVybiBSdW5uZXIuaW5zdGFuY2VfOwogIH0KICBSdW5uZXIuaW5zdGFuY2VfID0gdGhpczsKCiAgdGhpcy5vdXRlckNvbnRhaW5lckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvdXRlckNvbnRhaW5lcklkKTsKICB0aGlzLmNvbnRhaW5lckVsID0gbnVsbDsKICB0aGlzLnNuYWNrYmFyRWwgPSBudWxsOwoKICB0aGlzLmNvbmZpZyA9IG9wdF9jb25maWcgfHwgUnVubmVyLmNvbmZpZzsKCiAgdGhpcy5kaW1lbnNpb25zID0gUnVubmVyLmRlZmF1bHREaW1lbnNpb25zOwoKICB0aGlzLmNhbnZhcyA9IG51bGw7CiAgdGhpcy5jYW52YXNDdHggPSBudWxsOwoKICB0aGlzLnRSZXggPSBudWxsOwoKICB0aGlzLmRpc3RhbmNlTWV0ZXIgPSBudWxsOwogIHRoaXMuZGlzdGFuY2VSYW4gPSAwOwoKICB0aGlzLmhpZ2hlc3RTY29yZSA9IDA7CgogIHRoaXMudGltZSA9IDA7CiAgdGhpcy5ydW5uaW5nVGltZSA9IDA7CiAgdGhpcy5tc1BlckZyYW1lID0gMTAwMCAvIEZQUzsKICB0aGlzLmN1cnJlbnRTcGVlZCA9IHRoaXMuY29uZmlnLlNQRUVEOwoKICB0aGlzLm9ic3RhY2xlcyA9IFtdOwoKICB0aGlzLmFjdGl2YXRlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIHRoZSBlYXN0ZXIgZWdnIGhhcyBiZWVuIGFjdGl2YXRlZC4KICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsgLy8gV2hldGhlciB0aGUgZ2FtZSBpcyBjdXJyZW50bHkgaW4gcGxheSBzdGF0ZS4KICB0aGlzLmNyYXNoZWQgPSBmYWxzZTsKICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogIHRoaXMuaW52ZXJ0ZWQgPSBmYWxzZTsKICB0aGlzLmludmVydFRpbWVyID0gMDsKICB0aGlzLnJlc2l6ZVRpbWVySWRfID0gbnVsbDsKCiAgdGhpcy5wbGF5Q291bnQgPSAwOwoKICAvLyBTb3VuZCBGWC4KICB0aGlzLmF1ZGlvQnVmZmVyID0gbnVsbDsKICB0aGlzLnNvdW5kRnggPSB7fTsKCiAgLy8gR2xvYmFsIHdlYiBhdWRpbyBjb250ZXh0IGZvciBwbGF5aW5nIHNvdW5kcy4KICB0aGlzLmF1ZGlvQ29udGV4dCA9IG51bGw7CgogIC8vIEltYWdlcy4KICB0aGlzLmltYWdlcyA9IHt9OwogIHRoaXMuaW1hZ2VzTG9hZGVkID0gMDsKCiAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7CiAgICB0aGlzLnNldHVwRGlzYWJsZWRSdW5uZXIoKTsKICB9IGVsc2UgewogICAgdGhpcy5sb2FkSW1hZ2VzKCk7CiAgfQp9CndpbmRvd1snUnVubmVyJ10gPSBSdW5uZXI7CgoKLyoqCiAqIERlZmF1bHQgZ2FtZSB3aWR0aC4KICogQGNvbnN0CiAqLwp2YXIgREVGQVVMVF9XSURUSCA9IDYwMDsKCi8qKgogKiBGcmFtZXMgcGVyIHNlY29uZC4KICogQGNvbnN0CiAqLwp2YXIgRlBTID0gNjA7CgovKiogQGNvbnN0ICovCnZhciBJU19ISURQSSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMTsKCi8qKiBAY29uc3QgKi8KdmFyIElTX0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0pOwoKLyoqIEBjb25zdCAqLwp2YXIgSVNfTU9CSUxFID0gL0FuZHJvaWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpIHx8IElTX0lPUzsKCi8qKiBAY29uc3QgKi8KdmFyIElTX1RPVUNIX0VOQUJMRUQgPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7CgovKioKICogRGVmYXVsdCBnYW1lIGNvbmZpZ3VyYXRpb24uCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpSdW5uZXIuY29uZmlnID0gewogIEFDQ0VMRVJBVElPTjogMC4wMDEsCiAgQkdfQ0xPVURfU1BFRUQ6IDAuMiwKICBCT1RUT01fUEFEOiAxMCwKICBDTEVBUl9USU1FOiAzMDAwLAogIENMT1VEX0ZSRVFVRU5DWTogMC41LAogIEdBTUVPVkVSX0NMRUFSX1RJTUU6IDc1MCwKICBHQVBfQ09FRkZJQ0lFTlQ6IDAuNiwKICBHUkFWSVRZOiAwLjYsCiAgSU5JVElBTF9KVU1QX1ZFTE9DSVRZOiAxMiwKICBJTlZFUlRfRkFERV9EVVJBVElPTjogMTIwMDAsCiAgSU5WRVJUX0RJU1RBTkNFOiA3MDAsCiAgTUFYX0JMSU5LX0NPVU5UOiAzLAogIE1BWF9DTE9VRFM6IDYsCiAgTUFYX09CU1RBQ0xFX0xFTkdUSDogMywKICBNQVhfT0JTVEFDTEVfRFVQTElDQVRJT046IDIsCiAgTUFYX1NQRUVEOiAxMywKICBNSU5fSlVNUF9IRUlHSFQ6IDM1LAogIE1PQklMRV9TUEVFRF9DT0VGRklDSUVOVDogMS4yLAogIFJFU09VUkNFX1RFTVBMQVRFX0lEOiAnYXVkaW8tcmVzb3VyY2VzJywKICBTUEVFRDogNiwKICBTUEVFRF9EUk9QX0NPRUZGSUNJRU5UOiAzCn07CgoKLyoqCiAqIERlZmF1bHQgZGltZW5zaW9ucy4KICogQGVudW0ge3N0cmluZ30KICovClJ1bm5lci5kZWZhdWx0RGltZW5zaW9ucyA9IHsKICBXSURUSDogREVGQVVMVF9XSURUSCwKICBIRUlHSFQ6IDE1MAp9OwoKCi8qKgogKiBDU1MgY2xhc3MgbmFtZXMuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuY2xhc3NlcyA9IHsKICBDQU5WQVM6ICdydW5uZXItY2FudmFzJywKICBDT05UQUlORVI6ICdydW5uZXItY29udGFpbmVyJywKICBDUkFTSEVEOiAnY3Jhc2hlZCcsCiAgSUNPTjogJ2ljb24tb2ZmbGluZScsCiAgSU5WRVJURUQ6ICdpbnZlcnRlZCcsCiAgU05BQ0tCQVI6ICdzbmFja2JhcicsCiAgU05BQ0tCQVJfU0hPVzogJ3NuYWNrYmFyLXNob3cnLAogIFRPVUNIX0NPTlRST0xMRVI6ICdjb250cm9sbGVyJwp9OwoKCi8qKgogKiBTcHJpdGUgZGVmaW5pdGlvbiBsYXlvdXQgb2YgdGhlIHNwcml0ZXNoZWV0LgogKiBAZW51bSB7T2JqZWN0fQogKi8KUnVubmVyLnNwcml0ZURlZmluaXRpb24gPSB7CiAgTERQSTogewogICAgQ0FDVFVTX0xBUkdFOiB7eDogMzMyLCB5OiAyfSwKICAgIENBQ1RVU19TTUFMTDoge3g6IDIyOCwgeTogMn0sCiAgICBDTE9VRDoge3g6IDg2LCB5OiAyfSwKICAgIEhPUklaT046IHt4OiAyLCB5OiA1NH0sCiAgICBNT09OOiB7eDogNDg0LCB5OiAyfSwKICAgIFBURVJPREFDVFlMOiB7eDogMTM0LCB5OiAyfSwKICAgIFJFU1RBUlQ6IHt4OiAyLCB5OiAyfSwKICAgIFRFWFRfU1BSSVRFOiB7eDogNjU1LCB5OiAyfSwKICAgIFRSRVg6IHt4OiA4NDgsIHk6IDJ9LAogICAgU1RBUjoge3g6IDY0NSwgeTogMn0KICB9LAogIEhEUEk6IHsKICAgIENBQ1RVU19MQVJHRToge3g6IDY1MiwgeTogMn0sCiAgICBDQUNUVVNfU01BTEw6IHt4OiA0NDYsIHk6IDJ9LAogICAgQ0xPVUQ6IHt4OiAxNjYsIHk6IDJ9LAogICAgSE9SSVpPTjoge3g6IDIsIHk6IDEwNH0sCiAgICBNT09OOiB7eDogOTU0LCB5OiAyfSwKICAgIFBURVJPREFDVFlMOiB7eDogMjYwLCB5OiAyfSwKICAgIFJFU1RBUlQ6IHt4OiAyLCB5OiAyfSwKICAgIFRFWFRfU1BSSVRFOiB7eDogMTI5NCwgeTogMn0sCiAgICBUUkVYOiB7eDogMTY3OCwgeTogMn0sCiAgICBTVEFSOiB7eDogMTI3NiwgeTogMn0KICB9Cn07CgoKLyoqCiAqIFNvdW5kIEZYLiBSZWZlcmVuY2UgdG8gdGhlIElEIG9mIHRoZSBhdWRpbyB0YWcgb24gaW50ZXJzdGl0aWFsIHBhZ2UuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuc291bmRzID0gewogIEJVVFRPTl9QUkVTUzogJ29mZmxpbmUtc291bmQtcHJlc3MnLAogIEhJVDogJ29mZmxpbmUtc291bmQtaGl0JywKICBTQ09SRTogJ29mZmxpbmUtc291bmQtcmVhY2hlZCcKfTsKCgovKioKICogS2V5IGNvZGUgbWFwcGluZy4KICogQGVudW0ge09iamVjdH0KICovClJ1bm5lci5rZXljb2RlcyA9IHsKICBKVU1QOiB7JzM4JzogMSwgJzMyJzogMX0sICAvLyBVcCwgc3BhY2ViYXIKICBEVUNLOiB7JzQwJzogMX0sICAvLyBEb3duCiAgUkVTVEFSVDogeycxMyc6IDF9ICAvLyBFbnRlcgp9OwoKCi8qKgogKiBSdW5uZXIgZXZlbnQgbmFtZXMuCiAqIEBlbnVtIHtzdHJpbmd9CiAqLwpSdW5uZXIuZXZlbnRzID0gewogIEFOSU1fRU5EOiAnd2Via2l0QW5pbWF0aW9uRW5kJywKICBDTElDSzogJ2NsaWNrJywKICBLRVlET1dOOiAna2V5ZG93bicsCiAgS0VZVVA6ICdrZXl1cCcsCiAgTU9VU0VET1dOOiAnbW91c2Vkb3duJywKICBNT1VTRVVQOiAnbW91c2V1cCcsCiAgUkVTSVpFOiAncmVzaXplJywKICBUT1VDSEVORDogJ3RvdWNoZW5kJywKICBUT1VDSFNUQVJUOiAndG91Y2hzdGFydCcsCiAgVklTSUJJTElUWTogJ3Zpc2liaWxpdHljaGFuZ2UnLAogIEJMVVI6ICdibHVyJywKICBGT0NVUzogJ2ZvY3VzJywKICBMT0FEOiAnbG9hZCcKfTsKCgpSdW5uZXIucHJvdG90eXBlID0gewogIC8qKgogICAqIFdoZXRoZXIgdGhlIGVhc3RlciBlZ2cgaGFzIGJlZW4gZGlzYWJsZWQuIENyT1MgZW50ZXJwcmlzZSBlbnJvbGxlZCBkZXZpY2VzLgogICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICovCiAgaXNEaXNhYmxlZDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gbG9hZFRpbWVEYXRhICYmIGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygnZGlzYWJsZWRFYXN0ZXJFZ2cnKTsKICB9LAoKICAvKioKICAgKiBGb3IgZGlzYWJsZWQgaW5zdGFuY2VzLCBzZXQgdXAgYSBzbmFja2JhciB3aXRoIHRoZSBkaXNhYmxlZCBtZXNzYWdlLgogICAqLwogIHNldHVwRGlzYWJsZWRSdW5uZXI6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5jb250YWluZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy5jb250YWluZXJFbC5jbGFzc05hbWUgPSBSdW5uZXIuY2xhc3Nlcy5TTkFDS0JBUjsKICAgIHRoaXMuY29udGFpbmVyRWwudGV4dENvbnRlbnQgPSBsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2Rpc2FibGVkRWFzdGVyRWdnJyk7CiAgICB0aGlzLm91dGVyQ29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXJFbCk7CgogICAgLy8gU2hvdyBub3RpZmljYXRpb24gd2hlbiB0aGUgYWN0aXZhdGlvbiBrZXkgaXMgcHJlc3NlZC4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlET1dOLCBmdW5jdGlvbihlKSB7CiAgICAgIGlmIChSdW5uZXIua2V5Y29kZXMuSlVNUFtlLmtleUNvZGVdKSB7CiAgICAgICAgdGhpcy5jb250YWluZXJFbC5jbGFzc0xpc3QuYWRkKFJ1bm5lci5jbGFzc2VzLlNOQUNLQkFSX1NIT1cpOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pY29uJykuY2xhc3NMaXN0LmFkZCgnaWNvbi1kaXNhYmxlZCcpOwogICAgICB9CiAgICB9LmJpbmQodGhpcykpOwogIH0sCgogIC8qKgogICAqIFNldHRpbmcgaW5kaXZpZHVhbCBzZXR0aW5ncyBmb3IgZGVidWdnaW5nLgogICAqIEBwYXJhbSB7c3RyaW5nfSBzZXR0aW5nCiAgICogQHBhcmFtIHsqfSB2YWx1ZQogICAqLwogIHVwZGF0ZUNvbmZpZ1NldHRpbmc6IGZ1bmN0aW9uKHNldHRpbmcsIHZhbHVlKSB7CiAgICBpZiAoc2V0dGluZyBpbiB0aGlzLmNvbmZpZyAmJiB2YWx1ZSAhPSB1bmRlZmluZWQpIHsKICAgICAgdGhpcy5jb25maWdbc2V0dGluZ10gPSB2YWx1ZTsKCiAgICAgIHN3aXRjaCAoc2V0dGluZykgewogICAgICAgIGNhc2UgJ0dSQVZJVFknOgogICAgICAgIGNhc2UgJ01JTl9KVU1QX0hFSUdIVCc6CiAgICAgICAgY2FzZSAnU1BFRURfRFJPUF9DT0VGRklDSUVOVCc6CiAgICAgICAgICB0aGlzLnRSZXguY29uZmlnW3NldHRpbmddID0gdmFsdWU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdJTklUSUFMX0pVTVBfVkVMT0NJVFknOgogICAgICAgICAgdGhpcy50UmV4LnNldEp1bXBWZWxvY2l0eSh2YWx1ZSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdTUEVFRCc6CiAgICAgICAgICB0aGlzLnNldFNwZWVkKHZhbHVlKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ2FjaGUgdGhlIGFwcHJvcHJpYXRlIGltYWdlIHNwcml0ZSBmcm9tIHRoZSBwYWdlIGFuZCBnZXQgdGhlIHNwcml0ZSBzaGVldAogICAqIGRlZmluaXRpb24uCiAgICovCiAgbG9hZEltYWdlczogZnVuY3Rpb24oKSB7CiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgUnVubmVyLmltYWdlU3ByaXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29mZmxpbmUtcmVzb3VyY2VzLTJ4Jyk7CiAgICAgIHRoaXMuc3ByaXRlRGVmID0gUnVubmVyLnNwcml0ZURlZmluaXRpb24uSERQSTsKICAgIH0gZWxzZSB7CiAgICAgIFJ1bm5lci5pbWFnZVNwcml0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvZmZsaW5lLXJlc291cmNlcy0xeCcpOwogICAgICB0aGlzLnNwcml0ZURlZiA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkxEUEk7CiAgICB9CgogICAgaWYgKFJ1bm5lci5pbWFnZVNwcml0ZS5jb21wbGV0ZSkgewogICAgICB0aGlzLmluaXQoKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIElmIHRoZSBpbWFnZXMgYXJlIG5vdCB5ZXQgbG9hZGVkLCBhZGQgYSBsaXN0ZW5lci4KICAgICAgUnVubmVyLmltYWdlU3ByaXRlLmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5MT0FELAogICAgICAgICAgdGhpcy5pbml0LmJpbmQodGhpcykpOwogICAgfQogIH0sCgogIC8qKgogICAqIExvYWQgYW5kIGRlY29kZSBiYXNlIDY0IGVuY29kZWQgc291bmRzLgogICAqLwogIGxvYWRTb3VuZHM6IGZ1bmN0aW9uKCkgewogICAgaWYgKCFJU19JT1MpIHsKICAgICAgdGhpcy5hdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7CgogICAgICB2YXIgcmVzb3VyY2VUZW1wbGF0ZSA9CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbmZpZy5SRVNPVVJDRV9URU1QTEFURV9JRCkuY29udGVudDsKCiAgICAgIGZvciAodmFyIHNvdW5kIGluIFJ1bm5lci5zb3VuZHMpIHsKICAgICAgICB2YXIgc291bmRTcmMgPQogICAgICAgICAgICByZXNvdXJjZVRlbXBsYXRlLmdldEVsZW1lbnRCeUlkKFJ1bm5lci5zb3VuZHNbc291bmRdKS5zcmM7CiAgICAgICAgc291bmRTcmMgPSBzb3VuZFNyYy5zdWJzdHIoc291bmRTcmMuaW5kZXhPZignLCcpICsgMSk7CiAgICAgICAgdmFyIGJ1ZmZlciA9IGRlY29kZUJhc2U2NFRvQXJyYXlCdWZmZXIoc291bmRTcmMpOwoKICAgICAgICAvLyBBc3luYywgc28gbm8gZ3VhcmFudGVlIG9mIG9yZGVyIGluIGFycmF5LgogICAgICAgIHRoaXMuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShidWZmZXIsIGZ1bmN0aW9uKGluZGV4LCBhdWRpb0RhdGEpIHsKICAgICAgICAgICAgdGhpcy5zb3VuZEZ4W2luZGV4XSA9IGF1ZGlvRGF0YTsKICAgICAgICAgIH0uYmluZCh0aGlzLCBzb3VuZCkpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogU2V0cyB0aGUgZ2FtZSBzcGVlZC4gQWRqdXN0IHRoZSBzcGVlZCBhY2NvcmRpbmdseSBpZiBvbiBhIHNtYWxsZXIgc2NyZWVuLgogICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRfc3BlZWQKICAgKi8KICBzZXRTcGVlZDogZnVuY3Rpb24ob3B0X3NwZWVkKSB7CiAgICB2YXIgc3BlZWQgPSBvcHRfc3BlZWQgfHwgdGhpcy5jdXJyZW50U3BlZWQ7CgogICAgLy8gUmVkdWNlIHRoZSBzcGVlZCBvbiBzbWFsbGVyIG1vYmlsZSBzY3JlZW5zLgogICAgaWYgKHRoaXMuZGltZW5zaW9ucy5XSURUSCA8IERFRkFVTFRfV0lEVEgpIHsKICAgICAgdmFyIG1vYmlsZVNwZWVkID0gc3BlZWQgKiB0aGlzLmRpbWVuc2lvbnMuV0lEVEggLyBERUZBVUxUX1dJRFRIICoKICAgICAgICAgIHRoaXMuY29uZmlnLk1PQklMRV9TUEVFRF9DT0VGRklDSUVOVDsKICAgICAgdGhpcy5jdXJyZW50U3BlZWQgPSBtb2JpbGVTcGVlZCA+IHNwZWVkID8gc3BlZWQgOiBtb2JpbGVTcGVlZDsKICAgIH0gZWxzZSBpZiAob3B0X3NwZWVkKSB7CiAgICAgIHRoaXMuY3VycmVudFNwZWVkID0gb3B0X3NwZWVkOwogICAgfQogIH0sCgogIC8qKgogICAqIEdhbWUgaW5pdGlhbGlzZXIuCiAgICovCiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAvLyBIaWRlIHRoZSBzdGF0aWMgaWNvbi4KICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgUnVubmVyLmNsYXNzZXMuSUNPTikuc3R5bGUudmlzaWJpbGl0eSA9CiAgICAgICAgJ2hpZGRlbic7CgogICAgdGhpcy5hZGp1c3REaW1lbnNpb25zKCk7CiAgICB0aGlzLnNldFNwZWVkKCk7CgogICAgdGhpcy5jb250YWluZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy5jb250YWluZXJFbC5jbGFzc05hbWUgPSBSdW5uZXIuY2xhc3Nlcy5DT05UQUlORVI7CgogICAgLy8gUGxheWVyIGNhbnZhcyBjb250YWluZXIuCiAgICB0aGlzLmNhbnZhcyA9IGNyZWF0ZUNhbnZhcyh0aGlzLmNvbnRhaW5lckVsLCB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLkhFSUdIVCwgUnVubmVyLmNsYXNzZXMuUExBWUVSKTsKCiAgICB0aGlzLmNhbnZhc0N0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICB0aGlzLmNhbnZhc0N0eC5maWxsU3R5bGUgPSAnI2Y3ZjdmNyc7CiAgICB0aGlzLmNhbnZhc0N0eC5maWxsKCk7CiAgICBSdW5uZXIudXBkYXRlQ2FudmFzU2NhbGluZyh0aGlzLmNhbnZhcyk7CgogICAgLy8gSG9yaXpvbiBjb250YWlucyBjbG91ZHMsIG9ic3RhY2xlcyBhbmQgdGhlIGdyb3VuZC4KICAgIHRoaXMuaG9yaXpvbiA9IG5ldyBIb3Jpem9uKHRoaXMuY2FudmFzLCB0aGlzLnNwcml0ZURlZiwgdGhpcy5kaW1lbnNpb25zLAogICAgICAgIHRoaXMuY29uZmlnLkdBUF9DT0VGRklDSUVOVCk7CgogICAgLy8gRGlzdGFuY2UgbWV0ZXIKICAgIHRoaXMuZGlzdGFuY2VNZXRlciA9IG5ldyBEaXN0YW5jZU1ldGVyKHRoaXMuY2FudmFzLAogICAgICAgICAgdGhpcy5zcHJpdGVEZWYuVEVYVF9TUFJJVEUsIHRoaXMuZGltZW5zaW9ucy5XSURUSCk7CgogICAgLy8gRHJhdyB0LXJleAogICAgdGhpcy50UmV4ID0gbmV3IFRyZXgodGhpcy5jYW52YXMsIHRoaXMuc3ByaXRlRGVmLlRSRVgpOwoKICAgIHRoaXMub3V0ZXJDb250YWluZXJFbC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lckVsKTsKCiAgICBpZiAoSVNfTU9CSUxFKSB7CiAgICAgIHRoaXMuY3JlYXRlVG91Y2hDb250cm9sbGVyKCk7CiAgICB9CgogICAgdGhpcy5zdGFydExpc3RlbmluZygpOwogICAgdGhpcy51cGRhdGUoKTsKCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlJFU0laRSwKICAgICAgICB0aGlzLmRlYm91bmNlUmVzaXplLmJpbmQodGhpcykpOwogIH0sCgogIC8qKgogICAqIENyZWF0ZSB0aGUgdG91Y2ggY29udHJvbGxlci4gQSBkaXYgdGhhdCBjb3ZlcnMgd2hvbGUgc2NyZWVuLgogICAqLwogIGNyZWF0ZVRvdWNoQ29udHJvbGxlcjogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgdGhpcy50b3VjaENvbnRyb2xsZXIuY2xhc3NOYW1lID0gUnVubmVyLmNsYXNzZXMuVE9VQ0hfQ09OVFJPTExFUjsKICB9LAoKICAvKioKICAgKiBEZWJvdW5jZSB0aGUgcmVzaXplIGV2ZW50LgogICAqLwogIGRlYm91bmNlUmVzaXplOiBmdW5jdGlvbigpIHsKICAgIGlmICghdGhpcy5yZXNpemVUaW1lcklkXykgewogICAgICB0aGlzLnJlc2l6ZVRpbWVySWRfID0KICAgICAgICAgIHNldEludGVydmFsKHRoaXMuYWRqdXN0RGltZW5zaW9ucy5iaW5kKHRoaXMpLCAyNTApOwogICAgfQogIH0sCgogIC8qKgogICAqIEFkanVzdCBnYW1lIHNwYWNlIGRpbWVuc2lvbnMgb24gcmVzaXplLgogICAqLwogIGFkanVzdERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlc2l6ZVRpbWVySWRfKTsKICAgIHRoaXMucmVzaXplVGltZXJJZF8gPSBudWxsOwoKICAgIHZhciBib3hTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm91dGVyQ29udGFpbmVyRWwpOwogICAgdmFyIHBhZGRpbmcgPSBOdW1iZXIoYm94U3R5bGVzLnBhZGRpbmdMZWZ0LnN1YnN0cigwLAogICAgICAgIGJveFN0eWxlcy5wYWRkaW5nTGVmdC5sZW5ndGggLSAyKSk7CgogICAgdGhpcy5kaW1lbnNpb25zLldJRFRIID0gdGhpcy5vdXRlckNvbnRhaW5lckVsLm9mZnNldFdpZHRoIC0gcGFkZGluZyAqIDI7CgogICAgLy8gUmVkcmF3IHRoZSBlbGVtZW50cyBiYWNrIG9udG8gdGhlIGNhbnZhcy4KICAgIGlmICh0aGlzLmNhbnZhcykgewogICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5XSURUSDsKICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLkhFSUdIVDsKCiAgICAgIFJ1bm5lci51cGRhdGVDYW52YXNTY2FsaW5nKHRoaXMuY2FudmFzKTsKCiAgICAgIHRoaXMuZGlzdGFuY2VNZXRlci5jYWxjWFBvcyh0aGlzLmRpbWVuc2lvbnMuV0lEVEgpOwogICAgICB0aGlzLmNsZWFyQ2FudmFzKCk7CiAgICAgIHRoaXMuaG9yaXpvbi51cGRhdGUoMCwgMCwgdHJ1ZSk7CiAgICAgIHRoaXMudFJleC51cGRhdGUoMCk7CgogICAgICAvLyBPdXRlciBjb250YWluZXIgYW5kIGRpc3RhbmNlIG1ldGVyLgogICAgICBpZiAodGhpcy5wbGF5aW5nIHx8IHRoaXMuY3Jhc2hlZCB8fCB0aGlzLnBhdXNlZCkgewogICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUud2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuV0lEVEggKyAncHgnOwogICAgICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUuaGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLkhFSUdIVCArICdweCc7CiAgICAgICAgdGhpcy5kaXN0YW5jZU1ldGVyLnVwZGF0ZSgwLCBNYXRoLmNlaWwodGhpcy5kaXN0YW5jZVJhbikpOwogICAgICAgIHRoaXMuc3RvcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMudFJleC5kcmF3KDAsIDApOwogICAgICB9CgogICAgICAvLyBHYW1lIG92ZXIgcGFuZWwuCiAgICAgIGlmICh0aGlzLmNyYXNoZWQgJiYgdGhpcy5nYW1lT3ZlclBhbmVsKSB7CiAgICAgICAgdGhpcy5nYW1lT3ZlclBhbmVsLnVwZGF0ZURpbWVuc2lvbnModGhpcy5kaW1lbnNpb25zLldJRFRIKTsKICAgICAgICB0aGlzLmdhbWVPdmVyUGFuZWwuZHJhdygpOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUGxheSB0aGUgZ2FtZSBpbnRyby4KICAgKiBDYW52YXMgY29udGFpbmVyIHdpZHRoIGV4cGFuZHMgb3V0IHRvIHRoZSBmdWxsIHdpZHRoLgogICAqLwogIHBsYXlJbnRybzogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuYWN0aXZhdGVkICYmICF0aGlzLmNyYXNoZWQpIHsKICAgICAgdGhpcy5wbGF5aW5nSW50cm8gPSB0cnVlOwogICAgICB0aGlzLnRSZXgucGxheWluZ0ludHJvID0gdHJ1ZTsKCiAgICAgIC8vIENTUyBhbmltYXRpb24gZGVmaW5pdGlvbi4KICAgICAgdmFyIGtleWZyYW1lcyA9ICdALXdlYmtpdC1rZXlmcmFtZXMgaW50cm8geyAnICsKICAgICAgICAgICAgJ2Zyb20geyB3aWR0aDonICsgVHJleC5jb25maWcuV0lEVEggKyAncHggfScgKwogICAgICAgICAgICAndG8geyB3aWR0aDogJyArIHRoaXMuZGltZW5zaW9ucy5XSURUSCArICdweCB9JyArCiAgICAgICAgICAnfSc7CiAgICAgIGRvY3VtZW50LnN0eWxlU2hlZXRzWzBdLmluc2VydFJ1bGUoa2V5ZnJhbWVzLCAwKTsKCiAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLkFOSU1fRU5ELAogICAgICAgICAgdGhpcy5zdGFydEdhbWUuYmluZCh0aGlzKSk7CgogICAgICB0aGlzLmNvbnRhaW5lckVsLnN0eWxlLndlYmtpdEFuaW1hdGlvbiA9ICdpbnRybyAuNHMgZWFzZS1vdXQgMSBib3RoJzsKICAgICAgdGhpcy5jb250YWluZXJFbC5zdHlsZS53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5XSURUSCArICdweCc7CgogICAgICBpZiAodGhpcy50b3VjaENvbnRyb2xsZXIpIHsKICAgICAgICB0aGlzLm91dGVyQ29udGFpbmVyRWwuYXBwZW5kQ2hpbGQodGhpcy50b3VjaENvbnRyb2xsZXIpOwogICAgICB9CiAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICAgIHRoaXMuYWN0aXZhdGVkID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAodGhpcy5jcmFzaGVkKSB7CiAgICAgIHRoaXMucmVzdGFydCgpOwogICAgfQogIH0sCgoKICAvKioKICAgKiBVcGRhdGUgdGhlIGdhbWUgc3RhdHVzIHRvIHN0YXJ0ZWQuCiAgICovCiAgc3RhcnRHYW1lOiBmdW5jdGlvbigpIHsKICAgIHRoaXMucnVubmluZ1RpbWUgPSAwOwogICAgdGhpcy5wbGF5aW5nSW50cm8gPSBmYWxzZTsKICAgIHRoaXMudFJleC5wbGF5aW5nSW50cm8gPSBmYWxzZTsKICAgIHRoaXMuY29udGFpbmVyRWwuc3R5bGUud2Via2l0QW5pbWF0aW9uID0gJyc7CiAgICB0aGlzLnBsYXlDb3VudCsrOwoKICAgIC8vIEhhbmRsZSB0YWJiaW5nIG9mZiB0aGUgcGFnZS4gUGF1c2UgdGhlIGN1cnJlbnQgZ2FtZS4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5WSVNJQklMSVRZLAogICAgICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKSk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5CTFVSLAogICAgICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKSk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5GT0NVUywKICAgICAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlLmJpbmQodGhpcykpOwogIH0sCgogIGNsZWFyQ2FudmFzOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuY2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLkhFSUdIVCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBnYW1lIGZyYW1lIGFuZCBzY2hlZHVsZXMgdGhlIG5leHQgb25lLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnVwZGF0ZVBlbmRpbmcgPSBmYWxzZTsKCiAgICB2YXIgbm93ID0gZ2V0VGltZVN0YW1wKCk7CiAgICB2YXIgZGVsdGFUaW1lID0gbm93IC0gKHRoaXMudGltZSB8fCBub3cpOwogICAgdGhpcy50aW1lID0gbm93OwoKICAgIGlmICh0aGlzLnBsYXlpbmcpIHsKICAgICAgdGhpcy5jbGVhckNhbnZhcygpOwoKICAgICAgaWYgKHRoaXMudFJleC5qdW1waW5nKSB7CiAgICAgICAgdGhpcy50UmV4LnVwZGF0ZUp1bXAoZGVsdGFUaW1lKTsKICAgICAgfQoKICAgICAgdGhpcy5ydW5uaW5nVGltZSArPSBkZWx0YVRpbWU7CiAgICAgIHZhciBoYXNPYnN0YWNsZXMgPSB0aGlzLnJ1bm5pbmdUaW1lID4gdGhpcy5jb25maWcuQ0xFQVJfVElNRTsKCiAgICAgIC8vIEZpcnN0IGp1bXAgdHJpZ2dlcnMgdGhlIGludHJvLgogICAgICBpZiAodGhpcy50UmV4Lmp1bXBDb3VudCA9PSAxICYmICF0aGlzLnBsYXlpbmdJbnRybykgewogICAgICAgIHRoaXMucGxheUludHJvKCk7CiAgICAgIH0KCiAgICAgIC8vIFRoZSBob3Jpem9uIGRvZXNuJ3QgbW92ZSB1bnRpbCB0aGUgaW50cm8gaXMgb3Zlci4KICAgICAgaWYgKHRoaXMucGxheWluZ0ludHJvKSB7CiAgICAgICAgdGhpcy5ob3Jpem9uLnVwZGF0ZSgwLCB0aGlzLmN1cnJlbnRTcGVlZCwgaGFzT2JzdGFjbGVzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBkZWx0YVRpbWUgPSAhdGhpcy5hY3RpdmF0ZWQgPyAwIDogZGVsdGFUaW1lOwogICAgICAgIHRoaXMuaG9yaXpvbi51cGRhdGUoZGVsdGFUaW1lLCB0aGlzLmN1cnJlbnRTcGVlZCwgaGFzT2JzdGFjbGVzLAogICAgICAgICAgICB0aGlzLmludmVydGVkKTsKICAgICAgfQoKICAgICAgLy8gQ2hlY2sgZm9yIGNvbGxpc2lvbnMuCiAgICAgIHZhciBjb2xsaXNpb24gPSBoYXNPYnN0YWNsZXMgJiYKICAgICAgICAgIGNoZWNrRm9yQ29sbGlzaW9uKHRoaXMuaG9yaXpvbi5vYnN0YWNsZXNbMF0sIHRoaXMudFJleCk7CgogICAgICBpZiAoIWNvbGxpc2lvbikgewogICAgICAgIHRoaXMuZGlzdGFuY2VSYW4gKz0gdGhpcy5jdXJyZW50U3BlZWQgKiBkZWx0YVRpbWUgLyB0aGlzLm1zUGVyRnJhbWU7CgogICAgICAgIGlmICh0aGlzLmN1cnJlbnRTcGVlZCA8IHRoaXMuY29uZmlnLk1BWF9TUEVFRCkgewogICAgICAgICAgdGhpcy5jdXJyZW50U3BlZWQgKz0gdGhpcy5jb25maWcuQUNDRUxFUkFUSU9OOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmdhbWVPdmVyKCk7CiAgICAgIH0KCiAgICAgIHZhciBwbGF5QWNoaWV2ZW1lbnRTb3VuZCA9IHRoaXMuZGlzdGFuY2VNZXRlci51cGRhdGUoZGVsdGFUaW1lLAogICAgICAgICAgTWF0aC5jZWlsKHRoaXMuZGlzdGFuY2VSYW4pKTsKCiAgICAgIGlmIChwbGF5QWNoaWV2ZW1lbnRTb3VuZCkgewogICAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuc291bmRGeC5TQ09SRSk7CiAgICAgIH0KCiAgICAgIC8vIE5pZ2h0IG1vZGUuCiAgICAgIGlmICh0aGlzLmludmVydFRpbWVyID4gdGhpcy5jb25maWcuSU5WRVJUX0ZBREVfRFVSQVRJT04pIHsKICAgICAgICB0aGlzLmludmVydFRpbWVyID0gMDsKICAgICAgICB0aGlzLmludmVydFRyaWdnZXIgPSBmYWxzZTsKICAgICAgICB0aGlzLmludmVydCgpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuaW52ZXJ0VGltZXIpIHsKICAgICAgICB0aGlzLmludmVydFRpbWVyICs9IGRlbHRhVGltZTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgYWN0dWFsRGlzdGFuY2UgPQogICAgICAgICAgICB0aGlzLmRpc3RhbmNlTWV0ZXIuZ2V0QWN0dWFsRGlzdGFuY2UoTWF0aC5jZWlsKHRoaXMuZGlzdGFuY2VSYW4pKTsKCiAgICAgICAgaWYgKGFjdHVhbERpc3RhbmNlID4gMCkgewogICAgICAgICAgdGhpcy5pbnZlcnRUcmlnZ2VyID0gIShhY3R1YWxEaXN0YW5jZSAlCiAgICAgICAgICAgICAgdGhpcy5jb25maWcuSU5WRVJUX0RJU1RBTkNFKTsKCiAgICAgICAgICBpZiAodGhpcy5pbnZlcnRUcmlnZ2VyICYmIHRoaXMuaW52ZXJ0VGltZXIgPT09IDApIHsKICAgICAgICAgICAgdGhpcy5pbnZlcnRUaW1lciArPSBkZWx0YVRpbWU7CiAgICAgICAgICAgIHRoaXMuaW52ZXJ0KCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKHRoaXMucGxheWluZyB8fCAoIXRoaXMuYWN0aXZhdGVkICYmCiAgICAgICAgdGhpcy50UmV4LmJsaW5rQ291bnQgPCBSdW5uZXIuY29uZmlnLk1BWF9CTElOS19DT1VOVCkpIHsKICAgICAgdGhpcy50UmV4LnVwZGF0ZShkZWx0YVRpbWUpOwogICAgICB0aGlzLnNjaGVkdWxlTmV4dFVwZGF0ZSgpOwogICAgfQogIH0sCgogIC8qKgogICAqIEV2ZW50IGhhbmRsZXIuCiAgICovCiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHsKICAgIHJldHVybiAoZnVuY3Rpb24oZXZ0VHlwZSwgZXZlbnRzKSB7CiAgICAgIHN3aXRjaCAoZXZ0VHlwZSkgewogICAgICAgIGNhc2UgZXZlbnRzLktFWURPV046CiAgICAgICAgY2FzZSBldmVudHMuVE9VQ0hTVEFSVDoKICAgICAgICBjYXNlIGV2ZW50cy5NT1VTRURPV046CiAgICAgICAgICB0aGlzLm9uS2V5RG93bihlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgZXZlbnRzLktFWVVQOgogICAgICAgIGNhc2UgZXZlbnRzLlRPVUNIRU5EOgogICAgICAgIGNhc2UgZXZlbnRzLk1PVVNFVVA6CiAgICAgICAgICB0aGlzLm9uS2V5VXAoZSk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfS5iaW5kKHRoaXMpKShlLnR5cGUsIFJ1bm5lci5ldmVudHMpOwogIH0sCgogIC8qKgogICAqIEJpbmQgcmVsZXZhbnQga2V5IC8gbW91c2UgLyB0b3VjaCBsaXN0ZW5lcnMuCiAgICovCiAgc3RhcnRMaXN0ZW5pbmc6IGZ1bmN0aW9uKCkgewogICAgLy8gS2V5cy4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlET1dOLCB0aGlzKTsKICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5LRVlVUCwgdGhpcyk7CgogICAgaWYgKElTX01PQklMRSkgewogICAgICAvLyBNb2JpbGUgb25seSB0b3VjaCBkZXZpY2VzLgogICAgICB0aGlzLnRvdWNoQ29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuVE9VQ0hTVEFSVCwgdGhpcyk7CiAgICAgIHRoaXMudG91Y2hDb250cm9sbGVyLmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5UT1VDSEVORCwgdGhpcyk7CiAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQsIHRoaXMpOwogICAgfSBlbHNlIHsKICAgICAgLy8gTW91c2UuCiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5NT1VTRURPV04sIHRoaXMpOwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuTU9VU0VVUCwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMuCiAgICovCiAgc3RvcExpc3RlbmluZzogZnVuY3Rpb24oKSB7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuS0VZRE9XTiwgdGhpcyk7CiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuS0VZVVAsIHRoaXMpOwoKICAgIGlmIChJU19NT0JJTEUpIHsKICAgICAgdGhpcy50b3VjaENvbnRyb2xsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQsIHRoaXMpOwogICAgICB0aGlzLnRvdWNoQ29udHJvbGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuVE9VQ0hFTkQsIHRoaXMpOwogICAgICB0aGlzLmNvbnRhaW5lckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5UT1VDSFNUQVJULCB0aGlzKTsKICAgIH0gZWxzZSB7CiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoUnVubmVyLmV2ZW50cy5NT1VTRURPV04sIHRoaXMpOwogICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFJ1bm5lci5ldmVudHMuTU9VU0VVUCwgdGhpcyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUHJvY2VzcyBrZXlkb3duLgogICAqIEBwYXJhbSB7RXZlbnR9IGUKICAgKi8KICBvbktleURvd246IGZ1bmN0aW9uKGUpIHsKICAgIC8vIFByZXZlbnQgbmF0aXZlIHBhZ2Ugc2Nyb2xsaW5nIHdoaWxzdCB0YXBwaW5nIG9uIG1vYmlsZS4KICAgIGlmIChJU19NT0JJTEUgJiYgdGhpcy5wbGF5aW5nKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIH0KCiAgICBpZiAoIXRoaXMuY3Jhc2hlZCAmJiAhdGhpcy5wYXVzZWQpIHsKICAgICAgaWYgKFJ1bm5lci5rZXljb2Rlcy5KVU1QW2Uua2V5Q29kZV0gfHwKICAgICAgICAgIGUudHlwZSA9PSBSdW5uZXIuZXZlbnRzLlRPVUNIU1RBUlQpIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgLy8gU3RhcnRpbmcgdGhlIGdhbWUgZm9yIHRoZSBmaXJzdCB0aW1lLgogICAgICAgIGlmICghdGhpcy5wbGF5aW5nKSB7CiAgICAgICAgICB0aGlzLmxvYWRTb3VuZHMoKTsKICAgICAgICAgIHRoaXMucGxheWluZyA9IHRydWU7CiAgICAgICAgICB0aGlzLnVwZGF0ZSgpOwogICAgICAgICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICAgICAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tFYXN0ZXJFZ2coKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gU3RhcnQganVtcC4KICAgICAgICBpZiAoIXRoaXMudFJleC5qdW1waW5nICYmICF0aGlzLnRSZXguZHVja2luZykgewogICAgICAgICAgdGhpcy5wbGF5U291bmQodGhpcy5zb3VuZEZ4LkJVVFRPTl9QUkVTUyk7CiAgICAgICAgICB0aGlzLnRSZXguc3RhcnRKdW1wKHRoaXMuY3VycmVudFNwZWVkKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhpcy5wbGF5aW5nICYmIFJ1bm5lci5rZXljb2Rlcy5EVUNLW2Uua2V5Q29kZV0pIHsKICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgaWYgKHRoaXMudFJleC5qdW1waW5nKSB7CiAgICAgICAgICAvLyBTcGVlZCBkcm9wLCBhY3RpdmF0ZWQgb25seSB3aGVuIGp1bXAga2V5IGlzIG5vdCBwcmVzc2VkLgogICAgICAgICAgdGhpcy50UmV4LnNldFNwZWVkRHJvcCgpOwogICAgICAgIH0gZWxzZSBpZiAoIXRoaXMudFJleC5qdW1waW5nICYmICF0aGlzLnRSZXguZHVja2luZykgewogICAgICAgICAgLy8gRHVjay4KICAgICAgICAgIHRoaXMudFJleC5zZXREdWNrKHRydWUpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmICh0aGlzLmNyYXNoZWQgJiYgZS50eXBlID09IFJ1bm5lci5ldmVudHMuVE9VQ0hTVEFSVCAmJgogICAgICAgIGUuY3VycmVudFRhcmdldCA9PSB0aGlzLmNvbnRhaW5lckVsKSB7CiAgICAgIHRoaXMucmVzdGFydCgpOwogICAgfQogIH0sCgoKICAvKioKICAgKiBQcm9jZXNzIGtleSB1cC4KICAgKiBAcGFyYW0ge0V2ZW50fSBlCiAgICovCiAgb25LZXlVcDogZnVuY3Rpb24oZSkgewogICAgdmFyIGtleUNvZGUgPSBTdHJpbmcoZS5rZXlDb2RlKTsKICAgIHZhciBpc2p1bXBLZXkgPSBSdW5uZXIua2V5Y29kZXMuSlVNUFtrZXlDb2RlXSB8fAogICAgICAgZS50eXBlID09IFJ1bm5lci5ldmVudHMuVE9VQ0hFTkQgfHwKICAgICAgIGUudHlwZSA9PSBSdW5uZXIuZXZlbnRzLk1PVVNFRE9XTjsKCiAgICBpZiAodGhpcy5pc1J1bm5pbmcoKSAmJiBpc2p1bXBLZXkpIHsKICAgICAgdGhpcy50UmV4LmVuZEp1bXAoKTsKICAgIH0gZWxzZSBpZiAoUnVubmVyLmtleWNvZGVzLkRVQ0tba2V5Q29kZV0pIHsKICAgICAgdGhpcy50UmV4LnNwZWVkRHJvcCA9IGZhbHNlOwogICAgICB0aGlzLnRSZXguc2V0RHVjayhmYWxzZSk7CiAgICB9IGVsc2UgaWYgKHRoaXMuY3Jhc2hlZCkgewogICAgICAvLyBDaGVjayB0aGF0IGVub3VnaCB0aW1lIGhhcyBlbGFwc2VkIGJlZm9yZSBhbGxvd2luZyBqdW1wIGtleSB0byByZXN0YXJ0LgogICAgICB2YXIgZGVsdGFUaW1lID0gZ2V0VGltZVN0YW1wKCkgLSB0aGlzLnRpbWU7CgogICAgICBpZiAoUnVubmVyLmtleWNvZGVzLlJFU1RBUlRba2V5Q29kZV0gfHwgdGhpcy5pc0xlZnRDbGlja09uQ2FudmFzKGUpIHx8CiAgICAgICAgICAoZGVsdGFUaW1lID49IHRoaXMuY29uZmlnLkdBTUVPVkVSX0NMRUFSX1RJTUUgJiYKICAgICAgICAgIFJ1bm5lci5rZXljb2Rlcy5KVU1QW2tleUNvZGVdKSkgewogICAgICAgIHRoaXMucmVzdGFydCgpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMucGF1c2VkICYmIGlzanVtcEtleSkgewogICAgICAvLyBSZXNldCB0aGUganVtcCBzdGF0ZQogICAgICB0aGlzLnRSZXgucmVzZXQoKTsKICAgICAgdGhpcy5wbGF5KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBldmVudCB3YXMgYSBsZWZ0IGNsaWNrIG9uIGNhbnZhcy4KICAgKiBPbiBXaW5kb3dzIHJpZ2h0IGNsaWNrIGlzIHJlZ2lzdGVyZWQgYXMgYSBjbGljay4KICAgKiBAcGFyYW0ge0V2ZW50fSBlCiAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgKi8KICBpc0xlZnRDbGlja09uQ2FudmFzOiBmdW5jdGlvbihlKSB7CiAgICByZXR1cm4gZS5idXR0b24gIT0gbnVsbCAmJiBlLmJ1dHRvbiA8IDIgJiYKICAgICAgICBlLnR5cGUgPT0gUnVubmVyLmV2ZW50cy5NT1VTRVVQICYmIGUudGFyZ2V0ID09IHRoaXMuY2FudmFzOwogIH0sCgogIC8qKgogICAqIFJlcXVlc3RBbmltYXRpb25GcmFtZSB3cmFwcGVyLgogICAqLwogIHNjaGVkdWxlTmV4dFVwZGF0ZTogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMudXBkYXRlUGVuZGluZykgewogICAgICB0aGlzLnVwZGF0ZVBlbmRpbmcgPSB0cnVlOwogICAgICB0aGlzLnJhcUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlLmJpbmQodGhpcykpOwogICAgfQogIH0sCgogIC8qKgogICAqIFdoZXRoZXIgdGhlIGdhbWUgaXMgcnVubmluZy4KICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGlzUnVubmluZzogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gISF0aGlzLnJhcUlkOwogIH0sCgogIC8qKgogICAqIEdhbWUgb3ZlciBzdGF0ZS4KICAgKi8KICBnYW1lT3ZlcjogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnBsYXlTb3VuZCh0aGlzLnNvdW5kRnguSElUKTsKICAgIHZpYnJhdGUoMjAwKTsKCiAgICB0aGlzLnN0b3AoKTsKICAgIHRoaXMuY3Jhc2hlZCA9IHRydWU7CiAgICB0aGlzLmRpc3RhbmNlTWV0ZXIuYWNoZWl2ZW1lbnQgPSBmYWxzZTsKCiAgICB0aGlzLnRSZXgudXBkYXRlKDEwMCwgVHJleC5zdGF0dXMuQ1JBU0hFRCk7CgogICAgLy8gR2FtZSBvdmVyIHBhbmVsLgogICAgaWYgKCF0aGlzLmdhbWVPdmVyUGFuZWwpIHsKICAgICAgdGhpcy5nYW1lT3ZlclBhbmVsID0gbmV3IEdhbWVPdmVyUGFuZWwodGhpcy5jYW52YXMsCiAgICAgICAgICB0aGlzLnNwcml0ZURlZi5URVhUX1NQUklURSwgdGhpcy5zcHJpdGVEZWYuUkVTVEFSVCwKICAgICAgICAgIHRoaXMuZGltZW5zaW9ucyk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmdhbWVPdmVyUGFuZWwuZHJhdygpOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgaGlnaCBzY29yZS4KICAgIGlmICh0aGlzLmRpc3RhbmNlUmFuID4gdGhpcy5oaWdoZXN0U2NvcmUpIHsKICAgICAgdGhpcy5oaWdoZXN0U2NvcmUgPSBNYXRoLmNlaWwodGhpcy5kaXN0YW5jZVJhbik7CiAgICAgIHRoaXMuZGlzdGFuY2VNZXRlci5zZXRIaWdoU2NvcmUodGhpcy5oaWdoZXN0U2NvcmUpOwogICAgfQoKICAgIC8vIFJlc2V0IHRoZSB0aW1lIGNsb2NrLgogICAgdGhpcy50aW1lID0gZ2V0VGltZVN0YW1wKCk7CiAgfSwKCiAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnBsYXlpbmcgPSBmYWxzZTsKICAgIHRoaXMucGF1c2VkID0gdHJ1ZTsKICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucmFxSWQpOwogICAgdGhpcy5yYXFJZCA9IDA7CiAgfSwKCiAgcGxheTogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuY3Jhc2hlZCkgewogICAgICB0aGlzLnBsYXlpbmcgPSB0cnVlOwogICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlOwogICAgICB0aGlzLnRSZXgudXBkYXRlKDAsIFRyZXguc3RhdHVzLlJVTk5JTkcpOwogICAgICB0aGlzLnRpbWUgPSBnZXRUaW1lU3RhbXAoKTsKICAgICAgdGhpcy51cGRhdGUoKTsKICAgIH0KICB9LAoKICByZXN0YXJ0OiBmdW5jdGlvbigpIHsKICAgIGlmICghdGhpcy5yYXFJZCkgewogICAgICB0aGlzLnBsYXlDb3VudCsrOwogICAgICB0aGlzLnJ1bm5pbmdUaW1lID0gMDsKICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTsKICAgICAgdGhpcy5wYXVzZWQgPSBmYWxzZTsKICAgICAgdGhpcy5jcmFzaGVkID0gZmFsc2U7CiAgICAgIHRoaXMuZGlzdGFuY2VSYW4gPSAwOwogICAgICB0aGlzLnNldFNwZWVkKHRoaXMuY29uZmlnLlNQRUVEKTsKICAgICAgdGhpcy50aW1lID0gZ2V0VGltZVN0YW1wKCk7CiAgICAgIHRoaXMuY29udGFpbmVyRWwuY2xhc3NMaXN0LnJlbW92ZShSdW5uZXIuY2xhc3Nlcy5DUkFTSEVEKTsKICAgICAgdGhpcy5jbGVhckNhbnZhcygpOwogICAgICB0aGlzLmRpc3RhbmNlTWV0ZXIucmVzZXQodGhpcy5oaWdoZXN0U2NvcmUpOwogICAgICB0aGlzLmhvcml6b24ucmVzZXQoKTsKICAgICAgdGhpcy50UmV4LnJlc2V0KCk7CiAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuc291bmRGeC5CVVRUT05fUFJFU1MpOwogICAgICB0aGlzLmludmVydCh0cnVlKTsKICAgICAgdGhpcy51cGRhdGUoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBQYXVzZSB0aGUgZ2FtZSBpZiB0aGUgdGFiIGlzIG5vdCBpbiBmb2N1cy4KICAgKi8KICBvblZpc2liaWxpdHlDaGFuZ2U6IGZ1bmN0aW9uKGUpIHsKICAgIGlmIChkb2N1bWVudC5oaWRkZW4gfHwgZG9jdW1lbnQud2Via2l0SGlkZGVuIHx8IGUudHlwZSA9PSAnYmx1cicgfHwKICAgICAgZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlICE9ICd2aXNpYmxlJykgewogICAgICB0aGlzLnN0b3AoKTsKICAgIH0gZWxzZSBpZiAoIXRoaXMuY3Jhc2hlZCkgewogICAgICB0aGlzLnRSZXgucmVzZXQoKTsKICAgICAgdGhpcy5wbGF5KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUGxheSBhIHNvdW5kLgogICAqIEBwYXJhbSB7U291bmRCdWZmZXJ9IHNvdW5kQnVmZmVyCiAgICovCiAgcGxheVNvdW5kOiBmdW5jdGlvbihzb3VuZEJ1ZmZlcikgewogICAgaWYgKHNvdW5kQnVmZmVyKSB7CiAgICAgIHZhciBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7CiAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gc291bmRCdWZmZXI7CiAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7CiAgICAgIHNvdXJjZU5vZGUuc3RhcnQoMCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogSW52ZXJ0cyB0aGUgY3VycmVudCBwYWdlIC8gY2FudmFzIGNvbG9ycy4KICAgKiBAcGFyYW0ge2Jvb2xlYW59IFdoZXRoZXIgdG8gcmVzZXQgY29sb3JzLgogICAqLwogIGludmVydDogZnVuY3Rpb24ocmVzZXQpIHsKICAgIGlmIChyZXNldCkgewogICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoUnVubmVyLmNsYXNzZXMuSU5WRVJURUQsIGZhbHNlKTsKICAgICAgdGhpcy5pbnZlcnRUaW1lciA9IDA7CiAgICAgIHRoaXMuaW52ZXJ0ZWQgPSBmYWxzZTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuaW52ZXJ0ZWQgPSBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC50b2dnbGUoUnVubmVyLmNsYXNzZXMuSU5WRVJURUQsCiAgICAgICAgICB0aGlzLmludmVydFRyaWdnZXIpOwogICAgfQogIH0KfTsKCgovKioKICogVXBkYXRlcyB0aGUgY2FudmFzIHNpemUgdGFraW5nIGludG8KICogYWNjb3VudCB0aGUgYmFja2luZyBzdG9yZSBwaXhlbCByYXRpbyBhbmQKICogdGhlIGRldmljZSBwaXhlbCByYXRpby4KICoKICogU2VlIGFydGljbGUgYnkgUGF1bCBMZXdpczoKICogaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvY2FudmFzL2hpZHBpLwogKgogKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMKICogQHBhcmFtIHtudW1iZXJ9IG9wdF93aWR0aAogKiBAcGFyYW0ge251bWJlcn0gb3B0X2hlaWdodAogKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjYW52YXMgd2FzIHNjYWxlZC4KICovClJ1bm5lci51cGRhdGVDYW52YXNTY2FsaW5nID0gZnVuY3Rpb24oY2FudmFzLCBvcHRfd2lkdGgsIG9wdF9oZWlnaHQpIHsKICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwoKICAvLyBRdWVyeSB0aGUgdmFyaW91cyBwaXhlbCByYXRpb3MKICB2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IE1hdGguZmxvb3Iod2luZG93LmRldmljZVBpeGVsUmF0aW8pIHx8IDE7CiAgdmFyIGJhY2tpbmdTdG9yZVJhdGlvID0gTWF0aC5mbG9vcihjb250ZXh0LndlYmtpdEJhY2tpbmdTdG9yZVBpeGVsUmF0aW8pIHx8IDE7CiAgdmFyIHJhdGlvID0gZGV2aWNlUGl4ZWxSYXRpbyAvIGJhY2tpbmdTdG9yZVJhdGlvOwoKICAvLyBVcHNjYWxlIHRoZSBjYW52YXMgaWYgdGhlIHR3byByYXRpb3MgZG9uJ3QgbWF0Y2gKICBpZiAoZGV2aWNlUGl4ZWxSYXRpbyAhPT0gYmFja2luZ1N0b3JlUmF0aW8pIHsKICAgIHZhciBvbGRXaWR0aCA9IG9wdF93aWR0aCB8fCBjYW52YXMud2lkdGg7CiAgICB2YXIgb2xkSGVpZ2h0ID0gb3B0X2hlaWdodCB8fCBjYW52YXMuaGVpZ2h0OwoKICAgIGNhbnZhcy53aWR0aCA9IG9sZFdpZHRoICogcmF0aW87CiAgICBjYW52YXMuaGVpZ2h0ID0gb2xkSGVpZ2h0ICogcmF0aW87CgogICAgY2FudmFzLnN0eWxlLndpZHRoID0gb2xkV2lkdGggKyAncHgnOwogICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IG9sZEhlaWdodCArICdweCc7CgogICAgLy8gU2NhbGUgdGhlIGNvbnRleHQgdG8gY291bnRlciB0aGUgZmFjdCB0aGF0IHdlJ3ZlIG1hbnVhbGx5IHNjYWxlZAogICAgLy8gb3VyIGNhbnZhcyBlbGVtZW50LgogICAgY29udGV4dC5zY2FsZShyYXRpbywgcmF0aW8pOwogICAgcmV0dXJuIHRydWU7CiAgfSBlbHNlIGlmIChkZXZpY2VQaXhlbFJhdGlvID09IDEpIHsKICAgIC8vIFJlc2V0IHRoZSBjYW52YXMgd2lkdGggLyBoZWlnaHQuIEZpeGVzIHNjYWxpbmcgYnVnIHdoZW4gdGhlIHBhZ2UgaXMKICAgIC8vIHpvb21lZCBhbmQgdGhlIGRldmljZVBpeGVsUmF0aW8gY2hhbmdlcyBhY2NvcmRpbmdseS4KICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGNhbnZhcy53aWR0aCArICdweCc7CiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gY2FudmFzLmhlaWdodCArICdweCc7CiAgfQogIHJldHVybiBmYWxzZTsKfTsKCgovKioKICogR2V0IHJhbmRvbSBudW1iZXIuCiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4KICogQHBhcmFtIHtudW1iZXJ9IG1heAogKiBAcGFyYW0ge251bWJlcn0KICovCmZ1bmN0aW9uIGdldFJhbmRvbU51bShtaW4sIG1heCkgewogIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOwp9CgoKLyoqCiAqIFZpYnJhdGUgb24gbW9iaWxlIGRldmljZXMuCiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBEdXJhdGlvbiBvZiB0aGUgdmlicmF0aW9uIGluIG1pbGxpc2Vjb25kcy4KICovCmZ1bmN0aW9uIHZpYnJhdGUoZHVyYXRpb24pIHsKICBpZiAoSVNfTU9CSUxFICYmIHdpbmRvdy5uYXZpZ2F0b3IudmlicmF0ZSkgewogICAgd2luZG93Lm5hdmlnYXRvci52aWJyYXRlKGR1cmF0aW9uKTsKICB9Cn0KCgovKioKICogQ3JlYXRlIGNhbnZhcyBlbGVtZW50LgogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgRWxlbWVudCB0byBhcHBlbmQgY2FudmFzIHRvLgogKiBAcGFyYW0ge251bWJlcn0gd2lkdGgKICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodAogKiBAcGFyYW0ge3N0cmluZ30gb3B0X2NsYXNzbmFtZQogKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH0KICovCmZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyhjb250YWluZXIsIHdpZHRoLCBoZWlnaHQsIG9wdF9jbGFzc25hbWUpIHsKICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgY2FudmFzLmNsYXNzTmFtZSA9IG9wdF9jbGFzc25hbWUgPyBSdW5uZXIuY2xhc3Nlcy5DQU5WQVMgKyAnICcgKwogICAgICBvcHRfY2xhc3NuYW1lIDogUnVubmVyLmNsYXNzZXMuQ0FOVkFTOwogIGNhbnZhcy53aWR0aCA9IHdpZHRoOwogIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNhbnZhcyk7CgogIHJldHVybiBjYW52YXM7Cn0KCgovKioKICogRGVjb2RlcyB0aGUgYmFzZSA2NCBhdWRpbyB0byBBcnJheUJ1ZmZlciB1c2VkIGJ5IFdlYiBBdWRpby4KICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0cmluZwogKi8KZnVuY3Rpb24gZGVjb2RlQmFzZTY0VG9BcnJheUJ1ZmZlcihiYXNlNjRTdHJpbmcpIHsKICB2YXIgbGVuID0gKGJhc2U2NFN0cmluZy5sZW5ndGggLyA0KSAqIDM7CiAgdmFyIHN0ciA9IGF0b2IoYmFzZTY0U3RyaW5nKTsKICB2YXIgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGVuKTsKICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgfQogIHJldHVybiBieXRlcy5idWZmZXI7Cn0KCgovKioKICogUmV0dXJuIHRoZSBjdXJyZW50IHRpbWVzdGFtcC4KICogQHJldHVybiB7bnVtYmVyfQogKi8KZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkgewogIHJldHVybiBJU19JT1MgPyBuZXcgRGF0ZSgpLmdldFRpbWUoKSA6IHBlcmZvcm1hbmNlLm5vdygpOwp9CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCgovKioKICogR2FtZSBvdmVyIHBhbmVsLgogKiBAcGFyYW0geyFIVE1MQ2FudmFzRWxlbWVudH0gY2FudmFzCiAqIEBwYXJhbSB7T2JqZWN0fSB0ZXh0SW1nUG9zCiAqIEBwYXJhbSB7T2JqZWN0fSByZXN0YXJ0SW1nUG9zCiAqIEBwYXJhbSB7IU9iamVjdH0gZGltZW5zaW9ucyBDYW52YXMgZGltZW5zaW9ucy4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBHYW1lT3ZlclBhbmVsKGNhbnZhcywgdGV4dEltZ1BvcywgcmVzdGFydEltZ1BvcywgZGltZW5zaW9ucykgewogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy5jYW52YXNEaW1lbnNpb25zID0gZGltZW5zaW9uczsKICB0aGlzLnRleHRJbWdQb3MgPSB0ZXh0SW1nUG9zOwogIHRoaXMucmVzdGFydEltZ1BvcyA9IHJlc3RhcnRJbWdQb3M7CiAgdGhpcy5kcmF3KCk7Cn07CgoKLyoqCiAqIERpbWVuc2lvbnMgdXNlZCBpbiB0aGUgcGFuZWwuCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpHYW1lT3ZlclBhbmVsLmRpbWVuc2lvbnMgPSB7CiAgVEVYVF9YOiAwLAogIFRFWFRfWTogMTMsCiAgVEVYVF9XSURUSDogMTkxLAogIFRFWFRfSEVJR0hUOiAxMSwKICBSRVNUQVJUX1dJRFRIOiAzNiwKICBSRVNUQVJUX0hFSUdIVDogMzIKfTsKCgpHYW1lT3ZlclBhbmVsLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBVcGRhdGUgdGhlIHBhbmVsIGRpbWVuc2lvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIE5ldyBjYW52YXMgd2lkdGguCiAgICogQHBhcmFtIHtudW1iZXJ9IG9wdF9oZWlnaHQgT3B0aW9uYWwgbmV3IGNhbnZhcyBoZWlnaHQuCiAgICovCiAgdXBkYXRlRGltZW5zaW9uczogZnVuY3Rpb24od2lkdGgsIG9wdF9oZWlnaHQpIHsKICAgIHRoaXMuY2FudmFzRGltZW5zaW9ucy5XSURUSCA9IHdpZHRoOwogICAgaWYgKG9wdF9oZWlnaHQpIHsKICAgICAgdGhpcy5jYW52YXNEaW1lbnNpb25zLkhFSUdIVCA9IG9wdF9oZWlnaHQ7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgcGFuZWwuCiAgICovCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB2YXIgZGltZW5zaW9ucyA9IEdhbWVPdmVyUGFuZWwuZGltZW5zaW9uczsKCiAgICB2YXIgY2VudGVyWCA9IHRoaXMuY2FudmFzRGltZW5zaW9ucy5XSURUSCAvIDI7CgogICAgLy8gR2FtZSBvdmVyIHRleHQuCiAgICB2YXIgdGV4dFNvdXJjZVggPSBkaW1lbnNpb25zLlRFWFRfWDsKICAgIHZhciB0ZXh0U291cmNlWSA9IGRpbWVuc2lvbnMuVEVYVF9ZOwogICAgdmFyIHRleHRTb3VyY2VXaWR0aCA9IGRpbWVuc2lvbnMuVEVYVF9XSURUSDsKICAgIHZhciB0ZXh0U291cmNlSGVpZ2h0ID0gZGltZW5zaW9ucy5URVhUX0hFSUdIVDsKCiAgICB2YXIgdGV4dFRhcmdldFggPSBNYXRoLnJvdW5kKGNlbnRlclggLSAoZGltZW5zaW9ucy5URVhUX1dJRFRIIC8gMikpOwogICAgdmFyIHRleHRUYXJnZXRZID0gTWF0aC5yb3VuZCgodGhpcy5jYW52YXNEaW1lbnNpb25zLkhFSUdIVCAtIDI1KSAvIDMpOwogICAgdmFyIHRleHRUYXJnZXRXaWR0aCA9IGRpbWVuc2lvbnMuVEVYVF9XSURUSDsKICAgIHZhciB0ZXh0VGFyZ2V0SGVpZ2h0ID0gZGltZW5zaW9ucy5URVhUX0hFSUdIVDsKCiAgICB2YXIgcmVzdGFydFNvdXJjZVdpZHRoID0gZGltZW5zaW9ucy5SRVNUQVJUX1dJRFRIOwogICAgdmFyIHJlc3RhcnRTb3VyY2VIZWlnaHQgPSBkaW1lbnNpb25zLlJFU1RBUlRfSEVJR0hUOwogICAgdmFyIHJlc3RhcnRUYXJnZXRYID0gY2VudGVyWCAtIChkaW1lbnNpb25zLlJFU1RBUlRfV0lEVEggLyAyKTsKICAgIHZhciByZXN0YXJ0VGFyZ2V0WSA9IHRoaXMuY2FudmFzRGltZW5zaW9ucy5IRUlHSFQgLyAyOwoKICAgIGlmIChJU19ISURQSSkgewogICAgICB0ZXh0U291cmNlWSAqPSAyOwogICAgICB0ZXh0U291cmNlWCAqPSAyOwogICAgICB0ZXh0U291cmNlV2lkdGggKj0gMjsKICAgICAgdGV4dFNvdXJjZUhlaWdodCAqPSAyOwogICAgICByZXN0YXJ0U291cmNlV2lkdGggKj0gMjsKICAgICAgcmVzdGFydFNvdXJjZUhlaWdodCAqPSAyOwogICAgfQoKICAgIHRleHRTb3VyY2VYICs9IHRoaXMudGV4dEltZ1Bvcy54OwogICAgdGV4dFNvdXJjZVkgKz0gdGhpcy50ZXh0SW1nUG9zLnk7CgogICAgLy8gR2FtZSBvdmVyIHRleHQgZnJvbSBzcHJpdGUuCiAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UoUnVubmVyLmltYWdlU3ByaXRlLAogICAgICAgIHRleHRTb3VyY2VYLCB0ZXh0U291cmNlWSwgdGV4dFNvdXJjZVdpZHRoLCB0ZXh0U291cmNlSGVpZ2h0LAogICAgICAgIHRleHRUYXJnZXRYLCB0ZXh0VGFyZ2V0WSwgdGV4dFRhcmdldFdpZHRoLCB0ZXh0VGFyZ2V0SGVpZ2h0KTsKCiAgICAvLyBSZXN0YXJ0IGJ1dHRvbi4KICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgICAgdGhpcy5yZXN0YXJ0SW1nUG9zLngsIHRoaXMucmVzdGFydEltZ1Bvcy55LAogICAgICAgIHJlc3RhcnRTb3VyY2VXaWR0aCwgcmVzdGFydFNvdXJjZUhlaWdodCwKICAgICAgICByZXN0YXJ0VGFyZ2V0WCwgcmVzdGFydFRhcmdldFksIGRpbWVuc2lvbnMuUkVTVEFSVF9XSURUSCwKICAgICAgICBkaW1lbnNpb25zLlJFU1RBUlRfSEVJR0hUKTsKICB9Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBDaGVjayBmb3IgYSBjb2xsaXNpb24uCiAqIEBwYXJhbSB7IU9ic3RhY2xlfSBvYnN0YWNsZQogKiBAcGFyYW0geyFUcmV4fSB0UmV4IFQtcmV4IG9iamVjdC4KICogQHBhcmFtIHtIVE1MQ2FudmFzQ29udGV4dH0gb3B0X2NhbnZhc0N0eCBPcHRpb25hbCBjYW52YXMgY29udGV4dCBmb3IgZHJhd2luZwogKiAgICBjb2xsaXNpb24gYm94ZXMuCiAqIEByZXR1cm4ge0FycmF5PENvbGxpc2lvbkJveD59CiAqLwpmdW5jdGlvbiBjaGVja0ZvckNvbGxpc2lvbihvYnN0YWNsZSwgdFJleCwgb3B0X2NhbnZhc0N0eCkgewogIHZhciBvYnN0YWNsZUJveFhQb3MgPSBSdW5uZXIuZGVmYXVsdERpbWVuc2lvbnMuV0lEVEggKyBvYnN0YWNsZS54UG9zOwoKICAvLyBBZGp1c3RtZW50cyBhcmUgbWFkZSB0byB0aGUgYm91bmRpbmcgYm94IGFzIHRoZXJlIGlzIGEgMSBwaXhlbCB3aGl0ZQogIC8vIGJvcmRlciBhcm91bmQgdGhlIHQtcmV4IGFuZCBvYnN0YWNsZXMuCiAgdmFyIHRSZXhCb3ggPSBuZXcgQ29sbGlzaW9uQm94KAogICAgICB0UmV4LnhQb3MgKyAxLAogICAgICB0UmV4LnlQb3MgKyAxLAogICAgICB0UmV4LmNvbmZpZy5XSURUSCAtIDIsCiAgICAgIHRSZXguY29uZmlnLkhFSUdIVCAtIDIpOwoKICB2YXIgb2JzdGFjbGVCb3ggPSBuZXcgQ29sbGlzaW9uQm94KAogICAgICBvYnN0YWNsZS54UG9zICsgMSwKICAgICAgb2JzdGFjbGUueVBvcyArIDEsCiAgICAgIG9ic3RhY2xlLnR5cGVDb25maWcud2lkdGggKiBvYnN0YWNsZS5zaXplIC0gMiwKICAgICAgb2JzdGFjbGUudHlwZUNvbmZpZy5oZWlnaHQgLSAyKTsKCiAgLy8gRGVidWcgb3V0ZXIgYm94CiAgaWYgKG9wdF9jYW52YXNDdHgpIHsKICAgIGRyYXdDb2xsaXNpb25Cb3hlcyhvcHRfY2FudmFzQ3R4LCB0UmV4Qm94LCBvYnN0YWNsZUJveCk7CiAgfQoKICAvLyBTaW1wbGUgb3V0ZXIgYm91bmRzIGNoZWNrLgogIGlmIChib3hDb21wYXJlKHRSZXhCb3gsIG9ic3RhY2xlQm94KSkgewogICAgdmFyIGNvbGxpc2lvbkJveGVzID0gb2JzdGFjbGUuY29sbGlzaW9uQm94ZXM7CiAgICB2YXIgdFJleENvbGxpc2lvbkJveGVzID0gdFJleC5kdWNraW5nID8KICAgICAgICBUcmV4LmNvbGxpc2lvbkJveGVzLkRVQ0tJTkcgOiBUcmV4LmNvbGxpc2lvbkJveGVzLlJVTk5JTkc7CgogICAgLy8gRGV0YWlsZWQgYXhpcyBhbGlnbmVkIGJveCBjaGVjay4KICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdFJleENvbGxpc2lvbkJveGVzLmxlbmd0aDsgdCsrKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sbGlzaW9uQm94ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAvLyBBZGp1c3QgdGhlIGJveCB0byBhY3R1YWwgcG9zaXRpb25zLgogICAgICAgIHZhciBhZGpUcmV4Qm94ID0KICAgICAgICAgICAgY3JlYXRlQWRqdXN0ZWRDb2xsaXNpb25Cb3godFJleENvbGxpc2lvbkJveGVzW3RdLCB0UmV4Qm94KTsKICAgICAgICB2YXIgYWRqT2JzdGFjbGVCb3ggPQogICAgICAgICAgICBjcmVhdGVBZGp1c3RlZENvbGxpc2lvbkJveChjb2xsaXNpb25Cb3hlc1tpXSwgb2JzdGFjbGVCb3gpOwogICAgICAgIHZhciBjcmFzaGVkID0gYm94Q29tcGFyZShhZGpUcmV4Qm94LCBhZGpPYnN0YWNsZUJveCk7CgogICAgICAgIC8vIERyYXcgYm94ZXMgZm9yIGRlYnVnLgogICAgICAgIGlmIChvcHRfY2FudmFzQ3R4KSB7CiAgICAgICAgICBkcmF3Q29sbGlzaW9uQm94ZXMob3B0X2NhbnZhc0N0eCwgYWRqVHJleEJveCwgYWRqT2JzdGFjbGVCb3gpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNyYXNoZWQpIHsKICAgICAgICAgIHJldHVybiBbYWRqVHJleEJveCwgYWRqT2JzdGFjbGVCb3hdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KICByZXR1cm4gZmFsc2U7Cn07CgoKLyoqCiAqIEFkanVzdCB0aGUgY29sbGlzaW9uIGJveC4KICogQHBhcmFtIHshQ29sbGlzaW9uQm94fSBib3ggVGhlIG9yaWdpbmFsIGJveC4KICogQHBhcmFtIHshQ29sbGlzaW9uQm94fSBhZGp1c3RtZW50IEFkanVzdG1lbnQgYm94LgogKiBAcmV0dXJuIHtDb2xsaXNpb25Cb3h9IFRoZSBhZGp1c3RlZCBjb2xsaXNpb24gYm94IG9iamVjdC4KICovCmZ1bmN0aW9uIGNyZWF0ZUFkanVzdGVkQ29sbGlzaW9uQm94KGJveCwgYWRqdXN0bWVudCkgewogIHJldHVybiBuZXcgQ29sbGlzaW9uQm94KAogICAgICBib3gueCArIGFkanVzdG1lbnQueCwKICAgICAgYm94LnkgKyBhZGp1c3RtZW50LnksCiAgICAgIGJveC53aWR0aCwKICAgICAgYm94LmhlaWdodCk7Cn07CgoKLyoqCiAqIERyYXcgdGhlIGNvbGxpc2lvbiBib3hlcyBmb3IgZGVidWcuCiAqLwpmdW5jdGlvbiBkcmF3Q29sbGlzaW9uQm94ZXMoY2FudmFzQ3R4LCB0UmV4Qm94LCBvYnN0YWNsZUJveCkgewogIGNhbnZhc0N0eC5zYXZlKCk7CiAgY2FudmFzQ3R4LnN0cm9rZVN0eWxlID0gJyNmMDAnOwogIGNhbnZhc0N0eC5zdHJva2VSZWN0KHRSZXhCb3gueCwgdFJleEJveC55LCB0UmV4Qm94LndpZHRoLCB0UmV4Qm94LmhlaWdodCk7CgogIGNhbnZhc0N0eC5zdHJva2VTdHlsZSA9ICcjMGYwJzsKICBjYW52YXNDdHguc3Ryb2tlUmVjdChvYnN0YWNsZUJveC54LCBvYnN0YWNsZUJveC55LAogICAgICBvYnN0YWNsZUJveC53aWR0aCwgb2JzdGFjbGVCb3guaGVpZ2h0KTsKICBjYW52YXNDdHgucmVzdG9yZSgpOwp9OwoKCi8qKgogKiBDb21wYXJlIHR3byBjb2xsaXNpb24gYm94ZXMgZm9yIGEgY29sbGlzaW9uLgogKiBAcGFyYW0ge0NvbGxpc2lvbkJveH0gdFJleEJveAogKiBAcGFyYW0ge0NvbGxpc2lvbkJveH0gb2JzdGFjbGVCb3gKICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm94ZXMgaW50ZXJzZWN0ZWQuCiAqLwpmdW5jdGlvbiBib3hDb21wYXJlKHRSZXhCb3gsIG9ic3RhY2xlQm94KSB7CiAgdmFyIGNyYXNoZWQgPSBmYWxzZTsKICB2YXIgdFJleEJveFggPSB0UmV4Qm94Lng7CiAgdmFyIHRSZXhCb3hZID0gdFJleEJveC55OwoKICB2YXIgb2JzdGFjbGVCb3hYID0gb2JzdGFjbGVCb3gueDsKICB2YXIgb2JzdGFjbGVCb3hZID0gb2JzdGFjbGVCb3gueTsKCiAgLy8gQXhpcy1BbGlnbmVkIEJvdW5kaW5nIEJveCBtZXRob2QuCiAgaWYgKHRSZXhCb3gueCA8IG9ic3RhY2xlQm94WCArIG9ic3RhY2xlQm94LndpZHRoICYmCiAgICAgIHRSZXhCb3gueCArIHRSZXhCb3gud2lkdGggPiBvYnN0YWNsZUJveFggJiYKICAgICAgdFJleEJveC55IDwgb2JzdGFjbGVCb3gueSArIG9ic3RhY2xlQm94LmhlaWdodCAmJgogICAgICB0UmV4Qm94LmhlaWdodCArIHRSZXhCb3gueSA+IG9ic3RhY2xlQm94LnkpIHsKICAgIGNyYXNoZWQgPSB0cnVlOwogIH0KCiAgcmV0dXJuIGNyYXNoZWQ7Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBDb2xsaXNpb24gYm94IG9iamVjdC4KICogQHBhcmFtIHtudW1iZXJ9IHggWCBwb3NpdGlvbi4KICogQHBhcmFtIHtudW1iZXJ9IHkgWSBQb3NpdGlvbi4KICogQHBhcmFtIHtudW1iZXJ9IHcgV2lkdGguCiAqIEBwYXJhbSB7bnVtYmVyfSBoIEhlaWdodC4KICovCmZ1bmN0aW9uIENvbGxpc2lvbkJveCh4LCB5LCB3LCBoKSB7CiAgdGhpcy54ID0geDsKICB0aGlzLnkgPSB5OwogIHRoaXMud2lkdGggPSB3OwogIHRoaXMuaGVpZ2h0ID0gaDsKfTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLyoqCiAqIE9ic3RhY2xlLgogKiBAcGFyYW0ge0hUTUxDYW52YXNDdHh9IGNhbnZhc0N0eAogKiBAcGFyYW0ge09ic3RhY2xlLnR5cGV9IHR5cGUKICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBPYnN0YWNsZSBwb3NpdGlvbiBpbiBzcHJpdGUuCiAqIEBwYXJhbSB7T2JqZWN0fSBkaW1lbnNpb25zCiAqIEBwYXJhbSB7bnVtYmVyfSBnYXBDb2VmZmljaWVudCBNdXRpcGxlciBpbiBkZXRlcm1pbmluZyB0aGUgZ2FwLgogKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICogQHBhcmFtIHtudW1iZXJ9IG9wdF94T2Zmc2V0CiAqLwpmdW5jdGlvbiBPYnN0YWNsZShjYW52YXNDdHgsIHR5cGUsIHNwcml0ZUltZ1BvcywgZGltZW5zaW9ucywKICAgIGdhcENvZWZmaWNpZW50LCBzcGVlZCwgb3B0X3hPZmZzZXQpIHsKCiAgdGhpcy5jYW52YXNDdHggPSBjYW52YXNDdHg7CiAgdGhpcy5zcHJpdGVQb3MgPSBzcHJpdGVJbWdQb3M7CiAgdGhpcy50eXBlQ29uZmlnID0gdHlwZTsKICB0aGlzLmdhcENvZWZmaWNpZW50ID0gZ2FwQ29lZmZpY2llbnQ7CiAgdGhpcy5zaXplID0gZ2V0UmFuZG9tTnVtKDEsIE9ic3RhY2xlLk1BWF9PQlNUQUNMRV9MRU5HVEgpOwogIHRoaXMuZGltZW5zaW9ucyA9IGRpbWVuc2lvbnM7CiAgdGhpcy5yZW1vdmUgPSBmYWxzZTsKICB0aGlzLnhQb3MgPSBkaW1lbnNpb25zLldJRFRIICsgKG9wdF94T2Zmc2V0IHx8IDApOwogIHRoaXMueVBvcyA9IDA7CiAgdGhpcy53aWR0aCA9IDA7CiAgdGhpcy5jb2xsaXNpb25Cb3hlcyA9IFtdOwogIHRoaXMuZ2FwID0gMDsKICB0aGlzLnNwZWVkT2Zmc2V0ID0gMDsKCiAgLy8gRm9yIGFuaW1hdGVkIG9ic3RhY2xlcy4KICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7CiAgdGhpcy50aW1lciA9IDA7CgogIHRoaXMuaW5pdChzcGVlZCk7Cn07CgovKioKICogQ29lZmZpY2llbnQgZm9yIGNhbGN1bGF0aW5nIHRoZSBtYXhpbXVtIGdhcC4KICogQGNvbnN0CiAqLwpPYnN0YWNsZS5NQVhfR0FQX0NPRUZGSUNJRU5UID0gMS41OwoKLyoqCiAqIE1heGltdW0gb2JzdGFjbGUgZ3JvdXBpbmcgY291bnQuCiAqIEBjb25zdAogKi8KT2JzdGFjbGUuTUFYX09CU1RBQ0xFX0xFTkdUSCA9IDMsCgoKT2JzdGFjbGUucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIERPTSBmb3IgdGhlIG9ic3RhY2xlLgogICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZAogICAqLwogIGluaXQ6IGZ1bmN0aW9uKHNwZWVkKSB7CiAgICB0aGlzLmNsb25lQ29sbGlzaW9uQm94ZXMoKTsKCiAgICAvLyBPbmx5IGFsbG93IHNpemluZyBpZiB3ZSdyZSBhdCB0aGUgcmlnaHQgc3BlZWQuCiAgICBpZiAodGhpcy5zaXplID4gMSAmJiB0aGlzLnR5cGVDb25maWcubXVsdGlwbGVTcGVlZCA+IHNwZWVkKSB7CiAgICAgIHRoaXMuc2l6ZSA9IDE7CiAgICB9CgogICAgdGhpcy53aWR0aCA9IHRoaXMudHlwZUNvbmZpZy53aWR0aCAqIHRoaXMuc2l6ZTsKCiAgICAvLyBDaGVjayBpZiBvYnN0YWNsZSBjYW4gYmUgcG9zaXRpb25lZCBhdCB2YXJpb3VzIGhlaWdodHMuCiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnR5cGVDb25maWcueVBvcykpICB7CiAgICAgIHZhciB5UG9zQ29uZmlnID0gSVNfTU9CSUxFID8gdGhpcy50eXBlQ29uZmlnLnlQb3NNb2JpbGUgOgogICAgICAgICAgdGhpcy50eXBlQ29uZmlnLnlQb3M7CiAgICAgIHRoaXMueVBvcyA9IHlQb3NDb25maWdbZ2V0UmFuZG9tTnVtKDAsIHlQb3NDb25maWcubGVuZ3RoIC0gMSldOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy55UG9zID0gdGhpcy50eXBlQ29uZmlnLnlQb3M7CiAgICB9CgogICAgdGhpcy5kcmF3KCk7CgogICAgLy8gTWFrZSBjb2xsaXNpb24gYm94IGFkanVzdG1lbnRzLAogICAgLy8gQ2VudHJhbCBib3ggaXMgYWRqdXN0ZWQgdG8gdGhlIHNpemUgYXMgb25lIGJveC4KICAgIC8vICAgICAgX19fXyAgICAgICAgX19fX19fICAgICAgICBfX19fX19fXwogICAgLy8gICAgX3wgICB8LXwgICAgX3wgICAgIHwtfCAgICBffCAgICAgICB8LXwKICAgIC8vICAgfCB8PC0+fCB8ICAgfCB8PC0tLT58IHwgICB8IHw8LS0tLS0+fCB8CiAgICAvLyAgIHwgfCAxIHwgfCAgIHwgfCAgMiAgfCB8ICAgfCB8ICAgMyAgIHwgfAogICAgLy8gICB8X3xfX198X3wgICB8X3xfX19fX3xffCAgIHxffF9fX19fX198X3wKICAgIC8vCiAgICBpZiAodGhpcy5zaXplID4gMSkgewogICAgICB0aGlzLmNvbGxpc2lvbkJveGVzWzFdLndpZHRoID0gdGhpcy53aWR0aCAtIHRoaXMuY29sbGlzaW9uQm94ZXNbMF0ud2lkdGggLQogICAgICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1syXS53aWR0aDsKICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1syXS54ID0gdGhpcy53aWR0aCAtIHRoaXMuY29sbGlzaW9uQm94ZXNbMl0ud2lkdGg7CiAgICB9CgogICAgLy8gRm9yIG9ic3RhY2xlcyB0aGF0IGdvIGF0IGEgZGlmZmVyZW50IHNwZWVkIGZyb20gdGhlIGhvcml6b24uCiAgICBpZiAodGhpcy50eXBlQ29uZmlnLnNwZWVkT2Zmc2V0KSB7CiAgICAgIHRoaXMuc3BlZWRPZmZzZXQgPSBNYXRoLnJhbmRvbSgpID4gMC41ID8gdGhpcy50eXBlQ29uZmlnLnNwZWVkT2Zmc2V0IDoKICAgICAgICAgIC10aGlzLnR5cGVDb25maWcuc3BlZWRPZmZzZXQ7CiAgICB9CgogICAgdGhpcy5nYXAgPSB0aGlzLmdldEdhcCh0aGlzLmdhcENvZWZmaWNpZW50LCBzcGVlZCk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyBhbmQgY3JvcCBiYXNlZCBvbiBzaXplLgogICAqLwogIGRyYXc6IGZ1bmN0aW9uKCkgewogICAgdmFyIHNvdXJjZVdpZHRoID0gdGhpcy50eXBlQ29uZmlnLndpZHRoOwogICAgdmFyIHNvdXJjZUhlaWdodCA9IHRoaXMudHlwZUNvbmZpZy5oZWlnaHQ7CgogICAgaWYgKElTX0hJRFBJKSB7CiAgICAgIHNvdXJjZVdpZHRoID0gc291cmNlV2lkdGggKiAyOwogICAgICBzb3VyY2VIZWlnaHQgPSBzb3VyY2VIZWlnaHQgKiAyOwogICAgfQoKICAgIC8vIFggcG9zaXRpb24gaW4gc3ByaXRlLgogICAgdmFyIHNvdXJjZVggPSAoc291cmNlV2lkdGggKiB0aGlzLnNpemUpICogKDAuNSAqICh0aGlzLnNpemUgLSAxKSkgKwogICAgICAgIHRoaXMuc3ByaXRlUG9zLng7CgogICAgLy8gQW5pbWF0aW9uIGZyYW1lcy4KICAgIGlmICh0aGlzLmN1cnJlbnRGcmFtZSA+IDApIHsKICAgICAgc291cmNlWCArPSBzb3VyY2VXaWR0aCAqIHRoaXMuY3VycmVudEZyYW1lOwogICAgfQoKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgIHNvdXJjZVgsIHRoaXMuc3ByaXRlUG9zLnksCiAgICAgIHNvdXJjZVdpZHRoICogdGhpcy5zaXplLCBzb3VyY2VIZWlnaHQsCiAgICAgIHRoaXMueFBvcywgdGhpcy55UG9zLAogICAgICB0aGlzLnR5cGVDb25maWcud2lkdGggKiB0aGlzLnNpemUsIHRoaXMudHlwZUNvbmZpZy5oZWlnaHQpOwogIH0sCgogIC8qKgogICAqIE9ic3RhY2xlIGZyYW1lIHVwZGF0ZS4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbihkZWx0YVRpbWUsIHNwZWVkKSB7CiAgICBpZiAoIXRoaXMucmVtb3ZlKSB7CiAgICAgIGlmICh0aGlzLnR5cGVDb25maWcuc3BlZWRPZmZzZXQpIHsKICAgICAgICBzcGVlZCArPSB0aGlzLnNwZWVkT2Zmc2V0OwogICAgICB9CiAgICAgIHRoaXMueFBvcyAtPSBNYXRoLmZsb29yKChzcGVlZCAqIEZQUyAvIDEwMDApICogZGVsdGFUaW1lKTsKCiAgICAgIC8vIFVwZGF0ZSBmcmFtZQogICAgICBpZiAodGhpcy50eXBlQ29uZmlnLm51bUZyYW1lcykgewogICAgICAgIHRoaXMudGltZXIgKz0gZGVsdGFUaW1lOwogICAgICAgIGlmICh0aGlzLnRpbWVyID49IHRoaXMudHlwZUNvbmZpZy5mcmFtZVJhdGUpIHsKICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lID0KICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZSA9PSB0aGlzLnR5cGVDb25maWcubnVtRnJhbWVzIC0gMSA/CiAgICAgICAgICAgICAgMCA6IHRoaXMuY3VycmVudEZyYW1lICsgMTsKICAgICAgICAgIHRoaXMudGltZXIgPSAwOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmRyYXcoKTsKCiAgICAgIGlmICghdGhpcy5pc1Zpc2libGUoKSkgewogICAgICAgIHRoaXMucmVtb3ZlID0gdHJ1ZTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIENhbGN1bGF0ZSBhIHJhbmRvbSBnYXAgc2l6ZS4KICAgKiAtIE1pbmltdW0gZ2FwIGdldHMgd2lkZXIgYXMgc3BlZWQgaW5jcmVzZXMKICAgKiBAcGFyYW0ge251bWJlcn0gZ2FwQ29lZmZpY2llbnQKICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBnYXAgc2l6ZS4KICAgKi8KICBnZXRHYXA6IGZ1bmN0aW9uKGdhcENvZWZmaWNpZW50LCBzcGVlZCkgewogICAgdmFyIG1pbkdhcCA9IE1hdGgucm91bmQodGhpcy53aWR0aCAqIHNwZWVkICsKICAgICAgICAgIHRoaXMudHlwZUNvbmZpZy5taW5HYXAgKiBnYXBDb2VmZmljaWVudCk7CiAgICB2YXIgbWF4R2FwID0gTWF0aC5yb3VuZChtaW5HYXAgKiBPYnN0YWNsZS5NQVhfR0FQX0NPRUZGSUNJRU5UKTsKICAgIHJldHVybiBnZXRSYW5kb21OdW0obWluR2FwLCBtYXhHYXApOwogIH0sCgogIC8qKgogICAqIENoZWNrIGlmIG9ic3RhY2xlIGlzIHZpc2libGUuCiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgb2JzdGFjbGUgaXMgaW4gdGhlIGdhbWUgYXJlYS4KICAgKi8KICBpc1Zpc2libGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMueFBvcyArIHRoaXMud2lkdGggPiAwOwogIH0sCgogIC8qKgogICAqIE1ha2UgYSBjb3B5IG9mIHRoZSBjb2xsaXNpb24gYm94ZXMsIHNpbmNlIHRoZXNlIHdpbGwgY2hhbmdlIGJhc2VkIG9uCiAgICogb2JzdGFjbGUgdHlwZSBhbmQgc2l6ZS4KICAgKi8KICBjbG9uZUNvbGxpc2lvbkJveGVzOiBmdW5jdGlvbigpIHsKICAgIHZhciBjb2xsaXNpb25Cb3hlcyA9IHRoaXMudHlwZUNvbmZpZy5jb2xsaXNpb25Cb3hlczsKCiAgICBmb3IgKHZhciBpID0gY29sbGlzaW9uQm94ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgdGhpcy5jb2xsaXNpb25Cb3hlc1tpXSA9IG5ldyBDb2xsaXNpb25Cb3goY29sbGlzaW9uQm94ZXNbaV0ueCwKICAgICAgICAgIGNvbGxpc2lvbkJveGVzW2ldLnksIGNvbGxpc2lvbkJveGVzW2ldLndpZHRoLAogICAgICAgICAgY29sbGlzaW9uQm94ZXNbaV0uaGVpZ2h0KTsKICAgIH0KICB9Cn07CgoKLyoqCiAqIE9ic3RhY2xlIGRlZmluaXRpb25zLgogKiBtaW5HYXA6IG1pbmltdW0gcGl4ZWwgc3BhY2UgYmV0d2VlZW4gb2JzdGFjbGVzLgogKiBtdWx0aXBsZVNwZWVkOiBTcGVlZCBhdCB3aGljaCBtdWx0aXBsZXMgYXJlIGFsbG93ZWQuCiAqIHNwZWVkT2Zmc2V0OiBzcGVlZCBmYXN0ZXIgLyBzbG93ZXIgdGhhbiB0aGUgaG9yaXpvbi4KICogbWluU3BlZWQ6IE1pbmltdW0gc3BlZWQgd2hpY2ggdGhlIG9ic3RhY2xlIGNhbiBtYWtlIGFuIGFwcGVhcmFuY2UuCiAqLwpPYnN0YWNsZS50eXBlcyA9IFsKICB7CiAgICB0eXBlOiAnQ0FDVFVTX1NNQUxMJywKICAgIHdpZHRoOiAxNywKICAgIGhlaWdodDogMzUsCiAgICB5UG9zOiAxMDUsCiAgICBtdWx0aXBsZVNwZWVkOiA0LAogICAgbWluR2FwOiAxMjAsCiAgICBtaW5TcGVlZDogMCwKICAgIGNvbGxpc2lvbkJveGVzOiBbCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMCwgNywgNSwgMjcpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDQsIDAsIDYsIDM0KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMCwgNCwgNywgMTQpCiAgICBdCiAgfSwKICB7CiAgICB0eXBlOiAnQ0FDVFVTX0xBUkdFJywKICAgIHdpZHRoOiAyNSwKICAgIGhlaWdodDogNTAsCiAgICB5UG9zOiA5MCwKICAgIG11bHRpcGxlU3BlZWQ6IDcsCiAgICBtaW5HYXA6IDEyMCwKICAgIG1pblNwZWVkOiAwLAogICAgY29sbGlzaW9uQm94ZXM6IFsKICAgICAgbmV3IENvbGxpc2lvbkJveCgwLCAxMiwgNywgMzgpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDgsIDAsIDcsIDQ5KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMywgMTAsIDEwLCAzOCkKICAgIF0KICB9LAogIHsKICAgIHR5cGU6ICdQVEVST0RBQ1RZTCcsCiAgICB3aWR0aDogNDYsCiAgICBoZWlnaHQ6IDQwLAogICAgeVBvczogWyAxMDAsIDc1LCA1MCBdLCAvLyBWYXJpYWJsZSBoZWlnaHQuCiAgICB5UG9zTW9iaWxlOiBbIDEwMCwgNTAgXSwgLy8gVmFyaWFibGUgaGVpZ2h0IG1vYmlsZS4KICAgIG11bHRpcGxlU3BlZWQ6IDk5OSwKICAgIG1pblNwZWVkOiA4LjUsCiAgICBtaW5HYXA6IDE1MCwKICAgIGNvbGxpc2lvbkJveGVzOiBbCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMTUsIDE1LCAxNiwgNSksCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMTgsIDIxLCAyNCwgNiksCiAgICAgIG5ldyBDb2xsaXNpb25Cb3goMiwgMTQsIDQsIDMpLAogICAgICBuZXcgQ29sbGlzaW9uQm94KDYsIDEwLCA0LCA3KSwKICAgICAgbmV3IENvbGxpc2lvbkJveCgxMCwgOCwgNiwgOSkKICAgIF0sCiAgICBudW1GcmFtZXM6IDIsCiAgICBmcmFtZVJhdGU6IDEwMDAvNiwKICAgIHNwZWVkT2Zmc2V0OiAuOAogIH0KXTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovKioKICogVC1yZXggZ2FtZSBjaGFyYWN0ZXIuCiAqIEBwYXJhbSB7SFRNTENhbnZhc30gY2FudmFzCiAqIEBwYXJhbSB7T2JqZWN0fSBzcHJpdGVQb3MgUG9zaXRpb25pbmcgd2l0aGluIGltYWdlIHNwcml0ZS4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBUcmV4KGNhbnZhcywgc3ByaXRlUG9zKSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICB0aGlzLnNwcml0ZVBvcyA9IHNwcml0ZVBvczsKICB0aGlzLnhQb3MgPSAwOwogIHRoaXMueVBvcyA9IDA7CiAgLy8gUG9zaXRpb24gd2hlbiBvbiB0aGUgZ3JvdW5kLgogIHRoaXMuZ3JvdW5kWVBvcyA9IDA7CiAgdGhpcy5jdXJyZW50RnJhbWUgPSAwOwogIHRoaXMuY3VycmVudEFuaW1GcmFtZXMgPSBbXTsKICB0aGlzLmJsaW5rRGVsYXkgPSAwOwogIHRoaXMuYmxpbmtDb3VudCA9IDA7CiAgdGhpcy5hbmltU3RhcnRUaW1lID0gMDsKICB0aGlzLnRpbWVyID0gMDsKICB0aGlzLm1zUGVyRnJhbWUgPSAxMDAwIC8gRlBTOwogIHRoaXMuY29uZmlnID0gVHJleC5jb25maWc7CiAgLy8gQ3VycmVudCBzdGF0dXMuCiAgdGhpcy5zdGF0dXMgPSBUcmV4LnN0YXR1cy5XQUlUSU5HOwoKICB0aGlzLmp1bXBpbmcgPSBmYWxzZTsKICB0aGlzLmR1Y2tpbmcgPSBmYWxzZTsKICB0aGlzLmp1bXBWZWxvY2l0eSA9IDA7CiAgdGhpcy5yZWFjaGVkTWluSGVpZ2h0ID0gZmFsc2U7CiAgdGhpcy5zcGVlZERyb3AgPSBmYWxzZTsKICB0aGlzLmp1bXBDb3VudCA9IDA7CiAgdGhpcy5qdW1wc3BvdFggPSAwOwoKICB0aGlzLmluaXQoKTsKfTsKCgovKioKICogVC1yZXggcGxheWVyIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovClRyZXguY29uZmlnID0gewogIERST1BfVkVMT0NJVFk6IC01LAogIEdSQVZJVFk6IDAuNiwKICBIRUlHSFQ6IDQ3LAogIEhFSUdIVF9EVUNLOiAyNSwKICBJTklJVEFMX0pVTVBfVkVMT0NJVFk6IC0xMCwKICBJTlRST19EVVJBVElPTjogMTUwMCwKICBNQVhfSlVNUF9IRUlHSFQ6IDMwLAogIE1JTl9KVU1QX0hFSUdIVDogMzAsCiAgU1BFRURfRFJPUF9DT0VGRklDSUVOVDogMywKICBTUFJJVEVfV0lEVEg6IDI2MiwKICBTVEFSVF9YX1BPUzogNTAsCiAgV0lEVEg6IDQ0LAogIFdJRFRIX0RVQ0s6IDU5Cn07CgoKLyoqCiAqIFVzZWQgaW4gY29sbGlzaW9uIGRldGVjdGlvbi4KICogQHR5cGUge0FycmF5PENvbGxpc2lvbkJveD59CiAqLwpUcmV4LmNvbGxpc2lvbkJveGVzID0gewogIERVQ0tJTkc6IFsKICAgIG5ldyBDb2xsaXNpb25Cb3goMSwgMTgsIDU1LCAyNSkKICBdLAogIFJVTk5JTkc6IFsKICAgIG5ldyBDb2xsaXNpb25Cb3goMjIsIDAsIDE3LCAxNiksCiAgICBuZXcgQ29sbGlzaW9uQm94KDEsIDE4LCAzMCwgOSksCiAgICBuZXcgQ29sbGlzaW9uQm94KDEwLCAzNSwgMTQsIDgpLAogICAgbmV3IENvbGxpc2lvbkJveCgxLCAyNCwgMjksIDUpLAogICAgbmV3IENvbGxpc2lvbkJveCg1LCAzMCwgMjEsIDQpLAogICAgbmV3IENvbGxpc2lvbkJveCg5LCAzNCwgMTUsIDQpCiAgXQp9OwoKCi8qKgogKiBBbmltYXRpb24gc3RhdGVzLgogKiBAZW51bSB7c3RyaW5nfQogKi8KVHJleC5zdGF0dXMgPSB7CiAgQ1JBU0hFRDogJ0NSQVNIRUQnLAogIERVQ0tJTkc6ICdEVUNLSU5HJywKICBKVU1QSU5HOiAnSlVNUElORycsCiAgUlVOTklORzogJ1JVTk5JTkcnLAogIFdBSVRJTkc6ICdXQUlUSU5HJwp9OwoKLyoqCiAqIEJsaW5raW5nIGNvZWZmaWNpZW50LgogKiBAY29uc3QKICovClRyZXguQkxJTktfVElNSU5HID0gNzAwMDsKCgovKioKICogQW5pbWF0aW9uIGNvbmZpZyBmb3IgZGlmZmVyZW50IHN0YXRlcy4KICogQGVudW0ge09iamVjdH0KICovClRyZXguYW5pbUZyYW1lcyA9IHsKICBXQUlUSU5HOiB7CiAgICBmcmFtZXM6IFs0NCwgMF0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gMwogIH0sCiAgUlVOTklORzogewogICAgZnJhbWVzOiBbODgsIDEzMl0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gMTIKICB9LAogIENSQVNIRUQ6IHsKICAgIGZyYW1lczogWzIyMF0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gNjAKICB9LAogIEpVTVBJTkc6IHsKICAgIGZyYW1lczogWzBdLAogICAgbXNQZXJGcmFtZTogMTAwMCAvIDYwCiAgfSwKICBEVUNLSU5HOiB7CiAgICBmcmFtZXM6IFsyNjIsIDMyMV0sCiAgICBtc1BlckZyYW1lOiAxMDAwIC8gOAogIH0KfTsKCgpUcmV4LnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBULXJleCBwbGF5ZXIgaW5pdGFsaXNlci4KICAgKiBTZXRzIHRoZSB0LXJleCB0byBibGluayBhdCByYW5kb20gaW50ZXJ2YWxzLgogICAqLwogIGluaXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5ncm91bmRZUG9zID0gUnVubmVyLmRlZmF1bHREaW1lbnNpb25zLkhFSUdIVCAtIHRoaXMuY29uZmlnLkhFSUdIVCAtCiAgICAgICAgUnVubmVyLmNvbmZpZy5CT1RUT01fUEFEOwogICAgdGhpcy55UG9zID0gdGhpcy5ncm91bmRZUG9zOwogICAgdGhpcy5taW5KdW1wSGVpZ2h0ID0gdGhpcy5ncm91bmRZUG9zIC0gdGhpcy5jb25maWcuTUlOX0pVTVBfSEVJR0hUOwoKICAgIHRoaXMuZHJhdygwLCAwKTsKICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLldBSVRJTkcpOwogIH0sCgogIC8qKgogICAqIFNldHRlciBmb3IgdGhlIGp1bXAgdmVsb2NpdHkuCiAgICogVGhlIGFwcHJvcmlhdGUgZHJvcCB2ZWxvY2l0eSBpcyBhbHNvIHNldC4KICAgKi8KICBzZXRKdW1wVmVsb2NpdHk6IGZ1bmN0aW9uKHNldHRpbmcpIHsKICAgIHRoaXMuY29uZmlnLklOSUlUQUxfSlVNUF9WRUxPQ0lUWSA9IC1zZXR0aW5nOwogICAgdGhpcy5jb25maWcuRFJPUF9WRUxPQ0lUWSA9IC1zZXR0aW5nIC8gMjsKICB9LAoKICAvKioKICAgKiBTZXQgdGhlIGFuaW1hdGlvbiBzdGF0dXMuCiAgICogQHBhcmFtIHshbnVtYmVyfSBkZWx0YVRpbWUKICAgKiBAcGFyYW0ge1RyZXguc3RhdHVzfSBzdGF0dXMgT3B0aW9uYWwgc3RhdHVzIHRvIHN3aXRjaCB0by4KICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGRlbHRhVGltZSwgb3B0X3N0YXR1cykgewogICAgdGhpcy50aW1lciArPSBkZWx0YVRpbWU7CgogICAgLy8gVXBkYXRlIHRoZSBzdGF0dXMuCiAgICBpZiAob3B0X3N0YXR1cykgewogICAgICB0aGlzLnN0YXR1cyA9IG9wdF9zdGF0dXM7CiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDsKICAgICAgdGhpcy5tc1BlckZyYW1lID0gVHJleC5hbmltRnJhbWVzW29wdF9zdGF0dXNdLm1zUGVyRnJhbWU7CiAgICAgIHRoaXMuY3VycmVudEFuaW1GcmFtZXMgPSBUcmV4LmFuaW1GcmFtZXNbb3B0X3N0YXR1c10uZnJhbWVzOwoKICAgICAgaWYgKG9wdF9zdGF0dXMgPT0gVHJleC5zdGF0dXMuV0FJVElORykgewogICAgICAgIHRoaXMuYW5pbVN0YXJ0VGltZSA9IGdldFRpbWVTdGFtcCgpOwogICAgICAgIHRoaXMuc2V0QmxpbmtEZWxheSgpOwogICAgICB9CiAgICB9CgogICAgLy8gR2FtZSBpbnRybyBhbmltYXRpb24sIFQtcmV4IG1vdmVzIGluIGZyb20gdGhlIGxlZnQuCiAgICBpZiAodGhpcy5wbGF5aW5nSW50cm8gJiYgdGhpcy54UG9zIDwgdGhpcy5jb25maWcuU1RBUlRfWF9QT1MpIHsKICAgICAgdGhpcy54UG9zICs9IE1hdGgucm91bmQoKHRoaXMuY29uZmlnLlNUQVJUX1hfUE9TIC8KICAgICAgICAgIHRoaXMuY29uZmlnLklOVFJPX0RVUkFUSU9OKSAqIGRlbHRhVGltZSk7CiAgICB9CgogICAgaWYgKHRoaXMuc3RhdHVzID09IFRyZXguc3RhdHVzLldBSVRJTkcpIHsKICAgICAgdGhpcy5ibGluayhnZXRUaW1lU3RhbXAoKSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmRyYXcodGhpcy5jdXJyZW50QW5pbUZyYW1lc1t0aGlzLmN1cnJlbnRGcmFtZV0sIDApOwogICAgfQoKICAgIC8vIFVwZGF0ZSB0aGUgZnJhbWUgcG9zaXRpb24uCiAgICBpZiAodGhpcy50aW1lciA+PSB0aGlzLm1zUGVyRnJhbWUpIHsKICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmN1cnJlbnRGcmFtZSA9PQogICAgICAgICAgdGhpcy5jdXJyZW50QW5pbUZyYW1lcy5sZW5ndGggLSAxID8gMCA6IHRoaXMuY3VycmVudEZyYW1lICsgMTsKICAgICAgdGhpcy50aW1lciA9IDA7CiAgICB9CgogICAgLy8gU3BlZWQgZHJvcCBiZWNvbWVzIGR1Y2sgaWYgdGhlIGRvd24ga2V5IGlzIHN0aWxsIGJlaW5nIHByZXNzZWQuCiAgICBpZiAodGhpcy5zcGVlZERyb3AgJiYgdGhpcy55UG9zID09IHRoaXMuZ3JvdW5kWVBvcykgewogICAgICB0aGlzLnNwZWVkRHJvcCA9IGZhbHNlOwogICAgICB0aGlzLnNldER1Y2sodHJ1ZSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgdC1yZXggdG8gYSBwYXJ0aWN1bGFyIHBvc2l0aW9uLgogICAqIEBwYXJhbSB7bnVtYmVyfSB4CiAgICogQHBhcmFtIHtudW1iZXJ9IHkKICAgKi8KICBkcmF3OiBmdW5jdGlvbih4LCB5KSB7CiAgICB2YXIgc291cmNlWCA9IHg7CiAgICB2YXIgc291cmNlWSA9IHk7CiAgICB2YXIgc291cmNlV2lkdGggPSB0aGlzLmR1Y2tpbmcgJiYgdGhpcy5zdGF0dXMgIT0gVHJleC5zdGF0dXMuQ1JBU0hFRCA/CiAgICAgICAgdGhpcy5jb25maWcuV0lEVEhfRFVDSyA6IHRoaXMuY29uZmlnLldJRFRIOwogICAgdmFyIHNvdXJjZUhlaWdodCA9IHRoaXMuY29uZmlnLkhFSUdIVDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgc291cmNlWCAqPSAyOwogICAgICBzb3VyY2VZICo9IDI7CiAgICAgIHNvdXJjZVdpZHRoICo9IDI7CiAgICAgIHNvdXJjZUhlaWdodCAqPSAyOwogICAgfQoKICAgIC8vIEFkanVzdG1lbnRzIGZvciBzcHJpdGUgc2hlZXQgcG9zaXRpb24uCiAgICBzb3VyY2VYICs9IHRoaXMuc3ByaXRlUG9zLng7CiAgICBzb3VyY2VZICs9IHRoaXMuc3ByaXRlUG9zLnk7CgogICAgLy8gRHVja2luZy4KICAgIGlmICh0aGlzLmR1Y2tpbmcgJiYgdGhpcy5zdGF0dXMgIT0gVHJleC5zdGF0dXMuQ1JBU0hFRCkgewogICAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UoUnVubmVyLmltYWdlU3ByaXRlLCBzb3VyY2VYLCBzb3VyY2VZLAogICAgICAgICAgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCwKICAgICAgICAgIHRoaXMueFBvcywgdGhpcy55UG9zLAogICAgICAgICAgdGhpcy5jb25maWcuV0lEVEhfRFVDSywgdGhpcy5jb25maWcuSEVJR0hUKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIENyYXNoZWQgd2hpbHN0IGR1Y2tpbmcuIFRyZXggaXMgc3RhbmRpbmcgdXAgc28gbmVlZHMgYWRqdXN0bWVudC4KICAgICAgaWYgKHRoaXMuZHVja2luZyAmJiB0aGlzLnN0YXR1cyA9PSBUcmV4LnN0YXR1cy5DUkFTSEVEKSB7CiAgICAgICAgdGhpcy54UG9zKys7CiAgICAgIH0KICAgICAgLy8gU3RhbmRpbmcgLyBydW5uaW5nCiAgICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHNvdXJjZVgsIHNvdXJjZVksCiAgICAgICAgICBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LAogICAgICAgICAgdGhpcy54UG9zLCB0aGlzLnlQb3MsCiAgICAgICAgICB0aGlzLmNvbmZpZy5XSURUSCwgdGhpcy5jb25maWcuSEVJR0hUKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBTZXRzIGEgcmFuZG9tIHRpbWUgZm9yIHRoZSBibGluayB0byBoYXBwZW4uCiAgICovCiAgc2V0QmxpbmtEZWxheTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmJsaW5rRGVsYXkgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIFRyZXguQkxJTktfVElNSU5HKTsKICB9LAoKICAvKioKICAgKiBNYWtlIHQtcmV4IGJsaW5rIGF0IHJhbmRvbSBpbnRlcnZhbHMuCiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgQ3VycmVudCB0aW1lIGluIG1pbGxpc2Vjb25kcy4KICAgKi8KICBibGluazogZnVuY3Rpb24odGltZSkgewogICAgdmFyIGRlbHRhVGltZSA9IHRpbWUgLSB0aGlzLmFuaW1TdGFydFRpbWU7CgogICAgaWYgKGRlbHRhVGltZSA+PSB0aGlzLmJsaW5rRGVsYXkpIHsKICAgICAgdGhpcy5kcmF3KHRoaXMuY3VycmVudEFuaW1GcmFtZXNbdGhpcy5jdXJyZW50RnJhbWVdLCAwKTsKCiAgICAgIGlmICh0aGlzLmN1cnJlbnRGcmFtZSA9PSAxKSB7CiAgICAgICAgLy8gU2V0IG5ldyByYW5kb20gZGVsYXkgdG8gYmxpbmsuCiAgICAgICAgdGhpcy5zZXRCbGlua0RlbGF5KCk7CiAgICAgICAgdGhpcy5hbmltU3RhcnRUaW1lID0gdGltZTsKICAgICAgICB0aGlzLmJsaW5rQ291bnQrKzsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEluaXRpYWxpc2UgYSBqdW1wLgogICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZAogICAqLwogIHN0YXJ0SnVtcDogZnVuY3Rpb24oc3BlZWQpIHsKICAgIGlmICghdGhpcy5qdW1waW5nKSB7CiAgICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLkpVTVBJTkcpOwogICAgICAvLyBUd2VhayB0aGUganVtcCB2ZWxvY2l0eSBiYXNlZCBvbiB0aGUgc3BlZWQuCiAgICAgIHRoaXMuanVtcFZlbG9jaXR5ID0gdGhpcy5jb25maWcuSU5JSVRBTF9KVU1QX1ZFTE9DSVRZIC0gKHNwZWVkIC8gMTApOwogICAgICB0aGlzLmp1bXBpbmcgPSB0cnVlOwogICAgICB0aGlzLnJlYWNoZWRNaW5IZWlnaHQgPSBmYWxzZTsKICAgICAgdGhpcy5zcGVlZERyb3AgPSBmYWxzZTsKICAgIH0KICB9LAoKICAvKioKICAgKiBKdW1wIGlzIGNvbXBsZXRlLCBmYWxsaW5nIGRvd24uCiAgICovCiAgZW5kSnVtcDogZnVuY3Rpb24oKSB7CiAgICBpZiAodGhpcy5yZWFjaGVkTWluSGVpZ2h0ICYmCiAgICAgICAgdGhpcy5qdW1wVmVsb2NpdHkgPCB0aGlzLmNvbmZpZy5EUk9QX1ZFTE9DSVRZKSB7CiAgICAgIHRoaXMuanVtcFZlbG9jaXR5ID0gdGhpcy5jb25maWcuRFJPUF9WRUxPQ0lUWTsKICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGUgZnJhbWUgZm9yIGEganVtcC4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlSnVtcDogZnVuY3Rpb24oZGVsdGFUaW1lLCBzcGVlZCkgewogICAgdmFyIG1zUGVyRnJhbWUgPSBUcmV4LmFuaW1GcmFtZXNbdGhpcy5zdGF0dXNdLm1zUGVyRnJhbWU7CiAgICB2YXIgZnJhbWVzRWxhcHNlZCA9IGRlbHRhVGltZSAvIG1zUGVyRnJhbWU7CgogICAgLy8gU3BlZWQgZHJvcCBtYWtlcyBUcmV4IGZhbGwgZmFzdGVyLgogICAgaWYgKHRoaXMuc3BlZWREcm9wKSB7CiAgICAgIHRoaXMueVBvcyArPSBNYXRoLnJvdW5kKHRoaXMuanVtcFZlbG9jaXR5ICoKICAgICAgICAgIHRoaXMuY29uZmlnLlNQRUVEX0RST1BfQ09FRkZJQ0lFTlQgKiBmcmFtZXNFbGFwc2VkKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMueVBvcyArPSBNYXRoLnJvdW5kKHRoaXMuanVtcFZlbG9jaXR5ICogZnJhbWVzRWxhcHNlZCk7CiAgICB9CgogICAgdGhpcy5qdW1wVmVsb2NpdHkgKz0gdGhpcy5jb25maWcuR1JBVklUWSAqIGZyYW1lc0VsYXBzZWQ7CgogICAgLy8gTWluaW11bSBoZWlnaHQgaGFzIGJlZW4gcmVhY2hlZC4KICAgIGlmICh0aGlzLnlQb3MgPCB0aGlzLm1pbkp1bXBIZWlnaHQgfHwgdGhpcy5zcGVlZERyb3ApIHsKICAgICAgdGhpcy5yZWFjaGVkTWluSGVpZ2h0ID0gdHJ1ZTsKICAgIH0KCiAgICAvLyBSZWFjaGVkIG1heCBoZWlnaHQKICAgIGlmICh0aGlzLnlQb3MgPCB0aGlzLmNvbmZpZy5NQVhfSlVNUF9IRUlHSFQgfHwgdGhpcy5zcGVlZERyb3ApIHsKICAgICAgdGhpcy5lbmRKdW1wKCk7CiAgICB9CgogICAgLy8gQmFjayBkb3duIGF0IGdyb3VuZCBsZXZlbC4gSnVtcCBjb21wbGV0ZWQuCiAgICBpZiAodGhpcy55UG9zID4gdGhpcy5ncm91bmRZUG9zKSB7CiAgICAgIHRoaXMucmVzZXQoKTsKICAgICAgdGhpcy5qdW1wQ291bnQrKzsKICAgIH0KCiAgICB0aGlzLnVwZGF0ZShkZWx0YVRpbWUpOwogIH0sCgogIC8qKgogICAqIFNldCB0aGUgc3BlZWQgZHJvcC4gSW1tZWRpYXRlbHkgY2FuY2VscyB0aGUgY3VycmVudCBqdW1wLgogICAqLwogIHNldFNwZWVkRHJvcDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnNwZWVkRHJvcCA9IHRydWU7CiAgICB0aGlzLmp1bXBWZWxvY2l0eSA9IDE7CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIHtib29sZWFufSBpc0R1Y2tpbmcuCiAgICovCiAgc2V0RHVjazogZnVuY3Rpb24oaXNEdWNraW5nKSB7CiAgICBpZiAoaXNEdWNraW5nICYmIHRoaXMuc3RhdHVzICE9IFRyZXguc3RhdHVzLkRVQ0tJTkcpIHsKICAgICAgdGhpcy51cGRhdGUoMCwgVHJleC5zdGF0dXMuRFVDS0lORyk7CiAgICAgIHRoaXMuZHVja2luZyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdHVzID09IFRyZXguc3RhdHVzLkRVQ0tJTkcpIHsKICAgICAgdGhpcy51cGRhdGUoMCwgVHJleC5zdGF0dXMuUlVOTklORyk7CiAgICAgIHRoaXMuZHVja2luZyA9IGZhbHNlOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlc2V0IHRoZSB0LXJleCB0byBydW5uaW5nIGF0IHN0YXJ0IG9mIGdhbWUuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy55UG9zID0gdGhpcy5ncm91bmRZUG9zOwogICAgdGhpcy5qdW1wVmVsb2NpdHkgPSAwOwogICAgdGhpcy5qdW1waW5nID0gZmFsc2U7CiAgICB0aGlzLmR1Y2tpbmcgPSBmYWxzZTsKICAgIHRoaXMudXBkYXRlKDAsIFRyZXguc3RhdHVzLlJVTk5JTkcpOwogICAgdGhpcy5taWRhaXIgPSBmYWxzZTsKICAgIHRoaXMuc3BlZWREcm9wID0gZmFsc2U7CiAgICB0aGlzLmp1bXBDb3VudCA9IDA7CiAgfQp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogSGFuZGxlcyBkaXNwbGF5aW5nIHRoZSBkaXN0YW5jZSBtZXRlci4KICogQHBhcmFtIHshSFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcwogKiBAcGFyYW0ge09iamVjdH0gc3ByaXRlUG9zIEltYWdlIHBvc2l0aW9uIGluIHNwcml0ZS4KICogQHBhcmFtIHtudW1iZXJ9IGNhbnZhc1dpZHRoCiAqIEBjb25zdHJ1Y3RvcgogKi8KZnVuY3Rpb24gRGlzdGFuY2VNZXRlcihjYW52YXMsIHNwcml0ZVBvcywgY2FudmFzV2lkdGgpIHsKICB0aGlzLmNhbnZhcyA9IGNhbnZhczsKICB0aGlzLmNhbnZhc0N0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuaW1hZ2UgPSBSdW5uZXIuaW1hZ2VTcHJpdGU7CiAgdGhpcy5zcHJpdGVQb3MgPSBzcHJpdGVQb3M7CiAgdGhpcy54ID0gMDsKICB0aGlzLnkgPSA1OwoKICB0aGlzLmN1cnJlbnREaXN0YW5jZSA9IDA7CiAgdGhpcy5tYXhTY29yZSA9IDA7CiAgdGhpcy5oaWdoU2NvcmUgPSAwOwogIHRoaXMuY29udGFpbmVyID0gbnVsbDsKCiAgdGhpcy5kaWdpdHMgPSBbXTsKICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgdGhpcy5kZWZhdWx0U3RyaW5nID0gJyc7CiAgdGhpcy5mbGFzaFRpbWVyID0gMDsKICB0aGlzLmZsYXNoSXRlcmF0aW9ucyA9IDA7CiAgdGhpcy5pbnZlcnRUcmlnZ2VyID0gZmFsc2U7CgogIHRoaXMuY29uZmlnID0gRGlzdGFuY2VNZXRlci5jb25maWc7CiAgdGhpcy5tYXhTY29yZVVuaXRzID0gdGhpcy5jb25maWcuTUFYX0RJU1RBTkNFX1VOSVRTOwogIHRoaXMuaW5pdChjYW52YXNXaWR0aCk7Cn07CgoKLyoqCiAqIEBlbnVtIHtudW1iZXJ9CiAqLwpEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMgPSB7CiAgV0lEVEg6IDEwLAogIEhFSUdIVDogMTMsCiAgREVTVF9XSURUSDogMTEKfTsKCgovKioKICogWSBwb3NpdGlvbmluZyBvZiB0aGUgZGlnaXRzIGluIHRoZSBzcHJpdGUgc2hlZXQuCiAqIFggcG9zaXRpb24gaXMgYWx3YXlzIDAuCiAqIEB0eXBlIHtBcnJheTxudW1iZXI+fQogKi8KRGlzdGFuY2VNZXRlci55UG9zID0gWzAsIDEzLCAyNywgNDAsIDUzLCA2NywgODAsIDkzLCAxMDcsIDEyMF07CgoKLyoqCiAqIERpc3RhbmNlIG1ldGVyIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkRpc3RhbmNlTWV0ZXIuY29uZmlnID0gewogIC8vIE51bWJlciBvZiBkaWdpdHMuCiAgTUFYX0RJU1RBTkNFX1VOSVRTOiA1LAoKICAvLyBEaXN0YW5jZSB0aGF0IGNhdXNlcyBhY2hpZXZlbWVudCBhbmltYXRpb24uCiAgQUNISUVWRU1FTlRfRElTVEFOQ0U6IDEwMCwKCiAgLy8gVXNlZCBmb3IgY29udmVyc2lvbiBmcm9tIHBpeGVsIGRpc3RhbmNlIHRvIGEgc2NhbGVkIHVuaXQuCiAgQ09FRkZJQ0lFTlQ6IDAuMDI1LAoKICAvLyBGbGFzaCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMuCiAgRkxBU0hfRFVSQVRJT046IDEwMDAgLyA0LAoKICAvLyBGbGFzaCBpdGVyYXRpb25zIGZvciBhY2hpZXZlbWVudCBhbmltYXRpb24uCiAgRkxBU0hfSVRFUkFUSU9OUzogMwp9OwoKCkRpc3RhbmNlTWV0ZXIucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIGRpc3RhbmNlIG1ldGVyIHRvICcwMDAwMCcuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIENhbnZhcyB3aWR0aCBpbiBweC4KICAgKi8KICBpbml0OiBmdW5jdGlvbih3aWR0aCkgewogICAgdmFyIG1heERpc3RhbmNlU3RyID0gJyc7CgogICAgdGhpcy5jYWxjWFBvcyh3aWR0aCk7CiAgICB0aGlzLm1heFNjb3JlID0gdGhpcy5tYXhTY29yZVVuaXRzOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1heFNjb3JlVW5pdHM7IGkrKykgewogICAgICB0aGlzLmRyYXcoaSwgMCk7CiAgICAgIHRoaXMuZGVmYXVsdFN0cmluZyArPSAnMCc7CiAgICAgIG1heERpc3RhbmNlU3RyICs9ICc5JzsKICAgIH0KCiAgICB0aGlzLm1heFNjb3JlID0gcGFyc2VJbnQobWF4RGlzdGFuY2VTdHIpOwogIH0sCgogIC8qKgogICAqIENhbGN1bGF0ZSB0aGUgeFBvcyBpbiB0aGUgY2FudmFzLgogICAqIEBwYXJhbSB7bnVtYmVyfSBjYW52YXNXaWR0aAogICAqLwogIGNhbGNYUG9zOiBmdW5jdGlvbihjYW52YXNXaWR0aCkgewogICAgdGhpcy54ID0gY2FudmFzV2lkdGggLSAoRGlzdGFuY2VNZXRlci5kaW1lbnNpb25zLkRFU1RfV0lEVEggKgogICAgICAgICh0aGlzLm1heFNjb3JlVW5pdHMgKyAxKSk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyBhIGRpZ2l0IHRvIGNhbnZhcy4KICAgKiBAcGFyYW0ge251bWJlcn0gZGlnaXRQb3MgUG9zaXRpb24gb2YgdGhlIGRpZ2l0LgogICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBEaWdpdCB2YWx1ZSAwLTkuCiAgICogQHBhcmFtIHtib29sZWFufSBvcHRfaGlnaFNjb3JlIFdoZXRoZXIgZHJhd2luZyB0aGUgaGlnaCBzY29yZS4KICAgKi8KICBkcmF3OiBmdW5jdGlvbihkaWdpdFBvcywgdmFsdWUsIG9wdF9oaWdoU2NvcmUpIHsKICAgIHZhciBzb3VyY2VXaWR0aCA9IERpc3RhbmNlTWV0ZXIuZGltZW5zaW9ucy5XSURUSDsKICAgIHZhciBzb3VyY2VIZWlnaHQgPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuSEVJR0hUOwogICAgdmFyIHNvdXJjZVggPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuV0lEVEggKiB2YWx1ZTsKICAgIHZhciBzb3VyY2VZID0gMDsKCiAgICB2YXIgdGFyZ2V0WCA9IGRpZ2l0UG9zICogRGlzdGFuY2VNZXRlci5kaW1lbnNpb25zLkRFU1RfV0lEVEg7CiAgICB2YXIgdGFyZ2V0WSA9IHRoaXMueTsKICAgIHZhciB0YXJnZXRXaWR0aCA9IERpc3RhbmNlTWV0ZXIuZGltZW5zaW9ucy5XSURUSDsKICAgIHZhciB0YXJnZXRIZWlnaHQgPSBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuSEVJR0hUOwoKICAgIC8vIEZvciBoaWdoIERQSSB3ZSAyeCBzb3VyY2UgdmFsdWVzLgogICAgaWYgKElTX0hJRFBJKSB7CiAgICAgIHNvdXJjZVdpZHRoICo9IDI7CiAgICAgIHNvdXJjZUhlaWdodCAqPSAyOwogICAgICBzb3VyY2VYICo9IDI7CiAgICB9CgogICAgc291cmNlWCArPSB0aGlzLnNwcml0ZVBvcy54OwogICAgc291cmNlWSArPSB0aGlzLnNwcml0ZVBvcy55OwoKICAgIHRoaXMuY2FudmFzQ3R4LnNhdmUoKTsKCiAgICBpZiAob3B0X2hpZ2hTY29yZSkgewogICAgICAvLyBMZWZ0IG9mIHRoZSBjdXJyZW50IHNjb3JlLgogICAgICB2YXIgaGlnaFNjb3JlWCA9IHRoaXMueCAtICh0aGlzLm1heFNjb3JlVW5pdHMgKiAyKSAqCiAgICAgICAgICBEaXN0YW5jZU1ldGVyLmRpbWVuc2lvbnMuV0lEVEg7CiAgICAgIHRoaXMuY2FudmFzQ3R4LnRyYW5zbGF0ZShoaWdoU2NvcmVYLCB0aGlzLnkpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5jYW52YXNDdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTsKICAgIH0KCiAgICB0aGlzLmNhbnZhc0N0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgc291cmNlWCwgc291cmNlWSwKICAgICAgICBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LAogICAgICAgIHRhcmdldFgsIHRhcmdldFksCiAgICAgICAgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodAogICAgICApOwoKICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvKioKICAgKiBDb3ZlcnQgcGl4ZWwgZGlzdGFuY2UgdG8gYSAncmVhbCcgZGlzdGFuY2UuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIFBpeGVsIGRpc3RhbmNlIHJhbi4KICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSAncmVhbCcgZGlzdGFuY2UgcmFuLgogICAqLwogIGdldEFjdHVhbERpc3RhbmNlOiBmdW5jdGlvbihkaXN0YW5jZSkgewogICAgcmV0dXJuIGRpc3RhbmNlID8gTWF0aC5yb3VuZChkaXN0YW5jZSAqIHRoaXMuY29uZmlnLkNPRUZGSUNJRU5UKSA6IDA7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBkaXN0YW5jZSBtZXRlci4KICAgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UKICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYWNoZWl2ZW1lbnQgc291bmQgZnggc2hvdWxkIGJlIHBsYXllZC4KICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGRlbHRhVGltZSwgZGlzdGFuY2UpIHsKICAgIHZhciBwYWludCA9IHRydWU7CiAgICB2YXIgcGxheVNvdW5kID0gZmFsc2U7CgogICAgaWYgKCF0aGlzLmFjaGVpdmVtZW50KSB7CiAgICAgIGRpc3RhbmNlID0gdGhpcy5nZXRBY3R1YWxEaXN0YW5jZShkaXN0YW5jZSk7CiAgICAgIC8vIFNjb3JlIGhhcyBnb25lIGJleW9uZCB0aGUgaW5pdGlhbCBkaWdpdCBjb3VudC4KICAgICAgaWYgKGRpc3RhbmNlID4gdGhpcy5tYXhTY29yZSAmJiB0aGlzLm1heFNjb3JlVW5pdHMgPT0KICAgICAgICB0aGlzLmNvbmZpZy5NQVhfRElTVEFOQ0VfVU5JVFMpIHsKICAgICAgICB0aGlzLm1heFNjb3JlVW5pdHMrKzsKICAgICAgICB0aGlzLm1heFNjb3JlID0gcGFyc2VJbnQodGhpcy5tYXhTY29yZSArICc5Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IDA7CiAgICAgIH0KCiAgICAgIGlmIChkaXN0YW5jZSA+IDApIHsKICAgICAgICAvLyBBY2hlaXZlbWVudCB1bmxvY2tlZAogICAgICAgIGlmIChkaXN0YW5jZSAlIHRoaXMuY29uZmlnLkFDSElFVkVNRU5UX0RJU1RBTkNFID09IDApIHsKICAgICAgICAgIC8vIEZsYXNoIHNjb3JlIGFuZCBwbGF5IHNvdW5kLgogICAgICAgICAgdGhpcy5hY2hlaXZlbWVudCA9IHRydWU7CiAgICAgICAgICB0aGlzLmZsYXNoVGltZXIgPSAwOwogICAgICAgICAgcGxheVNvdW5kID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIC8vIENyZWF0ZSBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGlzdGFuY2Ugd2l0aCBsZWFkaW5nIDAuCiAgICAgICAgdmFyIGRpc3RhbmNlU3RyID0gKHRoaXMuZGVmYXVsdFN0cmluZyArCiAgICAgICAgICAgIGRpc3RhbmNlKS5zdWJzdHIoLXRoaXMubWF4U2NvcmVVbml0cyk7CiAgICAgICAgdGhpcy5kaWdpdHMgPSBkaXN0YW5jZVN0ci5zcGxpdCgnJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5kaWdpdHMgPSB0aGlzLmRlZmF1bHRTdHJpbmcuc3BsaXQoJycpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBDb250cm9sIGZsYXNoaW5nIG9mIHRoZSBzY29yZSBvbiByZWFjaGluZyBhY2hlaXZlbWVudC4KICAgICAgaWYgKHRoaXMuZmxhc2hJdGVyYXRpb25zIDw9IHRoaXMuY29uZmlnLkZMQVNIX0lURVJBVElPTlMpIHsKICAgICAgICB0aGlzLmZsYXNoVGltZXIgKz0gZGVsdGFUaW1lOwoKICAgICAgICBpZiAodGhpcy5mbGFzaFRpbWVyIDwgdGhpcy5jb25maWcuRkxBU0hfRFVSQVRJT04pIHsKICAgICAgICAgIHBhaW50ID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZsYXNoVGltZXIgPgogICAgICAgICAgICB0aGlzLmNvbmZpZy5GTEFTSF9EVVJBVElPTiAqIDIpIHsKICAgICAgICAgIHRoaXMuZmxhc2hUaW1lciA9IDA7CiAgICAgICAgICB0aGlzLmZsYXNoSXRlcmF0aW9ucysrOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgICAgICAgdGhpcy5mbGFzaEl0ZXJhdGlvbnMgPSAwOwogICAgICAgIHRoaXMuZmxhc2hUaW1lciA9IDA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBEcmF3IHRoZSBkaWdpdHMgaWYgbm90IGZsYXNoaW5nLgogICAgaWYgKHBhaW50KSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLmRpZ2l0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRoaXMuZHJhdyhpLCBwYXJzZUludCh0aGlzLmRpZ2l0c1tpXSkpOwogICAgICB9CiAgICB9CgogICAgdGhpcy5kcmF3SGlnaFNjb3JlKCk7CiAgICByZXR1cm4gcGxheVNvdW5kOwogIH0sCgogIC8qKgogICAqIERyYXcgdGhlIGhpZ2ggc2NvcmUuCiAgICovCiAgZHJhd0hpZ2hTY29yZTogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNhbnZhc0N0eC5zYXZlKCk7CiAgICB0aGlzLmNhbnZhc0N0eC5nbG9iYWxBbHBoYSA9IC44OwogICAgZm9yICh2YXIgaSA9IHRoaXMuaGlnaFNjb3JlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHRoaXMuZHJhdyhpLCBwYXJzZUludCh0aGlzLmhpZ2hTY29yZVtpXSwgMTApLCB0cnVlKTsKICAgIH0KICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvKioKICAgKiBTZXQgdGhlIGhpZ2hzY29yZSBhcyBhIGFycmF5IHN0cmluZy4KICAgKiBQb3NpdGlvbiBvZiBjaGFyIGluIHRoZSBzcHJpdGU6IEggLSAxMCwgSSAtIDExLgogICAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSBEaXN0YW5jZSByYW4gaW4gcGl4ZWxzLgogICAqLwogIHNldEhpZ2hTY29yZTogZnVuY3Rpb24oZGlzdGFuY2UpIHsKICAgIGRpc3RhbmNlID0gdGhpcy5nZXRBY3R1YWxEaXN0YW5jZShkaXN0YW5jZSk7CiAgICB2YXIgaGlnaFNjb3JlU3RyID0gKHRoaXMuZGVmYXVsdFN0cmluZyArCiAgICAgICAgZGlzdGFuY2UpLnN1YnN0cigtdGhpcy5tYXhTY29yZVVuaXRzKTsKCiAgICB0aGlzLmhpZ2hTY29yZSA9IFsnMTAnLCAnMTEnLCAnJ10uY29uY2F0KGhpZ2hTY29yZVN0ci5zcGxpdCgnJykpOwogIH0sCgogIC8qKgogICAqIFJlc2V0IHRoZSBkaXN0YW5jZSBtZXRlciBiYWNrIHRvICcwMDAwMCcuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy51cGRhdGUoMCk7CiAgICB0aGlzLmFjaGVpdmVtZW50ID0gZmFsc2U7CiAgfQp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogQ2xvdWQgYmFja2dyb3VuZCBpdGVtLgogKiBTaW1pbGFyIHRvIGFuIG9ic3RhY2xlIG9iamVjdCBidXQgd2l0aG91dCBjb2xsaXNpb24gYm94ZXMuCiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBDYW52YXMgZWxlbWVudC4KICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBQb3NpdGlvbiBvZiBpbWFnZSBpbiBzcHJpdGUuCiAqIEBwYXJhbSB7bnVtYmVyfSBjb250YWluZXJXaWR0aAogKi8KZnVuY3Rpb24gQ2xvdWQoY2FudmFzLCBzcHJpdGVQb3MsIGNvbnRhaW5lcldpZHRoKSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY29udGFpbmVyV2lkdGggPSBjb250YWluZXJXaWR0aDsKICB0aGlzLnhQb3MgPSBjb250YWluZXJXaWR0aDsKICB0aGlzLnlQb3MgPSAwOwogIHRoaXMucmVtb3ZlID0gZmFsc2U7CiAgdGhpcy5jbG91ZEdhcCA9IGdldFJhbmRvbU51bShDbG91ZC5jb25maWcuTUlOX0NMT1VEX0dBUCwKICAgICAgQ2xvdWQuY29uZmlnLk1BWF9DTE9VRF9HQVApOwoKICB0aGlzLmluaXQoKTsKfTsKCgovKioKICogQ2xvdWQgb2JqZWN0IGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkNsb3VkLmNvbmZpZyA9IHsKICBIRUlHSFQ6IDE0LAogIE1BWF9DTE9VRF9HQVA6IDQwMCwKICBNQVhfU0tZX0xFVkVMOiAzMCwKICBNSU5fQ0xPVURfR0FQOiAxMDAsCiAgTUlOX1NLWV9MRVZFTDogNzEsCiAgV0lEVEg6IDQ2Cn07CgoKQ2xvdWQucHJvdG90eXBlID0gewogIC8qKgogICAqIEluaXRpYWxpc2UgdGhlIGNsb3VkLiBTZXRzIHRoZSBDbG91ZCBoZWlnaHQuCiAgICovCiAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnlQb3MgPSBnZXRSYW5kb21OdW0oQ2xvdWQuY29uZmlnLk1BWF9TS1lfTEVWRUwsCiAgICAgICAgQ2xvdWQuY29uZmlnLk1JTl9TS1lfTEVWRUwpOwogICAgdGhpcy5kcmF3KCk7CiAgfSwKCiAgLyoqCiAgICogRHJhdyB0aGUgY2xvdWQuCiAgICovCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNhbnZhc0N0eC5zYXZlKCk7CiAgICB2YXIgc291cmNlV2lkdGggPSBDbG91ZC5jb25maWcuV0lEVEg7CiAgICB2YXIgc291cmNlSGVpZ2h0ID0gQ2xvdWQuY29uZmlnLkhFSUdIVDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgc291cmNlV2lkdGggPSBzb3VyY2VXaWR0aCAqIDI7CiAgICAgIHNvdXJjZUhlaWdodCA9IHNvdXJjZUhlaWdodCAqIDI7CiAgICB9CgogICAgdGhpcy5jYW52YXNDdHguZHJhd0ltYWdlKFJ1bm5lci5pbWFnZVNwcml0ZSwgdGhpcy5zcHJpdGVQb3MueCwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQsCiAgICAgICAgdGhpcy54UG9zLCB0aGlzLnlQb3MsCiAgICAgICAgQ2xvdWQuY29uZmlnLldJRFRILCBDbG91ZC5jb25maWcuSEVJR0hUKTsKCiAgICB0aGlzLmNhbnZhc0N0eC5yZXN0b3JlKCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjbG91ZCBwb3NpdGlvbi4KICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWQKICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKHNwZWVkKSB7CiAgICBpZiAoIXRoaXMucmVtb3ZlKSB7CiAgICAgIHRoaXMueFBvcyAtPSBNYXRoLmNlaWwoc3BlZWQpOwogICAgICB0aGlzLmRyYXcoKTsKCiAgICAgIC8vIE1hcmsgYXMgcmVtb3ZlYWJsZSBpZiBubyBsb25nZXIgaW4gdGhlIGNhbnZhcy4KICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSgpKSB7CiAgICAgICAgdGhpcy5yZW1vdmUgPSB0cnVlOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ2hlY2sgaWYgdGhlIGNsb3VkIGlzIHZpc2libGUgb24gdGhlIHN0YWdlLgogICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICovCiAgaXNWaXNpYmxlOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLnhQb3MgKyBDbG91ZC5jb25maWcuV0lEVEggPiAwOwogIH0KfTsKCgovLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoKLyoqCiAqIE5pZ2h0bW9kZSBzaG93cyBhIG1vb24gYW5kIHN0YXJzIG9uIHRoZSBob3Jpem9uLgogKi8KZnVuY3Rpb24gTmlnaHRNb2RlKGNhbnZhcywgc3ByaXRlUG9zLCBjb250YWluZXJXaWR0aCkgewogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy54UG9zID0gY29udGFpbmVyV2lkdGggLSA1MDsKICB0aGlzLnlQb3MgPSAzMDsKICB0aGlzLmN1cnJlbnRQaGFzZSA9IDA7CiAgdGhpcy5vcGFjaXR5ID0gMDsKICB0aGlzLmNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyV2lkdGg7CiAgdGhpcy5zdGFycyA9IFtdOwogIHRoaXMuZHJhd1N0YXJzID0gZmFsc2U7CiAgdGhpcy5wbGFjZVN0YXJzKCk7Cn07CgovKioKICogQGVudW0ge251bWJlcn0KICovCk5pZ2h0TW9kZS5jb25maWcgPSB7CiAgRkFERV9TUEVFRDogMC4wMzUsCiAgSEVJR0hUOiA0MCwKICBNT09OX1NQRUVEOiAwLjI1LAogIE5VTV9TVEFSUzogMiwKICBTVEFSX1NJWkU6IDksCiAgU1RBUl9TUEVFRDogMC4zLAogIFNUQVJfTUFYX1k6IDcwLAogIFdJRFRIOiAyMAp9OwoKTmlnaHRNb2RlLnBoYXNlcyA9IFsxNDAsIDEyMCwgMTAwLCA2MCwgNDAsIDIwLCAwXTsKCk5pZ2h0TW9kZS5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogVXBkYXRlIG1vdmluZyBtb29uLCBjaGFuZ2luZyBwaGFzZXMuCiAgICogQHBhcmFtIHtib29sZWFufSBhY3RpdmF0ZWQgV2hldGhlciBuaWdodCBtb2RlIGlzIGFjdGl2YXRlZC4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGEKICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uKGFjdGl2YXRlZCwgZGVsdGEpIHsKICAgIC8vIE1vb24gcGhhc2UuCiAgICBpZiAoYWN0aXZhdGVkICYmIHRoaXMub3BhY2l0eSA9PSAwKSB7CiAgICAgIHRoaXMuY3VycmVudFBoYXNlKys7CgogICAgICBpZiAodGhpcy5jdXJyZW50UGhhc2UgPj0gTmlnaHRNb2RlLnBoYXNlcy5sZW5ndGgpIHsKICAgICAgICB0aGlzLmN1cnJlbnRQaGFzZSA9IDA7CiAgICAgIH0KICAgIH0KCiAgICAvLyBGYWRlIGluIC8gb3V0LgogICAgaWYgKGFjdGl2YXRlZCAmJiAodGhpcy5vcGFjaXR5IDwgMSB8fCB0aGlzLm9wYWNpdHkgPT0gMCkpIHsKICAgICAgdGhpcy5vcGFjaXR5ICs9IE5pZ2h0TW9kZS5jb25maWcuRkFERV9TUEVFRDsKICAgIH0gZWxzZSBpZiAodGhpcy5vcGFjaXR5ID4gMCkgewogICAgICB0aGlzLm9wYWNpdHkgLT0gTmlnaHRNb2RlLmNvbmZpZy5GQURFX1NQRUVEOwogICAgfQoKICAgIC8vIFNldCBtb29uIHBvc2l0aW9uaW5nLgogICAgaWYgKHRoaXMub3BhY2l0eSA+IDApIHsKICAgICAgdGhpcy54UG9zID0gdGhpcy51cGRhdGVYUG9zKHRoaXMueFBvcywgTmlnaHRNb2RlLmNvbmZpZy5NT09OX1NQRUVEKTsKCiAgICAgIC8vIFVwZGF0ZSBzdGFycy4KICAgICAgaWYgKHRoaXMuZHJhd1N0YXJzKSB7CiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICAgICAgICB0aGlzLnN0YXJzW2ldLnggPSB0aGlzLnVwZGF0ZVhQb3ModGhpcy5zdGFyc1tpXS54LAogICAgICAgICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NQRUVEKTsKICAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuZHJhdygpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5vcGFjaXR5ID0gMDsKICAgICAgdGhpcy5wbGFjZVN0YXJzKCk7CiAgICB9CiAgICB0aGlzLmRyYXdTdGFycyA9IHRydWU7CiAgfSwKCiAgdXBkYXRlWFBvczogZnVuY3Rpb24oY3VycmVudFBvcywgc3BlZWQpIHsKICAgIGlmIChjdXJyZW50UG9zIDwgLU5pZ2h0TW9kZS5jb25maWcuV0lEVEgpIHsKICAgICAgY3VycmVudFBvcyA9IHRoaXMuY29udGFpbmVyV2lkdGg7CiAgICB9IGVsc2UgewogICAgICBjdXJyZW50UG9zIC09IHNwZWVkOwogICAgfQogICAgcmV0dXJuIGN1cnJlbnRQb3M7CiAgfSwKCiAgZHJhdzogZnVuY3Rpb24oKSB7CiAgICB2YXIgbW9vblNvdXJjZVdpZHRoID0gdGhpcy5jdXJyZW50UGhhc2UgPT0gMyA/IE5pZ2h0TW9kZS5jb25maWcuV0lEVEggKiAyIDoKICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5XSURUSDsKICAgIHZhciBtb29uU291cmNlSGVpZ2h0ID0gTmlnaHRNb2RlLmNvbmZpZy5IRUlHSFQ7CiAgICB2YXIgbW9vblNvdXJjZVggPSB0aGlzLnNwcml0ZVBvcy54ICsgTmlnaHRNb2RlLnBoYXNlc1t0aGlzLmN1cnJlbnRQaGFzZV07CiAgICB2YXIgbW9vbk91dHB1dFdpZHRoID0gbW9vblNvdXJjZVdpZHRoOwogICAgdmFyIHN0YXJTaXplID0gTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NJWkU7CiAgICB2YXIgc3RhclNvdXJjZVggPSBSdW5uZXIuc3ByaXRlRGVmaW5pdGlvbi5MRFBJLlNUQVIueDsKCiAgICBpZiAoSVNfSElEUEkpIHsKICAgICAgbW9vblNvdXJjZVdpZHRoICo9IDI7CiAgICAgIG1vb25Tb3VyY2VIZWlnaHQgKj0gMjsKICAgICAgbW9vblNvdXJjZVggPSB0aGlzLnNwcml0ZVBvcy54ICsKICAgICAgICAgIChOaWdodE1vZGUucGhhc2VzW3RoaXMuY3VycmVudFBoYXNlXSAqIDIpOwogICAgICBzdGFyU2l6ZSAqPSAyOwogICAgICBzdGFyU291cmNlWCA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkhEUEkuU1RBUi54OwogICAgfQoKICAgIHRoaXMuY2FudmFzQ3R4LnNhdmUoKTsKICAgIHRoaXMuY2FudmFzQ3R4Lmdsb2JhbEFscGhhID0gdGhpcy5vcGFjaXR5OwoKICAgIC8vIFN0YXJzLgogICAgaWYgKHRoaXMuZHJhd1N0YXJzKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsCiAgICAgICAgICAgIHN0YXJTb3VyY2VYLCB0aGlzLnN0YXJzW2ldLnNvdXJjZVksIHN0YXJTaXplLCBzdGFyU2l6ZSwKICAgICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLnN0YXJzW2ldLngpLCB0aGlzLnN0YXJzW2ldLnksCiAgICAgICAgICAgIE5pZ2h0TW9kZS5jb25maWcuU1RBUl9TSVpFLCBOaWdodE1vZGUuY29uZmlnLlNUQVJfU0laRSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBNb29uLgogICAgdGhpcy5jYW52YXNDdHguZHJhd0ltYWdlKFJ1bm5lci5pbWFnZVNwcml0ZSwgbW9vblNvdXJjZVgsCiAgICAgICAgdGhpcy5zcHJpdGVQb3MueSwgbW9vblNvdXJjZVdpZHRoLCBtb29uU291cmNlSGVpZ2h0LAogICAgICAgIE1hdGgucm91bmQodGhpcy54UG9zKSwgdGhpcy55UG9zLAogICAgICAgIG1vb25PdXRwdXRXaWR0aCwgTmlnaHRNb2RlLmNvbmZpZy5IRUlHSFQpOwoKICAgIHRoaXMuY2FudmFzQ3R4Lmdsb2JhbEFscGhhID0gMTsKICAgIHRoaXMuY2FudmFzQ3R4LnJlc3RvcmUoKTsKICB9LAoKICAvLyBEbyBzdGFyIHBsYWNlbWVudC4KICBwbGFjZVN0YXJzOiBmdW5jdGlvbigpIHsKICAgIHZhciBzZWdtZW50U2l6ZSA9IE1hdGgucm91bmQodGhpcy5jb250YWluZXJXaWR0aCAvCiAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlMpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTmlnaHRNb2RlLmNvbmZpZy5OVU1fU1RBUlM7IGkrKykgewogICAgICB0aGlzLnN0YXJzW2ldID0ge307CiAgICAgIHRoaXMuc3RhcnNbaV0ueCA9IGdldFJhbmRvbU51bShzZWdtZW50U2l6ZSAqIGksIHNlZ21lbnRTaXplICogKGkgKyAxKSk7CiAgICAgIHRoaXMuc3RhcnNbaV0ueSA9IGdldFJhbmRvbU51bSgwLCBOaWdodE1vZGUuY29uZmlnLlNUQVJfTUFYX1kpOwoKICAgICAgaWYgKElTX0hJRFBJKSB7CiAgICAgICAgdGhpcy5zdGFyc1tpXS5zb3VyY2VZID0gUnVubmVyLnNwcml0ZURlZmluaXRpb24uSERQSS5TVEFSLnkgKwogICAgICAgICAgICBOaWdodE1vZGUuY29uZmlnLlNUQVJfU0laRSAqIDIgKiBpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuc3RhcnNbaV0uc291cmNlWSA9IFJ1bm5lci5zcHJpdGVEZWZpbml0aW9uLkxEUEkuU1RBUi55ICsKICAgICAgICAgICAgTmlnaHRNb2RlLmNvbmZpZy5TVEFSX1NJWkUgKiBpOwogICAgICB9CiAgICB9CiAgfSwKCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5jdXJyZW50UGhhc2UgPSAwOwogICAgdGhpcy5vcGFjaXR5ID0gMDsKICAgIHRoaXMudXBkYXRlKGZhbHNlKTsKICB9Cgp9OwoKCi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgovKioKICogSG9yaXpvbiBMaW5lLgogKiBDb25zaXN0cyBvZiB0d28gY29ubmVjdGluZyBsaW5lcy4gUmFuZG9tbHkgYXNzaWducyBhIGZsYXQgLyBidW1weSBob3Jpem9uLgogKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMKICogQHBhcmFtIHtPYmplY3R9IHNwcml0ZVBvcyBIb3Jpem9uIHBvc2l0aW9uIGluIHNwcml0ZS4KICogQGNvbnN0cnVjdG9yCiAqLwpmdW5jdGlvbiBIb3Jpem9uTGluZShjYW52YXMsIHNwcml0ZVBvcykgewogIHRoaXMuc3ByaXRlUG9zID0gc3ByaXRlUG9zOwogIHRoaXMuY2FudmFzID0gY2FudmFzOwogIHRoaXMuY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgdGhpcy5zb3VyY2VEaW1lbnNpb25zID0ge307CiAgdGhpcy5kaW1lbnNpb25zID0gSG9yaXpvbkxpbmUuZGltZW5zaW9uczsKICB0aGlzLnNvdXJjZVhQb3MgPSBbdGhpcy5zcHJpdGVQb3MueCwgdGhpcy5zcHJpdGVQb3MueCArCiAgICAgIHRoaXMuZGltZW5zaW9ucy5XSURUSF07CiAgdGhpcy54UG9zID0gW107CiAgdGhpcy55UG9zID0gMDsKICB0aGlzLmJ1bXBUaHJlc2hvbGQgPSAwLjU7CgogIHRoaXMuc2V0U291cmNlRGltZW5zaW9ucygpOwogIHRoaXMuZHJhdygpOwp9OwoKCi8qKgogKiBIb3Jpem9uIGxpbmUgZGltZW5zaW9ucy4KICogQGVudW0ge251bWJlcn0KICovCkhvcml6b25MaW5lLmRpbWVuc2lvbnMgPSB7CiAgV0lEVEg6IDYwMCwKICBIRUlHSFQ6IDEyLAogIFlQT1M6IDEyNwp9OwoKCkhvcml6b25MaW5lLnByb3RvdHlwZSA9IHsKICAvKioKICAgKiBTZXQgdGhlIHNvdXJjZSBkaW1lbnNpb25zIG9mIHRoZSBob3Jpem9uIGxpbmUuCiAgICovCiAgc2V0U291cmNlRGltZW5zaW9uczogZnVuY3Rpb24oKSB7CgogICAgZm9yICh2YXIgZGltZW5zaW9uIGluIEhvcml6b25MaW5lLmRpbWVuc2lvbnMpIHsKICAgICAgaWYgKElTX0hJRFBJKSB7CiAgICAgICAgaWYgKGRpbWVuc2lvbiAhPSAnWVBPUycpIHsKICAgICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9uc1tkaW1lbnNpb25dID0KICAgICAgICAgICAgICBIb3Jpem9uTGluZS5kaW1lbnNpb25zW2RpbWVuc2lvbl0gKiAyOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnNvdXJjZURpbWVuc2lvbnNbZGltZW5zaW9uXSA9CiAgICAgICAgICAgIEhvcml6b25MaW5lLmRpbWVuc2lvbnNbZGltZW5zaW9uXTsKICAgICAgfQogICAgICB0aGlzLmRpbWVuc2lvbnNbZGltZW5zaW9uXSA9IEhvcml6b25MaW5lLmRpbWVuc2lvbnNbZGltZW5zaW9uXTsKICAgIH0KCiAgICB0aGlzLnhQb3MgPSBbMCwgSG9yaXpvbkxpbmUuZGltZW5zaW9ucy5XSURUSF07CiAgICB0aGlzLnlQb3MgPSBIb3Jpem9uTGluZS5kaW1lbnNpb25zLllQT1M7CiAgfSwKCiAgLyoqCiAgICogUmV0dXJuIHRoZSBjcm9wIHggcG9zaXRpb24gb2YgYSB0eXBlLgogICAqLwogIGdldFJhbmRvbVR5cGU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPiB0aGlzLmJ1bXBUaHJlc2hvbGQgPyB0aGlzLmRpbWVuc2lvbnMuV0lEVEggOiAwOwogIH0sCgogIC8qKgogICAqIERyYXcgdGhlIGhvcml6b24gbGluZS4KICAgKi8KICBkcmF3OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHRoaXMuc291cmNlWFBvc1swXSwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9ucy5XSURUSCwgdGhpcy5zb3VyY2VEaW1lbnNpb25zLkhFSUdIVCwKICAgICAgICB0aGlzLnhQb3NbMF0sIHRoaXMueVBvcywKICAgICAgICB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsIHRoaXMuZGltZW5zaW9ucy5IRUlHSFQpOwoKICAgIHRoaXMuY2FudmFzQ3R4LmRyYXdJbWFnZShSdW5uZXIuaW1hZ2VTcHJpdGUsIHRoaXMuc291cmNlWFBvc1sxXSwKICAgICAgICB0aGlzLnNwcml0ZVBvcy55LAogICAgICAgIHRoaXMuc291cmNlRGltZW5zaW9ucy5XSURUSCwgdGhpcy5zb3VyY2VEaW1lbnNpb25zLkhFSUdIVCwKICAgICAgICB0aGlzLnhQb3NbMV0sIHRoaXMueVBvcywKICAgICAgICB0aGlzLmRpbWVuc2lvbnMuV0lEVEgsIHRoaXMuZGltZW5zaW9ucy5IRUlHSFQpOwogIH0sCgogIC8qKgogICAqIFVwZGF0ZSB0aGUgeCBwb3NpdGlvbiBvZiBhbiBpbmRpdmR1YWwgcGllY2Ugb2YgdGhlIGxpbmUuCiAgICogQHBhcmFtIHtudW1iZXJ9IHBvcyBMaW5lIHBvc2l0aW9uLgogICAqIEBwYXJhbSB7bnVtYmVyfSBpbmNyZW1lbnQKICAgKi8KICB1cGRhdGVYUG9zOiBmdW5jdGlvbihwb3MsIGluY3JlbWVudCkgewogICAgdmFyIGxpbmUxID0gcG9zOwogICAgdmFyIGxpbmUyID0gcG9zID09IDAgPyAxIDogMDsKCiAgICB0aGlzLnhQb3NbbGluZTFdIC09IGluY3JlbWVudDsKICAgIHRoaXMueFBvc1tsaW5lMl0gPSB0aGlzLnhQb3NbbGluZTFdICsgdGhpcy5kaW1lbnNpb25zLldJRFRIOwoKICAgIGlmICh0aGlzLnhQb3NbbGluZTFdIDw9IC10aGlzLmRpbWVuc2lvbnMuV0lEVEgpIHsKICAgICAgdGhpcy54UG9zW2xpbmUxXSArPSB0aGlzLmRpbWVuc2lvbnMuV0lEVEggKiAyOwogICAgICB0aGlzLnhQb3NbbGluZTJdID0gdGhpcy54UG9zW2xpbmUxXSAtIHRoaXMuZGltZW5zaW9ucy5XSURUSDsKICAgICAgdGhpcy5zb3VyY2VYUG9zW2xpbmUxXSA9IHRoaXMuZ2V0UmFuZG9tVHlwZSgpICsgdGhpcy5zcHJpdGVQb3MueDsKICAgIH0KICB9LAoKICAvKioKICAgKiBVcGRhdGUgdGhlIGhvcml6b24gbGluZS4KICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lCiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkCiAgICovCiAgdXBkYXRlOiBmdW5jdGlvbihkZWx0YVRpbWUsIHNwZWVkKSB7CiAgICB2YXIgaW5jcmVtZW50ID0gTWF0aC5mbG9vcihzcGVlZCAqIChGUFMgLyAxMDAwKSAqIGRlbHRhVGltZSk7CgogICAgaWYgKHRoaXMueFBvc1swXSA8PSAwKSB7CiAgICAgIHRoaXMudXBkYXRlWFBvcygwLCBpbmNyZW1lbnQpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy51cGRhdGVYUG9zKDEsIGluY3JlbWVudCk7CiAgICB9CiAgICB0aGlzLmRyYXcoKTsKICB9LAoKICAvKioKICAgKiBSZXNldCBob3Jpem9uIHRvIHRoZSBzdGFydGluZyBwb3NpdGlvbi4KICAgKi8KICByZXNldDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLnhQb3NbMF0gPSAwOwogICAgdGhpcy54UG9zWzFdID0gSG9yaXpvbkxpbmUuZGltZW5zaW9ucy5XSURUSDsKICB9Cn07CgoKLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKCi8qKgogKiBIb3Jpem9uIGJhY2tncm91bmQgY2xhc3MuCiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcwogKiBAcGFyYW0ge09iamVjdH0gc3ByaXRlUG9zIFNwcml0ZSBwb3NpdGlvbmluZy4KICogQHBhcmFtIHtPYmplY3R9IGRpbWVuc2lvbnMgQ2FudmFzIGRpbWVuc2lvbnMuCiAqIEBwYXJhbSB7bnVtYmVyfSBnYXBDb2VmZmljaWVudAogKiBAY29uc3RydWN0b3IKICovCmZ1bmN0aW9uIEhvcml6b24oY2FudmFzLCBzcHJpdGVQb3MsIGRpbWVuc2lvbnMsIGdhcENvZWZmaWNpZW50KSB7CiAgdGhpcy5jYW52YXMgPSBjYW52YXM7CiAgdGhpcy5jYW52YXNDdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogIHRoaXMuY29uZmlnID0gSG9yaXpvbi5jb25maWc7CiAgdGhpcy5kaW1lbnNpb25zID0gZGltZW5zaW9uczsKICB0aGlzLmdhcENvZWZmaWNpZW50ID0gZ2FwQ29lZmZpY2llbnQ7CiAgdGhpcy5vYnN0YWNsZXMgPSBbXTsKICB0aGlzLm9ic3RhY2xlSGlzdG9yeSA9IFtdOwogIHRoaXMuaG9yaXpvbk9mZnNldHMgPSBbMCwgMF07CiAgdGhpcy5jbG91ZEZyZXF1ZW5jeSA9IHRoaXMuY29uZmlnLkNMT1VEX0ZSRVFVRU5DWTsKICB0aGlzLnNwcml0ZVBvcyA9IHNwcml0ZVBvczsKICB0aGlzLm5pZ2h0TW9kZSA9IG51bGw7CgogIC8vIENsb3VkCiAgdGhpcy5jbG91ZHMgPSBbXTsKICB0aGlzLmNsb3VkU3BlZWQgPSB0aGlzLmNvbmZpZy5CR19DTE9VRF9TUEVFRDsKCiAgLy8gSG9yaXpvbgogIHRoaXMuaG9yaXpvbkxpbmUgPSBudWxsOwogIHRoaXMuaW5pdCgpOwp9OwoKCi8qKgogKiBIb3Jpem9uIGNvbmZpZy4KICogQGVudW0ge251bWJlcn0KICovCkhvcml6b24uY29uZmlnID0gewogIEJHX0NMT1VEX1NQRUVEOiAwLjIsCiAgQlVNUFlfVEhSRVNIT0xEOiAuMywKICBDTE9VRF9GUkVRVUVOQ1k6IC41LAogIEhPUklaT05fSEVJR0hUOiAxNiwKICBNQVhfQ0xPVURTOiA2Cn07CgoKSG9yaXpvbi5wcm90b3R5cGUgPSB7CiAgLyoqCiAgICogSW5pdGlhbGlzZSB0aGUgaG9yaXpvbi4gSnVzdCBhZGQgdGhlIGxpbmUgYW5kIGEgY2xvdWQuIE5vIG9ic3RhY2xlcy4KICAgKi8KICBpbml0OiBmdW5jdGlvbigpIHsKICAgIHRoaXMuYWRkQ2xvdWQoKTsKICAgIHRoaXMuaG9yaXpvbkxpbmUgPSBuZXcgSG9yaXpvbkxpbmUodGhpcy5jYW52YXMsIHRoaXMuc3ByaXRlUG9zLkhPUklaT04pOwogICAgdGhpcy5uaWdodE1vZGUgPSBuZXcgTmlnaHRNb2RlKHRoaXMuY2FudmFzLCB0aGlzLnNwcml0ZVBvcy5NT09OLAogICAgICAgIHRoaXMuZGltZW5zaW9ucy5XSURUSCk7CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVwZGF0ZU9ic3RhY2xlcyBVc2VkIGFzIGFuIG92ZXJyaWRlIHRvIHByZXZlbnQKICAgKiAgICAgdGhlIG9ic3RhY2xlcyBmcm9tIGJlaW5nIHVwZGF0ZWQgLyBhZGRlZC4gVGhpcyBoYXBwZW5zIGluIHRoZQogICAqICAgICBlYXNlIGluIHNlY3Rpb24uCiAgICogQHBhcmFtIHtib29sZWFufSBzaG93TmlnaHRNb2RlIE5pZ2h0IG1vZGUgYWN0aXZhdGVkLgogICAqLwogIHVwZGF0ZTogZnVuY3Rpb24oZGVsdGFUaW1lLCBjdXJyZW50U3BlZWQsIHVwZGF0ZU9ic3RhY2xlcywgc2hvd05pZ2h0TW9kZSkgewogICAgdGhpcy5ydW5uaW5nVGltZSArPSBkZWx0YVRpbWU7CiAgICB0aGlzLmhvcml6b25MaW5lLnVwZGF0ZShkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CiAgICB0aGlzLm5pZ2h0TW9kZS51cGRhdGUoc2hvd05pZ2h0TW9kZSk7CiAgICB0aGlzLnVwZGF0ZUNsb3VkcyhkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CgogICAgaWYgKHVwZGF0ZU9ic3RhY2xlcykgewogICAgICB0aGlzLnVwZGF0ZU9ic3RhY2xlcyhkZWx0YVRpbWUsIGN1cnJlbnRTcGVlZCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjbG91ZCBwb3NpdGlvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKi8KICB1cGRhdGVDbG91ZHM6IGZ1bmN0aW9uKGRlbHRhVGltZSwgc3BlZWQpIHsKICAgIHZhciBjbG91ZFNwZWVkID0gdGhpcy5jbG91ZFNwZWVkIC8gMTAwMCAqIGRlbHRhVGltZSAqIHNwZWVkOwogICAgdmFyIG51bUNsb3VkcyA9IHRoaXMuY2xvdWRzLmxlbmd0aDsKCiAgICBpZiAobnVtQ2xvdWRzKSB7CiAgICAgIGZvciAodmFyIGkgPSBudW1DbG91ZHMgLSAxOyBpID49IDA7IGktLSkgewogICAgICAgIHRoaXMuY2xvdWRzW2ldLnVwZGF0ZShjbG91ZFNwZWVkKTsKICAgICAgfQoKICAgICAgdmFyIGxhc3RDbG91ZCA9IHRoaXMuY2xvdWRzW251bUNsb3VkcyAtIDFdOwoKICAgICAgLy8gQ2hlY2sgZm9yIGFkZGluZyBhIG5ldyBjbG91ZC4KICAgICAgaWYgKG51bUNsb3VkcyA8IHRoaXMuY29uZmlnLk1BWF9DTE9VRFMgJiYKICAgICAgICAgICh0aGlzLmRpbWVuc2lvbnMuV0lEVEggLSBsYXN0Q2xvdWQueFBvcykgPiBsYXN0Q2xvdWQuY2xvdWRHYXAgJiYKICAgICAgICAgIHRoaXMuY2xvdWRGcmVxdWVuY3kgPiBNYXRoLnJhbmRvbSgpKSB7CiAgICAgICAgdGhpcy5hZGRDbG91ZCgpOwogICAgICB9CgogICAgICAvLyBSZW1vdmUgZXhwaXJlZCBjbG91ZHMuCiAgICAgIHRoaXMuY2xvdWRzID0gdGhpcy5jbG91ZHMuZmlsdGVyKGZ1bmN0aW9uKG9iaikgewogICAgICAgIHJldHVybiAhb2JqLnJlbW92ZTsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICB0aGlzLmFkZENsb3VkKCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBvYnN0YWNsZSBwb3NpdGlvbnMuCiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZQogICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50U3BlZWQKICAgKi8KICB1cGRhdGVPYnN0YWNsZXM6IGZ1bmN0aW9uKGRlbHRhVGltZSwgY3VycmVudFNwZWVkKSB7CiAgICAvLyBPYnN0YWNsZXMsIG1vdmUgdG8gSG9yaXpvbiBsYXllci4KICAgIHZhciB1cGRhdGVkT2JzdGFjbGVzID0gdGhpcy5vYnN0YWNsZXMuc2xpY2UoMCk7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic3RhY2xlcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgb2JzdGFjbGUgPSB0aGlzLm9ic3RhY2xlc1tpXTsKICAgICAgb2JzdGFjbGUudXBkYXRlKGRlbHRhVGltZSwgY3VycmVudFNwZWVkKTsKCiAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIG9ic3RhY2xlcy4KICAgICAgaWYgKG9ic3RhY2xlLnJlbW92ZSkgewogICAgICAgIHVwZGF0ZWRPYnN0YWNsZXMuc2hpZnQoKTsKICAgICAgfQogICAgfQogICAgdGhpcy5vYnN0YWNsZXMgPSB1cGRhdGVkT2JzdGFjbGVzOwoKICAgIGlmICh0aGlzLm9ic3RhY2xlcy5sZW5ndGggPiAwKSB7CiAgICAgIHZhciBsYXN0T2JzdGFjbGUgPSB0aGlzLm9ic3RhY2xlc1t0aGlzLm9ic3RhY2xlcy5sZW5ndGggLSAxXTsKCiAgICAgIGlmIChsYXN0T2JzdGFjbGUgJiYgIWxhc3RPYnN0YWNsZS5mb2xsb3dpbmdPYnN0YWNsZUNyZWF0ZWQgJiYKICAgICAgICAgIGxhc3RPYnN0YWNsZS5pc1Zpc2libGUoKSAmJgogICAgICAgICAgKGxhc3RPYnN0YWNsZS54UG9zICsgbGFzdE9ic3RhY2xlLndpZHRoICsgbGFzdE9ic3RhY2xlLmdhcCkgPAogICAgICAgICAgdGhpcy5kaW1lbnNpb25zLldJRFRIKSB7CiAgICAgICAgdGhpcy5hZGROZXdPYnN0YWNsZShjdXJyZW50U3BlZWQpOwogICAgICAgIGxhc3RPYnN0YWNsZS5mb2xsb3dpbmdPYnN0YWNsZUNyZWF0ZWQgPSB0cnVlOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICAvLyBDcmVhdGUgbmV3IG9ic3RhY2xlcy4KICAgICAgdGhpcy5hZGROZXdPYnN0YWNsZShjdXJyZW50U3BlZWQpOwogICAgfQogIH0sCgogIHJlbW92ZUZpcnN0T2JzdGFjbGU6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5vYnN0YWNsZXMuc2hpZnQoKTsKICB9LAoKICAvKioKICAgKiBBZGQgYSBuZXcgb2JzdGFjbGUuCiAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRTcGVlZAogICAqLwogIGFkZE5ld09ic3RhY2xlOiBmdW5jdGlvbihjdXJyZW50U3BlZWQpIHsKICAgIHZhciBvYnN0YWNsZVR5cGVJbmRleCA9IGdldFJhbmRvbU51bSgwLCBPYnN0YWNsZS50eXBlcy5sZW5ndGggLSAxKTsKICAgIHZhciBvYnN0YWNsZVR5cGUgPSBPYnN0YWNsZS50eXBlc1tvYnN0YWNsZVR5cGVJbmRleF07CgogICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlcyBvZiB0aGUgc2FtZSB0eXBlIG9mIG9ic3RhY2xlLgogICAgLy8gQWxzbyBjaGVjayBvYnN0YWNsZSBpcyBhdmFpbGFibGUgYXQgY3VycmVudCBzcGVlZC4KICAgIGlmICh0aGlzLmR1cGxpY2F0ZU9ic3RhY2xlQ2hlY2sob2JzdGFjbGVUeXBlLnR5cGUpIHx8CiAgICAgICAgY3VycmVudFNwZWVkIDwgb2JzdGFjbGVUeXBlLm1pblNwZWVkKSB7CiAgICAgIHRoaXMuYWRkTmV3T2JzdGFjbGUoY3VycmVudFNwZWVkKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBvYnN0YWNsZVNwcml0ZVBvcyA9IHRoaXMuc3ByaXRlUG9zW29ic3RhY2xlVHlwZS50eXBlXTsKCiAgICAgIHRoaXMub2JzdGFjbGVzLnB1c2gobmV3IE9ic3RhY2xlKHRoaXMuY2FudmFzQ3R4LCBvYnN0YWNsZVR5cGUsCiAgICAgICAgICBvYnN0YWNsZVNwcml0ZVBvcywgdGhpcy5kaW1lbnNpb25zLAogICAgICAgICAgdGhpcy5nYXBDb2VmZmljaWVudCwgY3VycmVudFNwZWVkLCBvYnN0YWNsZVR5cGUud2lkdGgpKTsKCiAgICAgIHRoaXMub2JzdGFjbGVIaXN0b3J5LnVuc2hpZnQob2JzdGFjbGVUeXBlLnR5cGUpOwoKICAgICAgaWYgKHRoaXMub2JzdGFjbGVIaXN0b3J5Lmxlbmd0aCA+IDEpIHsKICAgICAgICB0aGlzLm9ic3RhY2xlSGlzdG9yeS5zcGxpY2UoUnVubmVyLmNvbmZpZy5NQVhfT0JTVEFDTEVfRFVQTElDQVRJT04pOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcmV2aW91cyB0d28gb2JzdGFjbGVzIGFyZSB0aGUgc2FtZSBhcyB0aGUgbmV4dCBvbmUuCiAgICogTWF4aW11bSBkdXBsaWNhdGlvbiBpcyBzZXQgaW4gY29uZmlnIHZhbHVlIE1BWF9PQlNUQUNMRV9EVVBMSUNBVElPTi4KICAgKiBAcmV0dXJuIHtib29sZWFufQogICAqLwogIGR1cGxpY2F0ZU9ic3RhY2xlQ2hlY2s6IGZ1bmN0aW9uKG5leHRPYnN0YWNsZVR5cGUpIHsKICAgIHZhciBkdXBsaWNhdGVDb3VudCA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm9ic3RhY2xlSGlzdG9yeS5sZW5ndGg7IGkrKykgewogICAgICBkdXBsaWNhdGVDb3VudCA9IHRoaXMub2JzdGFjbGVIaXN0b3J5W2ldID09IG5leHRPYnN0YWNsZVR5cGUgPwogICAgICAgICAgZHVwbGljYXRlQ291bnQgKyAxIDogMDsKICAgIH0KICAgIHJldHVybiBkdXBsaWNhdGVDb3VudCA+PSBSdW5uZXIuY29uZmlnLk1BWF9PQlNUQUNMRV9EVVBMSUNBVElPTjsKICB9LAoKICAvKioKICAgKiBSZXNldCB0aGUgaG9yaXpvbiBsYXllci4KICAgKiBSZW1vdmUgZXhpc3Rpbmcgb2JzdGFjbGVzIGFuZCByZXBvc2l0aW9uIHRoZSBob3Jpem9uIGxpbmUuCiAgICovCiAgcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgdGhpcy5vYnN0YWNsZXMgPSBbXTsKICAgIHRoaXMuaG9yaXpvbkxpbmUucmVzZXQoKTsKICAgIHRoaXMubmlnaHRNb2RlLnJlc2V0KCk7CiAgfSwKCiAgLyoqCiAgICogVXBkYXRlIHRoZSBjYW52YXMgd2lkdGggYW5kIHNjYWxpbmcuCiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIENhbnZhcyB3aWR0aC4KICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IENhbnZhcyBoZWlnaHQuCiAgICovCiAgcmVzaXplOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7CiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0OwogIH0sCgogIC8qKgogICAqIEFkZCBhIG5ldyBjbG91ZCB0byB0aGUgaG9yaXpvbi4KICAgKi8KICBhZGRDbG91ZDogZnVuY3Rpb24oKSB7CiAgICB0aGlzLmNsb3Vkcy5wdXNoKG5ldyBDbG91ZCh0aGlzLmNhbnZhcywgdGhpcy5zcHJpdGVQb3MuQ0xPVUQsCiAgICAgICAgdGhpcy5kaW1lbnNpb25zLldJRFRIKSk7CiAgfQp9Owp9KSgpOwoK
ChildNodes : 17 : 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26
ChildElementCount : 8
FirstElementChild : 5
LastElementChild : 24
Children : 8 : 5, 7, 9, 12, 15, 18, 21, 24
PreviousElementSibling : null 
NextElementSibling : 28
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : head
TagName : HEAD
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 4
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 5
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 5
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 5
NodeType : 1
NodeName : META
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 4
NextSibling : 6
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 7
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : meta
TagName : META
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : charset
Name : charset
Value : utf-8

NodeId : 6
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 5
NextSibling : 7
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 5
NextElementSibling : 7
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 7
NodeType : 1
NodeName : META
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 6
NextSibling : 8
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 5
NextElementSibling : 9
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : meta
TagName : META
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : name
Name : name
Value : viewport

NamespaceURI : === null
Prefix : === null
LocalName : content
Name : content
Value : == d2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bS1zY2FsZT0xLjAsIHVzZXItc2NhbGFibGU9bm8=

NodeId : 8
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 7
NextSibling : 9
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 7
NextElementSibling : 9
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 9
NodeType : 1
NodeName : TITLE
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 10
LastChild : 10
PreviousSibling : 8
NextSibling : 11
NodeValue : === null
TextContent : mobile.twitter.com
ChildNodes : 1 : 10
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 7
NextElementSibling : 12
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : title
TagName : TITLE
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : i18n-content
Name : i18n-content
Value : title

NodeId : 10
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 9
ParentElement : 9
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : mobile.twitter.com
TextContent : mobile.twitter.com
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : mobile.twitter.com
Length : 18
WholeText : mobile.twitter.com

NodeId : 11
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 9
NextSibling : 12
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 9
NextElementSibling : 12
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 12
NodeType : 1
NodeName : STYLE
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 13
LastChild : 13
PreviousSibling : 11
NextSibling : 14
NodeValue : === null
TextContent : == 
ChildNodes : 1 : 13
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 9
NextElementSibling : 15
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : style
TagName : STYLE
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 13
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 12
ParentElement : 12
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == 
TextContent : == 
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == 
Length : 30408
WholeText : == 

NodeId : 14
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 12
NextSibling : 15
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 12
NextElementSibling : 15
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 15
NodeType : 1
NodeName : STYLE
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 16
LastChild : 16
PreviousSibling : 14
NextSibling : 17
NodeValue : === null
TextContent : == 
ChildNodes : 1 : 16
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 12
NextElementSibling : 18
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : style
TagName : STYLE
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 16
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 15
ParentElement : 15
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == 
TextContent : == 
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == 
Length : 12345
WholeText : == 

NodeId : 17
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 15
NextSibling : 18
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 15
NextElementSibling : 18
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 18
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 19
LastChild : 19
PreviousSibling : 17
NextSibling : 20
NodeValue : === null
TextContent : == Ly8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwo=
ChildNodes : 1 : 19
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 15
NextElementSibling : 21
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 19
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 18
ParentElement : 18
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == Ly8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwo=
TextContent : == Ly8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwo=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == Ly8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwo=
Length : 1748
WholeText : == Ly8gQ29weXJpZ2h0IDIwMTUgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCnZhciBtb2JpbGVOYXYgPSBmYWxzZTsKCi8qKgogKiBGb3Igc21hbGwgc2NyZWVuIG1vYmlsZSB0aGUgbmF2aWdhdGlvbiBidXR0b25zIGFyZSBtb3ZlZAogKiBiZWxvdyB0aGUgYWR2YW5jZWQgdGV4dC4KICovCmZ1bmN0aW9uIG9uUmVzaXplKCkgewogIHZhciBoZWxwT3V0ZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGV0YWlscycpOwogIHZhciBtYWluQ29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWNvbnRlbnQnKTsKICB2YXIgbWVkaWFRdWVyeSA9ICcobWluLXdpZHRoOiAyNDBweCkgYW5kIChtYXgtd2lkdGg6IDQyMHB4KSBhbmQgJyArCiAgICAgICcobWF4LWhlaWdodDogNzM2cHgpIGFuZCAobWluLWhlaWdodDogNDAxcHgpIGFuZCAnICsKICAgICAgJyhvcmllbnRhdGlvbjogcG9ydHJhaXQpLCAobWF4LXdpZHRoOiA3MzZweCkgYW5kICcgKwogICAgICAnKG1heC1oZWlnaHQ6IDQyMHB4KSBhbmQgKG1pbi1oZWlnaHQ6IDI0MHB4KSBhbmQgJyArCiAgICAgICcobWluLXdpZHRoOiA0MjFweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc7CgogIHZhciBkZXRhaWxzSGlkZGVuID0gaGVscE91dGVyQm94LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJyk7CiAgdmFyIHJ1bm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ydW5uZXItY29udGFpbmVyJyk7CgogIC8vIENoZWNrIGZvciBjaGFuZ2UgaW4gbmF2IHN0YXR1cy4KICBpZiAobW9iaWxlTmF2ICE9IHdpbmRvdy5tYXRjaE1lZGlhKG1lZGlhUXVlcnkpLm1hdGNoZXMpIHsKICAgIG1vYmlsZU5hdiA9ICFtb2JpbGVOYXY7CgogICAgLy8gSGFuZGxlIHNob3dpbmcgdGhlIHRvcCBjb250ZW50IC8gZGV0YWlscyBzZWN0aW9ucyBhY2NvcmRpbmcgdG8gc3RhdGUuCiAgICBpZiAobW9iaWxlTmF2KSB7CiAgICAgIG1haW5Db250ZW50LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgaGVscE91dGVyQm94LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsIGRldGFpbHNIaWRkZW4pOwogICAgICBpZiAocnVubmVyQ29udGFpbmVyKSB7CiAgICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicsICFkZXRhaWxzSGlkZGVuKTsKICAgICAgfQogICAgfSBlbHNlIGlmICghZGV0YWlsc0hpZGRlbikgewogICAgICAvLyBOb24gbW9iaWxlIG5hdiB3aXRoIHZpc2libGUgZGV0YWlscy4KICAgICAgbWFpbkNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgIGhlbHBPdXRlckJveC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgaWYgKHJ1bm5lckNvbnRhaW5lcikgewogICAgICAgIHJ1bm5lckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgfQogICAgfQogIH0KfQoKZnVuY3Rpb24gc2V0dXBNb2JpbGVOYXYoKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTsKICBvblJlc2l6ZSgpOwp9Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2V0dXBNb2JpbGVOYXYpOwo=

NodeId : 20
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 18
NextSibling : 21
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 18
NextElementSibling : 21
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 21
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 22
LastChild : 22
PreviousSibling : 20
NextSibling : 23
NodeValue : === null
TextContent : == Ly8gQ29weXJpZ2h0IDIwMTMgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCmZ1bmN0aW9uIHRvZ2dsZUhlbHBCb3goKSB7CiAgdmFyIGhlbHBCb3hPdXRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJyk7CiAgaGVscEJveE91dGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogIHZhciBkZXRhaWxzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGFpbHMtYnV0dG9uJyk7CiAgaWYgKGhlbHBCb3hPdXRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKQogICAgZGV0YWlsc0J1dHRvbi5pbm5lclRleHQgPSBkZXRhaWxzQnV0dG9uLmRldGFpbHNUZXh0OwogIGVsc2UKICAgIGRldGFpbHNCdXR0b24uaW5uZXJUZXh0ID0gZGV0YWlsc0J1dHRvbi5oaWRlRGV0YWlsc1RleHQ7CgogIC8vIERldGFpbHMgYXBwZWFycyBvdmVyIHRoZSBtYWluIGNvbnRlbnQgb24gc21hbGwgc2NyZWVucy4KICBpZiAobW9iaWxlTmF2KSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1jb250ZW50JykuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgICB2YXIgcnVubmVyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJ1bm5lci1jb250YWluZXInKTsKICAgIGlmIChydW5uZXJDb250YWluZXIpIHsKICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZGlhZ25vc2VFcnJvcnMoKSB7Ci8vIAogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKQogICAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRpYWdub3NlRXJyb3JzQnV0dG9uQ2xpY2soKTsKLy8gCi8vIAp9CgovLyBTdWJmcmFtZXMgdXNlIGEgZGlmZmVyZW50IGxheW91dCBidXQgdGhlIHNhbWUgaHRtbCBmaWxlLiAgVGhpcyBpcyB0byBtYWtlIGl0Ci8vIGVhc2llciB0byBzdXBwb3J0IHBsYXRmb3JtcyB0aGF0IGxvYWQgdGhlIGVycm9yIHBhZ2UgdmlhIGRpZmZlcmVudAovLyBtZWNoYW5pc21zIChDdXJyZW50bHkganVzdCBpT1MpLgppZiAod2luZG93LnRvcC5sb2NhdGlvbiAhPSB3aW5kb3cubG9jYXRpb24pCiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3ViZnJhbWUnLCAnJyk7CgovLyBSZS1yZW5kZXJzIHRoZSBlcnJvciBwYWdlIHVzaW5nIHxzdHJpbmdzfCBhcyB0aGUgZGljdGlvbmFyeSBvZiB2YWx1ZXMuCi8vIFVzZWQgYnkgTmV0RXJyb3JUYWJIZWxwZXIgdG8gdXBkYXRlIEROUyBlcnJvciBwYWdlcyB3aXRoIHByb2JlIHJlc3VsdHMuCmZ1bmN0aW9uIHVwZGF0ZUZvckRuc1Byb2JlKHN0cmluZ3MpIHsKICB2YXIgY29udGV4dCA9IG5ldyBKc0V2YWxDb250ZXh0KHN0cmluZ3MpOwogIGpzdFByb2Nlc3MoY29udGV4dCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3QnKSk7Cn0KCi8vIEdpdmVuIHRoZSBjbGFzc0xpc3QgcHJvcGVydHkgb2YgYW4gZWxlbWVudCwgYWRkcyBhbiBpY29uIGNsYXNzIHRvIHRoZSBsaXN0Ci8vIGFuZCByZW1vdmVzIHRoZSBwcmV2aW91c2x5LQpmdW5jdGlvbiB1cGRhdGVJY29uQ2xhc3MoY2xhc3NMaXN0LCBuZXdDbGFzcykgewogIHZhciBvbGRDbGFzczsKCiAgaWYgKGNsYXNzTGlzdC5oYXNPd25Qcm9wZXJ0eSgnbGFzdF9pY29uX2NsYXNzJykpIHsKICAgIG9sZENsYXNzID0gY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXTsKICAgIGlmIChvbGRDbGFzcyA9PSBuZXdDbGFzcykKICAgICAgcmV0dXJuOwogIH0KCiAgY2xhc3NMaXN0LmFkZChuZXdDbGFzcyk7CiAgaWYgKG9sZENsYXNzICE9PSB1bmRlZmluZWQpCiAgICBjbGFzc0xpc3QucmVtb3ZlKG9sZENsYXNzKTsKCiAgY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXSA9IG5ld0NsYXNzOwoKICBpZiAobmV3Q2xhc3MgPT0gJ2ljb24tb2ZmbGluZScpIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnb2ZmbGluZScpOwogICAgbmV3IFJ1bm5lcignLmludGVyc3RpdGlhbC13cmFwcGVyJyk7CiAgfSBlbHNlIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbmV0ZXJyb3InKTsKICB9Cn0KCi8vIERvZXMgYSBzZWFyY2ggdXNpbmcgfGJhc2VTZWFyY2hVcmx8IGFuZCB0aGUgdGV4dCBpbiB0aGUgc2VhcmNoIGJveC4KZnVuY3Rpb24gc2VhcmNoKGJhc2VTZWFyY2hVcmwpIHsKICB2YXIgc2VhcmNoVGV4dE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWJveCcpOwogIGRvY3VtZW50LmxvY2F0aW9uID0gYmFzZVNlYXJjaFVybCArIHNlYXJjaFRleHROb2RlLnZhbHVlOwogIHJldHVybiBmYWxzZTsKfQoKLy8gVXNlIHRvIHRyYWNrIGNsaWNrcyBvbiBlbGVtZW50cyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbgovLyBzZXJ2aWNlLiAgSWYgfHRyYWNraW5nSWR8IGlzIG5lZ2F0aXZlLCB0aGUgZWxlbWVudCBkb2VzIG5vdCBjb21lIGZyb20gdGhlCi8vIGNvcnJlY3Rpb24gc2VydmljZS4KZnVuY3Rpb24gdHJhY2tDbGljayh0cmFja2luZ0lkKSB7CiAgLy8gVGhpcyBjYW4ndCBiZSBkb25lIHdpdGggWEhScyBiZWNhdXNlIFhIUnMgYXJlIGNhbmNlbGxlZCBvbiBuYXZpZ2F0aW9uCiAgLy8gc3RhcnQsIGFuZCBiZWNhdXNlIHRoZXNlIGFyZSBjcm9zcy1zaXRlIHJlcXVlc3RzLgogIGlmICh0cmFja2luZ0lkID49IDAgJiYgZXJyb3JQYWdlQ29udHJvbGxlcikKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDbGljayh0cmFja2luZ0lkKTsKfQoKLy8gQ2FsbGVkIHdoZW4gYW4gPGE+IHRhZyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbiBzZXJ2aWNlIGlzCi8vIGNsaWNrZWQuICBTZXBhcmF0ZSBmdW5jdGlvbiBmcm9tIHRyYWNrQ2xpY2sgc28gdGhlIHJlc291cmNlcyBkb24ndCBoYXZlIHRvCi8vIGJlIHVwZGF0ZWQgaWYgbmV3IGRhdGEgaXMgYWRkZWQgdG8ganN0ZGF0YS4KZnVuY3Rpb24gbGlua0NsaWNrZWQoanN0ZGF0YSkgewogIHRyYWNrQ2xpY2soanN0ZGF0YS50cmFja2luZ0lkKTsKfQoKLy8gSW1wbGVtZW50cyBidXR0b24gY2xpY2tzLiAgVGhpcyBmdW5jdGlvbiBpcyBuZWVkZWQgZHVyaW5nIHRoZSB0cmFuc2l0aW9uCi8vIGJldHdlZW4gaW1wbGVtZW50aW5nIHRoZXNlIGluIHRydW5rIGNocm9taXVtIGFuZCBpbXBsZW1lbnRpbmcgdGhlbSBpbgovLyBpT1MuCmZ1bmN0aW9uIHJlbG9hZEJ1dHRvbkNsaWNrKHVybCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5yZWxvYWRCdXR0b25DbGljaygpOwogIH0gZWxzZSB7CiAgICBsb2NhdGlvbiA9IHVybDsKICB9Cn0KCmZ1bmN0aW9uIHNob3dTYXZlZENvcHlCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpIHsKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuc2hvd1NhdmVkQ29weUJ1dHRvbkNsaWNrKCk7CiAgfQp9CgpmdW5jdGlvbiBkb3dubG9hZEJ1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5kb3dubG9hZEJ1dHRvbkNsaWNrKCk7CiAgICB2YXIgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtYnV0dG9uJyk7CiAgICBkb3dubG9hZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7CiAgICBkb3dubG9hZEJ1dHRvbi50ZXh0Q29udGVudCA9IGRvd25sb2FkQnV0dG9uLmRpc2FibGVkVGV4dDsKICB9Cn0KCmZ1bmN0aW9uIGRldGFpbHNCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpCiAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRldGFpbHNCdXR0b25DbGljaygpOwp9CgovKioKICogUmVwbGFjZSB0aGUgcmVsb2FkIGJ1dHRvbiB3aXRoIHRoZSBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICovCmZ1bmN0aW9uIHNldFVwQ2FjaGVkQnV0dG9uKGJ1dHRvblN0cmluZ3MpIHsKICB2YXIgcmVsb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbG9hZC1idXR0b24nKTsKCiAgcmVsb2FkQnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uU3RyaW5ncy5tc2c7CiAgdmFyIHVybCA9IGJ1dHRvblN0cmluZ3MuY2FjaGVVcmw7CiAgdmFyIHRyYWNraW5nSWQgPSBidXR0b25TdHJpbmdzLnRyYWNraW5nSWQ7CiAgcmVsb2FkQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB0cmFja0NsaWNrKHRyYWNraW5nSWQpOwogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDYWNoZWRDb3B5QnV0dG9uQ2xpY2soKTsKICAgIH0KICAgIGxvY2F0aW9uID0gdXJsOwogIH07CiAgcmVsb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsKICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJykuaGlkZGVuID0gZmFsc2U7Cn0KCnZhciBwcmltYXJ5Q29udHJvbE9uTGVmdCA9IHRydWU7Ci8vIAoKZnVuY3Rpb24gb25Eb2N1bWVudExvYWQoKSB7CiAgdmFyIGNvbnRyb2xCdXR0b25EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJyk7CiAgdmFyIHJlbG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWxvYWQtYnV0dG9uJyk7CiAgdmFyIGRldGFpbHNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscy1idXR0b24nKTsKICB2YXIgc2hvd1NhdmVkQ29weUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG93LXNhdmVkLWNvcHktYnV0dG9uJyk7CiAgdmFyIGRvd25sb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkLWJ1dHRvbicpOwoKICB2YXIgcmVsb2FkQnV0dG9uVmlzaWJsZSA9IGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygncmVsb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdyZWxvYWRCdXR0b24nKS5tc2c7CiAgdmFyIHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlID0KICAgICAgbG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykubXNnOwogIHZhciBkb3dubG9hZEJ1dHRvblZpc2libGUgPQogICAgICBsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ2Rvd25sb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdkb3dubG9hZEJ1dHRvbicpLm1zZzsKCiAgdmFyIHByaW1hcnlCdXR0b24sIHNlY29uZGFyeUJ1dHRvbjsKICBpZiAoc2hvd1NhdmVkQ29weUJ1dHRvbi5wcmltYXJ5KSB7CiAgICBwcmltYXJ5QnV0dG9uID0gc2hvd1NhdmVkQ29weUJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICB9IGVsc2UgewogICAgcHJpbWFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHNob3dTYXZlZENvcHlCdXR0b247CiAgfQoKICAvLyBTZXRzIHVwIHRoZSBwcm9wZXIgYnV0dG9uIGxheW91dCBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0uCiAgaWYgKHByaW1hcnlDb250cm9sT25MZWZ0KSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1sZWZ0Jyk7CiAgICBjb250cm9sQnV0dG9uRGl2Lmluc2VydEJlZm9yZShzZWNvbmRhcnlCdXR0b24sIHByaW1hcnlCdXR0b24pOwogIH0gZWxzZSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1yaWdodCcpOwogICAgY29udHJvbEJ1dHRvbkRpdi5pbnNlcnRCZWZvcmUocHJpbWFyeUJ1dHRvbiwgc2Vjb25kYXJ5QnV0dG9uKTsKICB9CgogIC8vIENoZWNrIGZvciBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICBpZiAobG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdjYWNoZUJ1dHRvbicpKSB7CiAgICBzZXRVcENhY2hlZEJ1dHRvbihsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2NhY2hlQnV0dG9uJykpOwogIH0KCiAgaWYgKHJlbG9hZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID09ICdub25lJyAmJgogICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICYmCiAgICAgIGRvd25sb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICBkZXRhaWxzQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Npbmd1bGFyJyk7CiAgfQoKICAvLyBTaG93IGNvbnRyb2wgYnV0dG9ucy4KICBpZiAocmVsb2FkQnV0dG9uVmlzaWJsZSB8fCBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSB8fAogICAgICBkb3dubG9hZEJ1dHRvblZpc2libGUpIHsKICAgIGNvbnRyb2xCdXR0b25EaXYuaGlkZGVuID0gZmFsc2U7CgogICAgLy8gU2V0IHRoZSBzZWNvbmRhcnkgYnV0dG9uIHN0YXRlIGluIHRoZSBjYXNlcyBvZiB0d28gY2FsbCB0byBhY3Rpb25zLgogICAgaWYgKChyZWxvYWRCdXR0b25WaXNpYmxlIHx8IGRvd25sb2FkQnV0dG9uVmlzaWJsZSkgJiYKICAgICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSkgewogICAgICBzZWNvbmRhcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2Vjb25kYXJ5LWJ1dHRvbicpOwogICAgfQogIH0KfQoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIG9uRG9jdW1lbnRMb2FkKTsK
ChildNodes : 1 : 22
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 18
NextElementSibling : 24
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 22
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 21
ParentElement : 21
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == 
TextContent : == 
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == Ly8gQ29weXJpZ2h0IDIwMTMgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCmZ1bmN0aW9uIHRvZ2dsZUhlbHBCb3goKSB7CiAgdmFyIGhlbHBCb3hPdXRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJyk7CiAgaGVscEJveE91dGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogIHZhciBkZXRhaWxzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGFpbHMtYnV0dG9uJyk7CiAgaWYgKGhlbHBCb3hPdXRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKQogICAgZGV0YWlsc0J1dHRvbi5pbm5lclRleHQgPSBkZXRhaWxzQnV0dG9uLmRldGFpbHNUZXh0OwogIGVsc2UKICAgIGRldGFpbHNCdXR0b24uaW5uZXJUZXh0ID0gZGV0YWlsc0J1dHRvbi5oaWRlRGV0YWlsc1RleHQ7CgogIC8vIERldGFpbHMgYXBwZWFycyBvdmVyIHRoZSBtYWluIGNvbnRlbnQgb24gc21hbGwgc2NyZWVucy4KICBpZiAobW9iaWxlTmF2KSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1jb250ZW50JykuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgICB2YXIgcnVubmVyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJ1bm5lci1jb250YWluZXInKTsKICAgIGlmIChydW5uZXJDb250YWluZXIpIHsKICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZGlhZ25vc2VFcnJvcnMoKSB7Ci8vIAogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKQogICAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRpYWdub3NlRXJyb3JzQnV0dG9uQ2xpY2soKTsKLy8gCi8vIAp9CgovLyBTdWJmcmFtZXMgdXNlIGEgZGlmZmVyZW50IGxheW91dCBidXQgdGhlIHNhbWUgaHRtbCBmaWxlLiAgVGhpcyBpcyB0byBtYWtlIGl0Ci8vIGVhc2llciB0byBzdXBwb3J0IHBsYXRmb3JtcyB0aGF0IGxvYWQgdGhlIGVycm9yIHBhZ2UgdmlhIGRpZmZlcmVudAovLyBtZWNoYW5pc21zIChDdXJyZW50bHkganVzdCBpT1MpLgppZiAod2luZG93LnRvcC5sb2NhdGlvbiAhPSB3aW5kb3cubG9jYXRpb24pCiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3ViZnJhbWUnLCAnJyk7CgovLyBSZS1yZW5kZXJzIHRoZSBlcnJvciBwYWdlIHVzaW5nIHxzdHJpbmdzfCBhcyB0aGUgZGljdGlvbmFyeSBvZiB2YWx1ZXMuCi8vIFVzZWQgYnkgTmV0RXJyb3JUYWJIZWxwZXIgdG8gdXBkYXRlIEROUyBlcnJvciBwYWdlcyB3aXRoIHByb2JlIHJlc3VsdHMuCmZ1bmN0aW9uIHVwZGF0ZUZvckRuc1Byb2JlKHN0cmluZ3MpIHsKICB2YXIgY29udGV4dCA9IG5ldyBKc0V2YWxDb250ZXh0KHN0cmluZ3MpOwogIGpzdFByb2Nlc3MoY29udGV4dCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3QnKSk7Cn0KCi8vIEdpdmVuIHRoZSBjbGFzc0xpc3QgcHJvcGVydHkgb2YgYW4gZWxlbWVudCwgYWRkcyBhbiBpY29uIGNsYXNzIHRvIHRoZSBsaXN0Ci8vIGFuZCByZW1vdmVzIHRoZSBwcmV2aW91c2x5LQpmdW5jdGlvbiB1cGRhdGVJY29uQ2xhc3MoY2xhc3NMaXN0LCBuZXdDbGFzcykgewogIHZhciBvbGRDbGFzczsKCiAgaWYgKGNsYXNzTGlzdC5oYXNPd25Qcm9wZXJ0eSgnbGFzdF9pY29uX2NsYXNzJykpIHsKICAgIG9sZENsYXNzID0gY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXTsKICAgIGlmIChvbGRDbGFzcyA9PSBuZXdDbGFzcykKICAgICAgcmV0dXJuOwogIH0KCiAgY2xhc3NMaXN0LmFkZChuZXdDbGFzcyk7CiAgaWYgKG9sZENsYXNzICE9PSB1bmRlZmluZWQpCiAgICBjbGFzc0xpc3QucmVtb3ZlKG9sZENsYXNzKTsKCiAgY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXSA9IG5ld0NsYXNzOwoKICBpZiAobmV3Q2xhc3MgPT0gJ2ljb24tb2ZmbGluZScpIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnb2ZmbGluZScpOwogICAgbmV3IFJ1bm5lcignLmludGVyc3RpdGlhbC13cmFwcGVyJyk7CiAgfSBlbHNlIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbmV0ZXJyb3InKTsKICB9Cn0KCi8vIERvZXMgYSBzZWFyY2ggdXNpbmcgfGJhc2VTZWFyY2hVcmx8IGFuZCB0aGUgdGV4dCBpbiB0aGUgc2VhcmNoIGJveC4KZnVuY3Rpb24gc2VhcmNoKGJhc2VTZWFyY2hVcmwpIHsKICB2YXIgc2VhcmNoVGV4dE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWJveCcpOwogIGRvY3VtZW50LmxvY2F0aW9uID0gYmFzZVNlYXJjaFVybCArIHNlYXJjaFRleHROb2RlLnZhbHVlOwogIHJldHVybiBmYWxzZTsKfQoKLy8gVXNlIHRvIHRyYWNrIGNsaWNrcyBvbiBlbGVtZW50cyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbgovLyBzZXJ2aWNlLiAgSWYgfHRyYWNraW5nSWR8IGlzIG5lZ2F0aXZlLCB0aGUgZWxlbWVudCBkb2VzIG5vdCBjb21lIGZyb20gdGhlCi8vIGNvcnJlY3Rpb24gc2VydmljZS4KZnVuY3Rpb24gdHJhY2tDbGljayh0cmFja2luZ0lkKSB7CiAgLy8gVGhpcyBjYW4ndCBiZSBkb25lIHdpdGggWEhScyBiZWNhdXNlIFhIUnMgYXJlIGNhbmNlbGxlZCBvbiBuYXZpZ2F0aW9uCiAgLy8gc3RhcnQsIGFuZCBiZWNhdXNlIHRoZXNlIGFyZSBjcm9zcy1zaXRlIHJlcXVlc3RzLgogIGlmICh0cmFja2luZ0lkID49IDAgJiYgZXJyb3JQYWdlQ29udHJvbGxlcikKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDbGljayh0cmFja2luZ0lkKTsKfQoKLy8gQ2FsbGVkIHdoZW4gYW4gPGE+IHRhZyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbiBzZXJ2aWNlIGlzCi8vIGNsaWNrZWQuICBTZXBhcmF0ZSBmdW5jdGlvbiBmcm9tIHRyYWNrQ2xpY2sgc28gdGhlIHJlc291cmNlcyBkb24ndCBoYXZlIHRvCi8vIGJlIHVwZGF0ZWQgaWYgbmV3IGRhdGEgaXMgYWRkZWQgdG8ganN0ZGF0YS4KZnVuY3Rpb24gbGlua0NsaWNrZWQoanN0ZGF0YSkgewogIHRyYWNrQ2xpY2soanN0ZGF0YS50cmFja2luZ0lkKTsKfQoKLy8gSW1wbGVtZW50cyBidXR0b24gY2xpY2tzLiAgVGhpcyBmdW5jdGlvbiBpcyBuZWVkZWQgZHVyaW5nIHRoZSB0cmFuc2l0aW9uCi8vIGJldHdlZW4gaW1wbGVtZW50aW5nIHRoZXNlIGluIHRydW5rIGNocm9taXVtIGFuZCBpbXBsZW1lbnRpbmcgdGhlbSBpbgovLyBpT1MuCmZ1bmN0aW9uIHJlbG9hZEJ1dHRvbkNsaWNrKHVybCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5yZWxvYWRCdXR0b25DbGljaygpOwogIH0gZWxzZSB7CiAgICBsb2NhdGlvbiA9IHVybDsKICB9Cn0KCmZ1bmN0aW9uIHNob3dTYXZlZENvcHlCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpIHsKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuc2hvd1NhdmVkQ29weUJ1dHRvbkNsaWNrKCk7CiAgfQp9CgpmdW5jdGlvbiBkb3dubG9hZEJ1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5kb3dubG9hZEJ1dHRvbkNsaWNrKCk7CiAgICB2YXIgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtYnV0dG9uJyk7CiAgICBkb3dubG9hZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7CiAgICBkb3dubG9hZEJ1dHRvbi50ZXh0Q29udGVudCA9IGRvd25sb2FkQnV0dG9uLmRpc2FibGVkVGV4dDsKICB9Cn0KCmZ1bmN0aW9uIGRldGFpbHNCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpCiAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRldGFpbHNCdXR0b25DbGljaygpOwp9CgovKioKICogUmVwbGFjZSB0aGUgcmVsb2FkIGJ1dHRvbiB3aXRoIHRoZSBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICovCmZ1bmN0aW9uIHNldFVwQ2FjaGVkQnV0dG9uKGJ1dHRvblN0cmluZ3MpIHsKICB2YXIgcmVsb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbG9hZC1idXR0b24nKTsKCiAgcmVsb2FkQnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uU3RyaW5ncy5tc2c7CiAgdmFyIHVybCA9IGJ1dHRvblN0cmluZ3MuY2FjaGVVcmw7CiAgdmFyIHRyYWNraW5nSWQgPSBidXR0b25TdHJpbmdzLnRyYWNraW5nSWQ7CiAgcmVsb2FkQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB0cmFja0NsaWNrKHRyYWNraW5nSWQpOwogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDYWNoZWRDb3B5QnV0dG9uQ2xpY2soKTsKICAgIH0KICAgIGxvY2F0aW9uID0gdXJsOwogIH07CiAgcmVsb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsKICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJykuaGlkZGVuID0gZmFsc2U7Cn0KCnZhciBwcmltYXJ5Q29udHJvbE9uTGVmdCA9IHRydWU7Ci8vIAoKZnVuY3Rpb24gb25Eb2N1bWVudExvYWQoKSB7CiAgdmFyIGNvbnRyb2xCdXR0b25EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJyk7CiAgdmFyIHJlbG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWxvYWQtYnV0dG9uJyk7CiAgdmFyIGRldGFpbHNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscy1idXR0b24nKTsKICB2YXIgc2hvd1NhdmVkQ29weUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG93LXNhdmVkLWNvcHktYnV0dG9uJyk7CiAgdmFyIGRvd25sb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkLWJ1dHRvbicpOwoKICB2YXIgcmVsb2FkQnV0dG9uVmlzaWJsZSA9IGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygncmVsb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdyZWxvYWRCdXR0b24nKS5tc2c7CiAgdmFyIHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlID0KICAgICAgbG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykubXNnOwogIHZhciBkb3dubG9hZEJ1dHRvblZpc2libGUgPQogICAgICBsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ2Rvd25sb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdkb3dubG9hZEJ1dHRvbicpLm1zZzsKCiAgdmFyIHByaW1hcnlCdXR0b24sIHNlY29uZGFyeUJ1dHRvbjsKICBpZiAoc2hvd1NhdmVkQ29weUJ1dHRvbi5wcmltYXJ5KSB7CiAgICBwcmltYXJ5QnV0dG9uID0gc2hvd1NhdmVkQ29weUJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICB9IGVsc2UgewogICAgcHJpbWFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHNob3dTYXZlZENvcHlCdXR0b247CiAgfQoKICAvLyBTZXRzIHVwIHRoZSBwcm9wZXIgYnV0dG9uIGxheW91dCBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0uCiAgaWYgKHByaW1hcnlDb250cm9sT25MZWZ0KSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1sZWZ0Jyk7CiAgICBjb250cm9sQnV0dG9uRGl2Lmluc2VydEJlZm9yZShzZWNvbmRhcnlCdXR0b24sIHByaW1hcnlCdXR0b24pOwogIH0gZWxzZSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1yaWdodCcpOwogICAgY29udHJvbEJ1dHRvbkRpdi5pbnNlcnRCZWZvcmUocHJpbWFyeUJ1dHRvbiwgc2Vjb25kYXJ5QnV0dG9uKTsKICB9CgogIC8vIENoZWNrIGZvciBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICBpZiAobG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdjYWNoZUJ1dHRvbicpKSB7CiAgICBzZXRVcENhY2hlZEJ1dHRvbihsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2NhY2hlQnV0dG9uJykpOwogIH0KCiAgaWYgKHJlbG9hZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID09ICdub25lJyAmJgogICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICYmCiAgICAgIGRvd25sb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICBkZXRhaWxzQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Npbmd1bGFyJyk7CiAgfQoKICAvLyBTaG93IGNvbnRyb2wgYnV0dG9ucy4KICBpZiAocmVsb2FkQnV0dG9uVmlzaWJsZSB8fCBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSB8fAogICAgICBkb3dubG9hZEJ1dHRvblZpc2libGUpIHsKICAgIGNvbnRyb2xCdXR0b25EaXYuaGlkZGVuID0gZmFsc2U7CgogICAgLy8gU2V0IHRoZSBzZWNvbmRhcnkgYnV0dG9uIHN0YXRlIGluIHRoZSBjYXNlcyBvZiB0d28gY2FsbCB0byBhY3Rpb25zLgogICAgaWYgKChyZWxvYWRCdXR0b25WaXNpYmxlIHx8IGRvd25sb2FkQnV0dG9uVmlzaWJsZSkgJiYKICAgICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSkgewogICAgICBzZWNvbmRhcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2Vjb25kYXJ5LWJ1dHRvbicpOwogICAgfQogIH0KfQoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIG9uRG9jdW1lbnRMb2FkKTsK
Length : 6831
WholeText : == Ly8gQ29weXJpZ2h0IDIwMTMgVGhlIENocm9taXVtIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmUKLy8gZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS4KCmZ1bmN0aW9uIHRvZ2dsZUhlbHBCb3goKSB7CiAgdmFyIGhlbHBCb3hPdXRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRhaWxzJyk7CiAgaGVscEJveE91dGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogIHZhciBkZXRhaWxzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGFpbHMtYnV0dG9uJyk7CiAgaWYgKGhlbHBCb3hPdXRlci5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKQogICAgZGV0YWlsc0J1dHRvbi5pbm5lclRleHQgPSBkZXRhaWxzQnV0dG9uLmRldGFpbHNUZXh0OwogIGVsc2UKICAgIGRldGFpbHNCdXR0b24uaW5uZXJUZXh0ID0gZGV0YWlsc0J1dHRvbi5oaWRlRGV0YWlsc1RleHQ7CgogIC8vIERldGFpbHMgYXBwZWFycyBvdmVyIHRoZSBtYWluIGNvbnRlbnQgb24gc21hbGwgc2NyZWVucy4KICBpZiAobW9iaWxlTmF2KSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1jb250ZW50JykuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7CiAgICB2YXIgcnVubmVyQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJ1bm5lci1jb250YWluZXInKTsKICAgIGlmIChydW5uZXJDb250YWluZXIpIHsKICAgICAgcnVubmVyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZGlhZ25vc2VFcnJvcnMoKSB7Ci8vIAogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKQogICAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRpYWdub3NlRXJyb3JzQnV0dG9uQ2xpY2soKTsKLy8gCi8vIAp9CgovLyBTdWJmcmFtZXMgdXNlIGEgZGlmZmVyZW50IGxheW91dCBidXQgdGhlIHNhbWUgaHRtbCBmaWxlLiAgVGhpcyBpcyB0byBtYWtlIGl0Ci8vIGVhc2llciB0byBzdXBwb3J0IHBsYXRmb3JtcyB0aGF0IGxvYWQgdGhlIGVycm9yIHBhZ2UgdmlhIGRpZmZlcmVudAovLyBtZWNoYW5pc21zIChDdXJyZW50bHkganVzdCBpT1MpLgppZiAod2luZG93LnRvcC5sb2NhdGlvbiAhPSB3aW5kb3cubG9jYXRpb24pCiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3ViZnJhbWUnLCAnJyk7CgovLyBSZS1yZW5kZXJzIHRoZSBlcnJvciBwYWdlIHVzaW5nIHxzdHJpbmdzfCBhcyB0aGUgZGljdGlvbmFyeSBvZiB2YWx1ZXMuCi8vIFVzZWQgYnkgTmV0RXJyb3JUYWJIZWxwZXIgdG8gdXBkYXRlIEROUyBlcnJvciBwYWdlcyB3aXRoIHByb2JlIHJlc3VsdHMuCmZ1bmN0aW9uIHVwZGF0ZUZvckRuc1Byb2JlKHN0cmluZ3MpIHsKICB2YXIgY29udGV4dCA9IG5ldyBKc0V2YWxDb250ZXh0KHN0cmluZ3MpOwogIGpzdFByb2Nlc3MoY29udGV4dCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3QnKSk7Cn0KCi8vIEdpdmVuIHRoZSBjbGFzc0xpc3QgcHJvcGVydHkgb2YgYW4gZWxlbWVudCwgYWRkcyBhbiBpY29uIGNsYXNzIHRvIHRoZSBsaXN0Ci8vIGFuZCByZW1vdmVzIHRoZSBwcmV2aW91c2x5LQpmdW5jdGlvbiB1cGRhdGVJY29uQ2xhc3MoY2xhc3NMaXN0LCBuZXdDbGFzcykgewogIHZhciBvbGRDbGFzczsKCiAgaWYgKGNsYXNzTGlzdC5oYXNPd25Qcm9wZXJ0eSgnbGFzdF9pY29uX2NsYXNzJykpIHsKICAgIG9sZENsYXNzID0gY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXTsKICAgIGlmIChvbGRDbGFzcyA9PSBuZXdDbGFzcykKICAgICAgcmV0dXJuOwogIH0KCiAgY2xhc3NMaXN0LmFkZChuZXdDbGFzcyk7CiAgaWYgKG9sZENsYXNzICE9PSB1bmRlZmluZWQpCiAgICBjbGFzc0xpc3QucmVtb3ZlKG9sZENsYXNzKTsKCiAgY2xhc3NMaXN0WydsYXN0X2ljb25fY2xhc3MnXSA9IG5ld0NsYXNzOwoKICBpZiAobmV3Q2xhc3MgPT0gJ2ljb24tb2ZmbGluZScpIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnb2ZmbGluZScpOwogICAgbmV3IFJ1bm5lcignLmludGVyc3RpdGlhbC13cmFwcGVyJyk7CiAgfSBlbHNlIHsKICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbmV0ZXJyb3InKTsKICB9Cn0KCi8vIERvZXMgYSBzZWFyY2ggdXNpbmcgfGJhc2VTZWFyY2hVcmx8IGFuZCB0aGUgdGV4dCBpbiB0aGUgc2VhcmNoIGJveC4KZnVuY3Rpb24gc2VhcmNoKGJhc2VTZWFyY2hVcmwpIHsKICB2YXIgc2VhcmNoVGV4dE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWJveCcpOwogIGRvY3VtZW50LmxvY2F0aW9uID0gYmFzZVNlYXJjaFVybCArIHNlYXJjaFRleHROb2RlLnZhbHVlOwogIHJldHVybiBmYWxzZTsKfQoKLy8gVXNlIHRvIHRyYWNrIGNsaWNrcyBvbiBlbGVtZW50cyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbgovLyBzZXJ2aWNlLiAgSWYgfHRyYWNraW5nSWR8IGlzIG5lZ2F0aXZlLCB0aGUgZWxlbWVudCBkb2VzIG5vdCBjb21lIGZyb20gdGhlCi8vIGNvcnJlY3Rpb24gc2VydmljZS4KZnVuY3Rpb24gdHJhY2tDbGljayh0cmFja2luZ0lkKSB7CiAgLy8gVGhpcyBjYW4ndCBiZSBkb25lIHdpdGggWEhScyBiZWNhdXNlIFhIUnMgYXJlIGNhbmNlbGxlZCBvbiBuYXZpZ2F0aW9uCiAgLy8gc3RhcnQsIGFuZCBiZWNhdXNlIHRoZXNlIGFyZSBjcm9zcy1zaXRlIHJlcXVlc3RzLgogIGlmICh0cmFja2luZ0lkID49IDAgJiYgZXJyb3JQYWdlQ29udHJvbGxlcikKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDbGljayh0cmFja2luZ0lkKTsKfQoKLy8gQ2FsbGVkIHdoZW4gYW4gPGE+IHRhZyBnZW5lcmF0ZWQgYnkgdGhlIG5hdmlnYXRpb24gY29ycmVjdGlvbiBzZXJ2aWNlIGlzCi8vIGNsaWNrZWQuICBTZXBhcmF0ZSBmdW5jdGlvbiBmcm9tIHRyYWNrQ2xpY2sgc28gdGhlIHJlc291cmNlcyBkb24ndCBoYXZlIHRvCi8vIGJlIHVwZGF0ZWQgaWYgbmV3IGRhdGEgaXMgYWRkZWQgdG8ganN0ZGF0YS4KZnVuY3Rpb24gbGlua0NsaWNrZWQoanN0ZGF0YSkgewogIHRyYWNrQ2xpY2soanN0ZGF0YS50cmFja2luZ0lkKTsKfQoKLy8gSW1wbGVtZW50cyBidXR0b24gY2xpY2tzLiAgVGhpcyBmdW5jdGlvbiBpcyBuZWVkZWQgZHVyaW5nIHRoZSB0cmFuc2l0aW9uCi8vIGJldHdlZW4gaW1wbGVtZW50aW5nIHRoZXNlIGluIHRydW5rIGNocm9taXVtIGFuZCBpbXBsZW1lbnRpbmcgdGhlbSBpbgovLyBpT1MuCmZ1bmN0aW9uIHJlbG9hZEJ1dHRvbkNsaWNrKHVybCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5yZWxvYWRCdXR0b25DbGljaygpOwogIH0gZWxzZSB7CiAgICBsb2NhdGlvbiA9IHVybDsKICB9Cn0KCmZ1bmN0aW9uIHNob3dTYXZlZENvcHlCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpIHsKICAgIGVycm9yUGFnZUNvbnRyb2xsZXIuc2hvd1NhdmVkQ29weUJ1dHRvbkNsaWNrKCk7CiAgfQp9CgpmdW5jdGlvbiBkb3dubG9hZEJ1dHRvbkNsaWNrKCkgewogIGlmICh3aW5kb3cuZXJyb3JQYWdlQ29udHJvbGxlcikgewogICAgZXJyb3JQYWdlQ29udHJvbGxlci5kb3dubG9hZEJ1dHRvbkNsaWNrKCk7CiAgICB2YXIgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQtYnV0dG9uJyk7CiAgICBkb3dubG9hZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7CiAgICBkb3dubG9hZEJ1dHRvbi50ZXh0Q29udGVudCA9IGRvd25sb2FkQnV0dG9uLmRpc2FibGVkVGV4dDsKICB9Cn0KCmZ1bmN0aW9uIGRldGFpbHNCdXR0b25DbGljaygpIHsKICBpZiAod2luZG93LmVycm9yUGFnZUNvbnRyb2xsZXIpCiAgICBlcnJvclBhZ2VDb250cm9sbGVyLmRldGFpbHNCdXR0b25DbGljaygpOwp9CgovKioKICogUmVwbGFjZSB0aGUgcmVsb2FkIGJ1dHRvbiB3aXRoIHRoZSBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICovCmZ1bmN0aW9uIHNldFVwQ2FjaGVkQnV0dG9uKGJ1dHRvblN0cmluZ3MpIHsKICB2YXIgcmVsb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlbG9hZC1idXR0b24nKTsKCiAgcmVsb2FkQnV0dG9uLnRleHRDb250ZW50ID0gYnV0dG9uU3RyaW5ncy5tc2c7CiAgdmFyIHVybCA9IGJ1dHRvblN0cmluZ3MuY2FjaGVVcmw7CiAgdmFyIHRyYWNraW5nSWQgPSBidXR0b25TdHJpbmdzLnRyYWNraW5nSWQ7CiAgcmVsb2FkQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7CiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB0cmFja0NsaWNrKHRyYWNraW5nSWQpOwogICAgaWYgKHdpbmRvdy5lcnJvclBhZ2VDb250cm9sbGVyKSB7CiAgICAgIGVycm9yUGFnZUNvbnRyb2xsZXIudHJhY2tDYWNoZWRDb3B5QnV0dG9uQ2xpY2soKTsKICAgIH0KICAgIGxvY2F0aW9uID0gdXJsOwogIH07CiAgcmVsb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnJzsKICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJykuaGlkZGVuID0gZmFsc2U7Cn0KCnZhciBwcmltYXJ5Q29udHJvbE9uTGVmdCA9IHRydWU7Ci8vIAoKZnVuY3Rpb24gb25Eb2N1bWVudExvYWQoKSB7CiAgdmFyIGNvbnRyb2xCdXR0b25EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udHJvbC1idXR0b25zJyk7CiAgdmFyIHJlbG9hZEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWxvYWQtYnV0dG9uJyk7CiAgdmFyIGRldGFpbHNCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGV0YWlscy1idXR0b24nKTsKICB2YXIgc2hvd1NhdmVkQ29weUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG93LXNhdmVkLWNvcHktYnV0dG9uJyk7CiAgdmFyIGRvd25sb2FkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkLWJ1dHRvbicpOwoKICB2YXIgcmVsb2FkQnV0dG9uVmlzaWJsZSA9IGxvYWRUaW1lRGF0YS52YWx1ZUV4aXN0cygncmVsb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdyZWxvYWRCdXR0b24nKS5tc2c7CiAgdmFyIHNob3dTYXZlZENvcHlCdXR0b25WaXNpYmxlID0KICAgICAgbG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdzaG93U2F2ZWRDb3B5QnV0dG9uJykubXNnOwogIHZhciBkb3dubG9hZEJ1dHRvblZpc2libGUgPQogICAgICBsb2FkVGltZURhdGEudmFsdWVFeGlzdHMoJ2Rvd25sb2FkQnV0dG9uJykgJiYKICAgICAgbG9hZFRpbWVEYXRhLmdldFZhbHVlKCdkb3dubG9hZEJ1dHRvbicpLm1zZzsKCiAgdmFyIHByaW1hcnlCdXR0b24sIHNlY29uZGFyeUJ1dHRvbjsKICBpZiAoc2hvd1NhdmVkQ29weUJ1dHRvbi5wcmltYXJ5KSB7CiAgICBwcmltYXJ5QnV0dG9uID0gc2hvd1NhdmVkQ29weUJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICB9IGVsc2UgewogICAgcHJpbWFyeUJ1dHRvbiA9IHJlbG9hZEJ1dHRvbjsKICAgIHNlY29uZGFyeUJ1dHRvbiA9IHNob3dTYXZlZENvcHlCdXR0b247CiAgfQoKICAvLyBTZXRzIHVwIHRoZSBwcm9wZXIgYnV0dG9uIGxheW91dCBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0uCiAgaWYgKHByaW1hcnlDb250cm9sT25MZWZ0KSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1sZWZ0Jyk7CiAgICBjb250cm9sQnV0dG9uRGl2Lmluc2VydEJlZm9yZShzZWNvbmRhcnlCdXR0b24sIHByaW1hcnlCdXR0b24pOwogIH0gZWxzZSB7CiAgICBidXR0b25zLmNsYXNzTGlzdC5hZGQoJ3N1Z2dlc3RlZC1yaWdodCcpOwogICAgY29udHJvbEJ1dHRvbkRpdi5pbnNlcnRCZWZvcmUocHJpbWFyeUJ1dHRvbiwgc2Vjb25kYXJ5QnV0dG9uKTsKICB9CgogIC8vIENoZWNrIGZvciBHb29nbGUgY2FjaGVkIGNvcHkgc3VnZ2VzdGlvbi4KICBpZiAobG9hZFRpbWVEYXRhLnZhbHVlRXhpc3RzKCdjYWNoZUJ1dHRvbicpKSB7CiAgICBzZXRVcENhY2hlZEJ1dHRvbihsb2FkVGltZURhdGEuZ2V0VmFsdWUoJ2NhY2hlQnV0dG9uJykpOwogIH0KCiAgaWYgKHJlbG9hZEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID09ICdub25lJyAmJgogICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnICYmCiAgICAgIGRvd25sb2FkQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICBkZXRhaWxzQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Npbmd1bGFyJyk7CiAgfQoKICAvLyBTaG93IGNvbnRyb2wgYnV0dG9ucy4KICBpZiAocmVsb2FkQnV0dG9uVmlzaWJsZSB8fCBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSB8fAogICAgICBkb3dubG9hZEJ1dHRvblZpc2libGUpIHsKICAgIGNvbnRyb2xCdXR0b25EaXYuaGlkZGVuID0gZmFsc2U7CgogICAgLy8gU2V0IHRoZSBzZWNvbmRhcnkgYnV0dG9uIHN0YXRlIGluIHRoZSBjYXNlcyBvZiB0d28gY2FsbCB0byBhY3Rpb25zLgogICAgaWYgKChyZWxvYWRCdXR0b25WaXNpYmxlIHx8IGRvd25sb2FkQnV0dG9uVmlzaWJsZSkgJiYKICAgICAgICBzaG93U2F2ZWRDb3B5QnV0dG9uVmlzaWJsZSkgewogICAgICBzZWNvbmRhcnlCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2Vjb25kYXJ5LWJ1dHRvbicpOwogICAgfQogIH0KfQoKZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIG9uRG9jdW1lbnRMb2FkKTsK

NodeId : 23
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 21
NextSibling : 24
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 21
NextElementSibling : 24
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 24
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : 25
LastChild : 25
PreviousSibling : 23
NextSibling : 26
NodeValue : === null
TextContent : == 
ChildNodes : 1 : 25
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 21
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 0

NodeId : 25
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 24
ParentElement : 24
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == 
TextContent : == 
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == 
Length : 70407
WholeText : == 

NodeId : 26
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 3
ParentElement : 3
FirstChild : null 
LastChild : null 
PreviousSibling : 24
NextSibling : null 
NodeValue : == Cg==
TextContent : == Cg==
ChildNodes : 0 : 
PreviousElementSibling : 24
NextElementSibling : null 
Data : == Cg==
Length : 1
WholeText : == Cg==

NodeId : 27
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 2
ParentElement : 2
FirstChild : null 
LastChild : null 
PreviousSibling : 3
NextSibling : 28
NodeValue : == Cg==
TextContent : == Cg==
ChildNodes : 0 : 
PreviousElementSibling : 3
NextElementSibling : 28
Data : == Cg==
Length : 1
WholeText : == Cg==

NodeId : 28
NodeType : 1
NodeName : BODY
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 2
ParentElement : 2
FirstChild : 29
LastChild : 184
PreviousSibling : 27
NextSibling : null 
NodeValue : === null
TextContent : == 
ChildNodes : 12 : 29, 30, 151, 152, 166, 167, 175, 176, 178, 180, 182, 184
ChildElementCount : 8
FirstElementChild : 30
LastElementChild : 184
Children : 8 : 30, 152, 167, 176, 178, 180, 182, 184
PreviousElementSibling : 3
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : body
TagName : BODY
Id : t
ClassName : neterror
ClassList : 1 : == bmV0ZXJyb3I=
Attributes : 5

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : t

NamespaceURI : === null
Prefix : === null
LocalName : i18n-values
Name : i18n-values
Value : == LnN0eWxlLmZvbnRGYW1pbHk6Zm9udGZhbWlseTsuc3R5bGUuZm9udFNpemU6Zm9udHNpemU=

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : neterror

NamespaceURI : === null
Prefix : === null
LocalName : style
Name : style
Value : font-family: "Segoe UI", Tahoma, sans-serif; font-size: 75%;

NodeId : 29
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 30
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 30
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 30
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 31
LastChild : 150
PreviousSibling : 29
NextSibling : 151
NodeValue : === null
TextContent : == CiAgICAKICAgICAgCiAgICAgIAogICAgICAgIFRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQKICAgICAgICBtb2JpbGUudHdpdHRlci5jb23igJlzIHNlcnZlciBETlMgYWRkcmVzcyBjb3VsZCBub3QgYmUgZm91bmQuCiAgICAgICAgCiAgICAgICAgICBUcnk6CiAgICAgICAgICAKICAgICAgICAgICAgQ2hlY2tpbmcgdGhlIGNvbm5lY3Rpb25DaGVja2luZyB0aGUgcHJveHksIGZpcmV3YWxsLCBhbmQgRE5TIGNvbmZpZ3VyYXRpb24KICAgICAgICAgIAogICAgICAgIAogICAgICAgIEVSUl9OQU1FX05PVF9SRVNPTFZFRAogICAgICAgIAogICAgICAKICAgIAogICAgCiAgICAgIAogICAgICAgIAogICAgICAgIFJlbG9hZAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAKICAgICAgRGV0YWlscwogICAgCiAgICAKICAgICAgCiAgICAgICAgQ2hlY2sgeW91ciBJbnRlcm5ldCBjb25uZWN0aW9uCiAgICAgICAgQ2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4KICAgICAgCiAgICAgICAgQ2hlY2sgeW91ciBETlMgc2V0dGluZ3MKICAgICAgICBDb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIGlmIHlvdSdyZSBub3Qgc3VyZSB3aGF0IHRoaXMgbWVhbnMuCiAgICAgIAogICAgICAgIFRyeSBkaXNhYmxpbmcgbmV0d29yayBwcmVkaWN0aW9uCiAgICAgICAgR28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICBTZXR0aW5ncwogICAgICAgICAgPgogICAgICAgICAgU2hvdyBhZHZhbmNlZCBzZXR0aW5nc+KApgogICAgICAgICAgYW5kIGRlc2VsZWN0ICJVc2UgYSBwcmVkaWN0aW9uIHNlcnZpY2UgdG8gbG9hZCBwYWdlcyBtb3JlIHF1aWNrbHkuIgogICAgICAgICAgSWYgdGhpcyBkb2VzIG5vdCByZXNvbHZlIHRoZSBpc3N1ZSwgd2UgcmVjb21tZW5kIHNlbGVjdGluZyB0aGlzIG9wdGlvbgogICAgICAgICAgYWdhaW4gZm9yIGltcHJvdmVkIHBlcmZvcm1hbmNlLgogICAgICAKICAgICAgICBBbGxvdyBDaHJvbWUgdG8gYWNjZXNzIHRoZSBuZXR3b3JrIGluIHlvdXIgZmlyZXdhbGwgb3IgYW50aXZpcnVzCiAgICAgICAgICBzZXR0aW5ncy4KICAgICAgICBJZiBpdCBpcyBhbHJlYWR5IGxpc3RlZCBhcyBhIHByb2dyYW0gYWxsb3dlZCB0byBhY2Nlc3MgdGhlIG5ldHdvcmssIHRyeQogICAgICByZW1vdmluZyBpdCBmcm9tIHRoZSBsaXN0IGFuZCBhZGRpbmcgaXQgYWdhaW4uCiAgICAgIAogICAgICAgIElmIHlvdSB1c2UgYSBwcm94eSBzZXJ2ZXLigKYKICAgICAgICBDaGVjayB5b3VyIHByb3h5IHNldHRpbmdzIG9yIGNvbnRhY3QgeW91ciBuZXR3b3JrIGFkbWluaXN0cmF0b3IgdG8KICAgICAgbWFrZSBzdXJlIHRoZSBwcm94eSBzZXJ2ZXIgaXMgd29ya2luZy4gSWYgeW91IGRvbid0IGJlbGlldmUgeW91IHNob3VsZAogICAgICBiZSB1c2luZyBhIHByb3h5IHNlcnZlcjoKICAgICAgR28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICBTZXR0aW5ncwogICAgICAgICAgPgogICAgICAgICAgU2hvdyBhZHZhbmNlZCBzZXR0aW5nc+KApgogICAgICAgICAgPgogICAgICAgICAgQ2hhbmdlIHByb3h5IHNldHRpbmdz4oCmCiAgICAgICAgICA+CiAgICAgICAgICBMQU4gU2V0dGluZ3MKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJveHkgc2VydmVyIGZvciB5b3VyIExBTiIuCiAgICAgIAogICAgCiAg
ChildNodes : 7 : 31, 32, 70, 71, 88, 89, 150
ChildElementCount : 3
FirstElementChild : 32
LastElementChild : 89
Children : 3 : 32, 71, 89
PreviousElementSibling : null 
NextElementSibling : 152
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : main-frame-error
ClassName : interstitial-wrapper
ClassList : 1 : == aW50ZXJzdGl0aWFsLXdyYXBwZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : main-frame-error

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : interstitial-wrapper

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 31
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 32
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 32
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 32
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : 33
LastChild : 69
PreviousSibling : 31
NextSibling : 70
NodeValue : === null
TextContent : == CiAgICAgIAogICAgICAKICAgICAgICBUaGlzIHNpdGUgY2Fu4oCZdCBiZSByZWFjaGVkCiAgICAgICAgbW9iaWxlLnR3aXR0ZXIuY29t4oCZcyBzZXJ2ZXIgRE5TIGFkZHJlc3MgY291bGQgbm90IGJlIGZvdW5kLgogICAgICAgIAogICAgICAgICAgVHJ5OgogICAgICAgICAgCiAgICAgICAgICAgIENoZWNraW5nIHRoZSBjb25uZWN0aW9uQ2hlY2tpbmcgdGhlIHByb3h5LCBmaXJld2FsbCwgYW5kIEROUyBjb25maWd1cmF0aW9uCiAgICAgICAgICAKICAgICAgICAKICAgICAgICBFUlJfTkFNRV9OT1RfUkVTT0xWRUQKICAgICAgICAKICAgICAgCiAgICA=
ChildNodes : 5 : 33, 34, 35, 36, 69
ChildElementCount : 2
FirstElementChild : 34
LastElementChild : 36
Children : 2 : 34, 36
PreviousElementSibling : null 
NextElementSibling : 71
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : main-content
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : main-content

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 33
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 32
ParentElement : 32
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 34
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 34
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 34
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 32
ParentElement : 32
FirstChild : null 
LastChild : null 
PreviousSibling : 33
NextSibling : 35
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 36
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : icon icon-generic
ClassList : 2 : == aWNvbg==, == aWNvbi1nZW5lcmlj
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : icon icon-generic

NamespaceURI : === null
Prefix : === null
LocalName : jseval
Name : jseval
Value : updateIconClass(this.classList, iconClass)

NamespaceURI : === null
Prefix : === null
LocalName : alt
Name : alt
Value : === empty

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 1

NodeId : 35
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 32
ParentElement : 32
FirstChild : null 
LastChild : null 
PreviousSibling : 34
NextSibling : 36
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 34
NextElementSibling : 36
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 36
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 32
ParentElement : 32
FirstChild : 37
LastChild : 68
PreviousSibling : 35
NextSibling : 69
NodeValue : === null
TextContent : == CiAgICAgICAgVGhpcyBzaXRlIGNhbuKAmXQgYmUgcmVhY2hlZAogICAgICAgIG1vYmlsZS50d2l0dGVyLmNvbeKAmXMgc2VydmVyIEROUyBhZGRyZXNzIGNvdWxkIG5vdCBiZSBmb3VuZC4KICAgICAgICAKICAgICAgICAgIFRyeToKICAgICAgICAgIAogICAgICAgICAgICBDaGVja2luZyB0aGUgY29ubmVjdGlvbkNoZWNraW5nIHRoZSBwcm94eSwgZmlyZXdhbGwsIGFuZCBETlMgY29uZmlndXJhdGlvbgogICAgICAgICAgCiAgICAgICAgCiAgICAgICAgRVJSX05BTUVfTk9UX1JFU09MVkVECiAgICAgICAgCiAgICAgIA==
ChildNodes : 11 : 37, 38, 40, 41, 48, 49, 63, 64, 66, 67, 68
ChildElementCount : 5
FirstElementChild : 38
LastElementChild : 67
Children : 5 : 38, 41, 49, 64, 67
PreviousElementSibling : 34
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : main-message
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : main-message

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 37
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 38
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 38
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 38
NodeType : 1
NodeName : H1
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : 39
LastChild : 39
PreviousSibling : 37
NextSibling : 40
NodeValue : === null
TextContent : This site can’t be reached
ChildNodes : 1 : 39
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 41
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : h1
TagName : H1
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : heading

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:msg

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 5

NodeId : 39
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 38
ParentElement : 38
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : This site can’t be reached
TextContent : This site can’t be reached
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : This site can’t be reached
Length : 26
WholeText : This site can’t be reached

NodeId : 40
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 38
NextSibling : 41
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 38
NextElementSibling : 41
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 41
NodeType : 1
NodeName : P
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : 42
LastChild : 47
PreviousSibling : 40
NextSibling : 48
NodeValue : === null
TextContent : mobile.twitter.com’s server DNS address could not be found.
ChildNodes : 4 : 42, 44, 45, 47
ChildElementCount : 2
FirstElementChild : 42
LastElementChild : 45
Children : 2 : 42, 45
PreviousElementSibling : 38
NextElementSibling : 49
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : p
TagName : P
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : summary

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:msg

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 2

NodeId : 42
NodeType : 1
NodeName : STRONG
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 41
ParentElement : 41
FirstChild : 43
LastChild : 43
PreviousSibling : null 
NextSibling : 44
NodeValue : === null
TextContent : mobile.twitter.com
ChildNodes : 1 : 43
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 45
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : strong
TagName : STRONG
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : hostName

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 16

NodeId : 43
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 42
ParentElement : 42
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : mobile.twitter.com
TextContent : mobile.twitter.com
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : mobile.twitter.com
Length : 18
WholeText : mobile.twitter.com

NodeId : 44
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 41
ParentElement : 41
FirstChild : null 
LastChild : null 
PreviousSibling : 42
NextSibling : 45
NodeValue : == 4oCZcyBzZXJ2ZXIg
TextContent : == 4oCZcyBzZXJ2ZXIg
ChildNodes : 0 : 
PreviousElementSibling : 42
NextElementSibling : 45
Data : == 4oCZcyBzZXJ2ZXIg
Length : 10
WholeText : == 4oCZcyBzZXJ2ZXIg

NodeId : 45
NodeType : 1
NodeName : ABBR
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 41
ParentElement : 41
FirstChild : 46
LastChild : 46
PreviousSibling : 44
NextSibling : 47
NodeValue : === null
TextContent : DNS address
ChildNodes : 1 : 46
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 42
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : abbr
TagName : ABBR
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : title:dnsDefinition

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 17

NamespaceURI : === null
Prefix : === null
LocalName : title
Name : title
Value : DNS is the network service that translates a website’s name to its Internet address.

NodeId : 46
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 45
ParentElement : 45
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : DNS address
TextContent : DNS address
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : DNS address
Length : 11
WholeText : DNS address

NodeId : 47
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 41
ParentElement : 41
FirstChild : null 
LastChild : null 
PreviousSibling : 45
NextSibling : null 
NodeValue : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
TextContent : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
ChildNodes : 0 : 
PreviousElementSibling : 45
NextElementSibling : null 
Data : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
Length : 20
WholeText : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=

NodeId : 48
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 41
NextSibling : 49
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 41
NextElementSibling : 49
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 49
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : 50
LastChild : 62
PreviousSibling : 48
NextSibling : 63
NodeValue : === null
TextContent : == CiAgICAgICAgICBUcnk6CiAgICAgICAgICAKICAgICAgICAgICAgQ2hlY2tpbmcgdGhlIGNvbm5lY3Rpb25DaGVja2luZyB0aGUgcHJveHksIGZpcmV3YWxsLCBhbmQgRE5TIGNvbmZpZ3VyYXRpb24KICAgICAgICAgIAogICAgICAgIA==
ChildNodes : 5 : 50, 51, 53, 54, 62
ChildElementCount : 2
FirstElementChild : 51
LastElementChild : 54
Children : 2 : 51, 54
PreviousElementSibling : 41
NextElementSibling : 64
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : suggestions-list
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : suggestions-list

NamespaceURI : === null
Prefix : === null
LocalName : jsdisplay
Name : jsdisplay
Value : (suggestionsSummaryList && suggestionsSummaryList.length)

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 6

NodeId : 50
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 49
ParentElement : 49
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 51
NodeValue : == CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 51
Data : == CiAgICAgICAgICA=
Length : 11
WholeText : == CiAgICAgICAgICA=

NodeId : 51
NodeType : 1
NodeName : P
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 49
ParentElement : 49
FirstChild : 52
LastChild : 52
PreviousSibling : 50
NextSibling : 53
NodeValue : === null
TextContent : Try:
ChildNodes : 1 : 52
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 54
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : p
TagName : P
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:suggestionsSummaryListHeader

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 13

NodeId : 52
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 51
ParentElement : 51
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Try:
TextContent : Try:
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Try:
Length : 4
WholeText : Try:

NodeId : 53
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 49
ParentElement : 49
FirstChild : null 
LastChild : null 
PreviousSibling : 51
NextSibling : 54
NodeValue : == CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 51
NextElementSibling : 54
Data : == CiAgICAgICAgICA=
Length : 11
WholeText : == CiAgICAgICAgICA=

NodeId : 54
NodeType : 1
NodeName : UL
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 49
ParentElement : 49
FirstChild : 55
LastChild : 61
PreviousSibling : 53
NextSibling : 62
NodeValue : === null
TextContent : == CiAgICAgICAgICAgIENoZWNraW5nIHRoZSBjb25uZWN0aW9uQ2hlY2tpbmcgdGhlIHByb3h5LCBmaXJld2FsbCwgYW5kIEROUyBjb25maWd1cmF0aW9uCiAgICAgICAgICA=
ChildNodes : 4 : 55, 56, 58, 61
ChildElementCount : 2
FirstElementChild : 56
LastElementChild : 58
Children : 2 : 56, 58
PreviousElementSibling : 51
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : ul
TagName : UL
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .className:suggestionsSummaryList.length == 1 ? 'single-suggestion' : ''

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 14

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : === empty

NodeId : 55
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 54
ParentElement : 54
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 56
NodeValue : == CiAgICAgICAgICAgIA==
TextContent : == CiAgICAgICAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 56
Data : == CiAgICAgICAgICAgIA==
Length : 13
WholeText : == CiAgICAgICAgICAgIA==

NodeId : 56
NodeType : 1
NodeName : LI
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 54
ParentElement : 54
FirstChild : 57
LastChild : 57
PreviousSibling : 55
NextSibling : 58
NodeValue : === null
TextContent : Checking the connection
ChildNodes : 1 : 57
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 58
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : li
TagName : LI
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsSummaryList

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:summary

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 15

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : 0

NodeId : 57
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 56
ParentElement : 56
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Checking the connection
TextContent : Checking the connection
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Checking the connection
Length : 23
WholeText : Checking the connection

NodeId : 58
NodeType : 1
NodeName : LI
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 54
ParentElement : 54
FirstChild : 59
LastChild : 59
PreviousSibling : 56
NextSibling : 61
NodeValue : === null
TextContent : Checking the proxy, firewall, and DNS configuration
ChildNodes : 1 : 59
ChildElementCount : 1
FirstElementChild : 59
LastElementChild : 59
Children : 1 : 59
PreviousElementSibling : 56
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : li
TagName : LI
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsSummaryList

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:summary

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 15

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : *1

NodeId : 59
NodeType : 1
NodeName : A
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 58
ParentElement : 58
FirstChild : 60
LastChild : 60
PreviousSibling : null 
NextSibling : null 
NodeValue : === null
TextContent : Checking the proxy, firewall, and DNS configuration
ChildNodes : 1 : 60
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : a
TagName : A
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : href
Name : href
Value : #buttons

NamespaceURI : === null
Prefix : === null
LocalName : onclick
Name : onclick
Value : toggleHelpBox()

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 60
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 59
ParentElement : 59
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Checking the proxy, firewall, and DNS configuration
TextContent : Checking the proxy, firewall, and DNS configuration
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Checking the proxy, firewall, and DNS configuration
Length : 51
WholeText : Checking the proxy, firewall, and DNS configuration

NodeId : 61
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 54
ParentElement : 54
FirstChild : null 
LastChild : null 
PreviousSibling : 58
NextSibling : null 
NodeValue : == CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 58
NextElementSibling : null 
Data : == CiAgICAgICAgICA=
Length : 11
WholeText : == CiAgICAgICAgICA=

NodeId : 62
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 49
ParentElement : 49
FirstChild : null 
LastChild : null 
PreviousSibling : 54
NextSibling : null 
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 54
NextElementSibling : null 
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 63
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 49
NextSibling : 64
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 49
NextElementSibling : 64
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 64
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : 65
LastChild : 65
PreviousSibling : 63
NextSibling : 66
NodeValue : === null
TextContent : ERR_NAME_NOT_RESOLVED
ChildNodes : 1 : 65
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 49
NextElementSibling : 67
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : error-code
ClassList : 1 : == ZXJyb3ItY29kZQ==
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : error-code

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : errorCode

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 7

NodeId : 65
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 64
ParentElement : 64
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : ERR_NAME_NOT_RESOLVED
TextContent : ERR_NAME_NOT_RESOLVED
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : ERR_NAME_NOT_RESOLVED
Length : 21
WholeText : ERR_NAME_NOT_RESOLVED

NodeId : 66
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 64
NextSibling : 67
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 64
NextElementSibling : 67
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 67
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 66
NextSibling : 68
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 64
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : diagnose-frame
ClassName : hidden
ClassList : 1 : == aGlkZGVu
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : diagnose-frame

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : hidden

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 68
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 36
ParentElement : 36
FirstChild : null 
LastChild : null 
PreviousSibling : 67
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 67
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 69
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 32
ParentElement : 32
FirstChild : null 
LastChild : null 
PreviousSibling : 36
NextSibling : null 
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 36
NextElementSibling : null 
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 70
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : null 
LastChild : null 
PreviousSibling : 32
NextSibling : 71
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 32
NextElementSibling : 71
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 71
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : 72
LastChild : 87
PreviousSibling : 70
NextSibling : 88
NodeValue : === null
TextContent : == CiAgICAgIAogICAgICAgIAogICAgICAgIFJlbG9hZAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAKICAgICAgRGV0YWlscwogICAg
ChildNodes : 5 : 72, 73, 84, 85, 87
ChildElementCount : 2
FirstElementChild : 73
LastElementChild : 85
Children : 2 : 73, 85
PreviousElementSibling : 32
NextElementSibling : 89
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : buttons
ClassName : nav-wrapper suggested-left
ClassList : 2 : == bmF2LXdyYXBwZXI=, == c3VnZ2VzdGVkLWxlZnQ=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : buttons

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : nav-wrapper suggested-left

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 72
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 71
ParentElement : 71
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 73
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 73
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 73
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 71
ParentElement : 71
FirstChild : 74
LastChild : 83
PreviousSibling : 72
NextSibling : 84
NodeValue : === null
TextContent : == CiAgICAgICAgCiAgICAgICAgUmVsb2FkCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgIA==
ChildNodes : 7 : 74, 75, 77, 79, 80, 81, 83
ChildElementCount : 3
FirstElementChild : 75
LastElementChild : 81
Children : 3 : 75, 77, 81
PreviousElementSibling : null 
NextElementSibling : 85
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : control-buttons
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : control-buttons

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 74
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 75
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 75
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 75
NodeType : 1
NodeName : BUTTON
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : 76
LastChild : 76
PreviousSibling : 74
NextSibling : 77
NodeValue : === null
TextContent : == CiAgICAgICAg
ChildNodes : 1 : 76
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 77
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : button
TagName : BUTTON
Id : show-saved-copy-button
ClassName : blue-button text-button
ClassList : 2 : == Ymx1ZS1idXR0b24=, == dGV4dC1idXR0b24=
Attributes : 8

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : show-saved-copy-button

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : blue-button text-button

NamespaceURI : === null
Prefix : === null
LocalName : onclick
Name : onclick
Value : showSavedCopyButtonClick()

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : showSavedCopyButton

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : msg

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : title:title; .primary:primary

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 9

NamespaceURI : === null
Prefix : === null
LocalName : style
Name : style
Value : display: none;

NodeId : 76
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 75
ParentElement : 75
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 77
NodeType : 1
NodeName : BUTTON
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : 78
LastChild : 78
PreviousSibling : 75
NextSibling : 79
NodeValue : === null
TextContent : Reload
ChildNodes : 1 : 78
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 75
NextElementSibling : 81
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : button
TagName : BUTTON
Id : reload-button
ClassName : blue-button text-button
ClassList : 2 : == Ymx1ZS1idXR0b24=, == dGV4dC1idXR0b24=
Attributes : 7

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : reload-button

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : blue-button text-button

NamespaceURI : === null
Prefix : === null
LocalName : onclick
Name : onclick
Value : == dHJhY2tDbGljayh0aGlzLnRyYWNraW5nSWQpOwogICAgICAgICAgICAgICAgICAgICByZWxvYWRCdXR0b25DbGljayh0aGlzLnVybCk7

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : reloadButton

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .url:reloadUrl; .trackingId:reloadTrackingId

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : msg

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 8

NodeId : 78
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 77
ParentElement : 77
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Reload
TextContent : Reload
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Reload
Length : 6
WholeText : Reload

NodeId : 79
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : null 
LastChild : null 
PreviousSibling : 77
NextSibling : 80
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 77
NextElementSibling : 81
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAgCiAgICAgICAg

NodeId : 80
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : null 
LastChild : null 
PreviousSibling : 79
NextSibling : 81
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 77
NextElementSibling : 81
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAgCiAgICAgICAg

NodeId : 81
NodeType : 1
NodeName : BUTTON
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : 82
LastChild : 82
PreviousSibling : 80
NextSibling : 83
NodeValue : === null
TextContent : == CiAgICAgICAg
ChildNodes : 1 : 82
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 77
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : button
TagName : BUTTON
Id : download-button
ClassName : blue-button text-button
ClassList : 2 : == Ymx1ZS1idXR0b24=, == dGV4dC1idXR0b24=
Attributes : 8

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : download-button

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : blue-button text-button

NamespaceURI : === null
Prefix : === null
LocalName : onclick
Name : onclick
Value : downloadButtonClick()

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : downloadButton

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : msg

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .disabledText:disabledMsg

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 10

NamespaceURI : === null
Prefix : === null
LocalName : style
Name : style
Value : display: none;

NodeId : 82
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 81
ParentElement : 81
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 83
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 73
ParentElement : 73
FirstChild : null 
LastChild : null 
PreviousSibling : 81
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 81
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 84
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 71
ParentElement : 71
FirstChild : null 
LastChild : null 
PreviousSibling : 73
NextSibling : 85
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 73
NextElementSibling : 85
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 85
NodeType : 1
NodeName : BUTTON
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 71
ParentElement : 71
FirstChild : 86
LastChild : 86
PreviousSibling : 84
NextSibling : 87
NodeValue : === null
TextContent : Details
ChildNodes : 1 : 86
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 73
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : button
TagName : BUTTON
Id : details-button
ClassName : text-button small-link
ClassList : 2 : == dGV4dC1idXR0b24=, == c21hbGwtbGluaw==
Attributes : 7

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : details-button

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : text-button small-link

NamespaceURI : === null
Prefix : === null
LocalName : onclick
Name : onclick
Value : detailsButtonClick(); toggleHelpBox()

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : details

NamespaceURI : === null
Prefix : === null
LocalName : jsdisplay
Name : jsdisplay
Value : (suggestionsDetails && suggestionsDetails.length > 0) || diagnose

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .detailsText:details; .hideDetailsText:hideDetails;

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 3

NodeId : 86
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 85
ParentElement : 85
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Details
TextContent : Details
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Details
Length : 7
WholeText : Details

NodeId : 87
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 71
ParentElement : 71
FirstChild : null 
LastChild : null 
PreviousSibling : 85
NextSibling : null 
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 85
NextElementSibling : null 
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 88
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : null 
LastChild : null 
PreviousSibling : 71
NextSibling : 89
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 71
NextElementSibling : 89
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 89
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : 90
LastChild : 149
PreviousSibling : 88
NextSibling : 150
NodeValue : === null
TextContent : == CiAgICAgIAogICAgICAgIENoZWNrIHlvdXIgSW50ZXJuZXQgY29ubmVjdGlvbgogICAgICAgIENoZWNrIGFueSBjYWJsZXMgYW5kIHJlYm9vdCBhbnkgcm91dGVycywgbW9kZW1zLCBvciBvdGhlciBuZXR3b3JrCiAgICBkZXZpY2VzIHlvdSBtYXkgYmUgdXNpbmcuCiAgICAgIAogICAgICAgIENoZWNrIHlvdXIgRE5TIHNldHRpbmdzCiAgICAgICAgQ29udGFjdCB5b3VyIG5ldHdvcmsgYWRtaW5pc3RyYXRvciBpZiB5b3UncmUgbm90IHN1cmUgd2hhdCB0aGlzIG1lYW5zLgogICAgICAKICAgICAgICBUcnkgZGlzYWJsaW5nIG5ldHdvcmsgcHJlZGljdGlvbgogICAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAgU2V0dGluZ3MKICAgICAgICAgID4KICAgICAgICAgIFNob3cgYWR2YW5jZWQgc2V0dGluZ3PigKYKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJlZGljdGlvbiBzZXJ2aWNlIHRvIGxvYWQgcGFnZXMgbW9yZSBxdWlja2x5LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4KICAgICAgCiAgICAgICAgQWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3MuCiAgICAgICAgSWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLgogICAgICAKICAgICAgICBJZiB5b3UgdXNlIGEgcHJveHkgc2VydmVy4oCmCiAgICAgICAgQ2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAgU2V0dGluZ3MKICAgICAgICAgID4KICAgICAgICAgIFNob3cgYWR2YW5jZWQgc2V0dGluZ3PigKYKICAgICAgICAgID4KICAgICAgICAgIENoYW5nZSBwcm94eSBzZXR0aW5nc+KApgogICAgICAgICAgPgogICAgICAgICAgTEFOIFNldHRpbmdzCiAgICAgICAgICBhbmQgZGVzZWxlY3QgIlVzZSBhIHByb3h5IHNlcnZlciBmb3IgeW91ciBMQU4iLgogICAgICAKICAgIA==
ChildNodes : 7 : 90, 91, 99, 107, 124, 132, 149
ChildElementCount : 5
FirstElementChild : 91
LastElementChild : 132
Children : 5 : 91, 99, 107, 124, 132
PreviousElementSibling : 71
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : details
ClassName : hidden
ClassList : 1 : == aGlkZGVu
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : details

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : hidden

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 90
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 91
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 91
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 91
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : 92
LastChild : 98
PreviousSibling : 90
NextSibling : 99
NodeValue : === null
TextContent : == CiAgICAgICAgQ2hlY2sgeW91ciBJbnRlcm5ldCBjb25uZWN0aW9uCiAgICAgICAgQ2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4KICAgICAg
ChildNodes : 5 : 92, 93, 95, 96, 98
ChildElementCount : 2
FirstElementChild : 93
LastElementChild : 96
Children : 2 : 93, 96
PreviousElementSibling : null 
NextElementSibling : 99
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestions
ClassList : 1 : == c3VnZ2VzdGlvbnM=
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestions

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsDetails

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : 0

NodeId : 92
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 91
ParentElement : 91
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 93
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 93
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 93
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 91
ParentElement : 91
FirstChild : 94
LastChild : 94
PreviousSibling : 92
NextSibling : 95
NodeValue : === null
TextContent : Check your Internet connection
ChildNodes : 1 : 94
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 96
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-header
ClassList : 1 : == c3VnZ2VzdGlvbi1oZWFkZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-header

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:header

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 11

NodeId : 94
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 93
ParentElement : 93
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Check your Internet connection
TextContent : Check your Internet connection
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Check your Internet connection
Length : 30
WholeText : Check your Internet connection

NodeId : 95
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 91
ParentElement : 91
FirstChild : null 
LastChild : null 
PreviousSibling : 93
NextSibling : 96
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 93
NextElementSibling : 96
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 96
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 91
ParentElement : 91
FirstChild : 97
LastChild : 97
PreviousSibling : 95
NextSibling : 98
NodeValue : === null
TextContent : == Q2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4=
ChildNodes : 1 : 97
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 93
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-body
ClassList : 1 : == c3VnZ2VzdGlvbi1ib2R5
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-body

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:body

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 12

NodeId : 97
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 96
ParentElement : 96
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == Q2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4=
TextContent : == Q2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == Q2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4=
Length : 95
WholeText : == Q2hlY2sgYW55IGNhYmxlcyBhbmQgcmVib290IGFueSByb3V0ZXJzLCBtb2RlbXMsIG9yIG90aGVyIG5ldHdvcmsKICAgIGRldmljZXMgeW91IG1heSBiZSB1c2luZy4=

NodeId : 98
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 91
ParentElement : 91
FirstChild : null 
LastChild : null 
PreviousSibling : 96
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 96
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 99
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : 100
LastChild : 106
PreviousSibling : 91
NextSibling : 107
NodeValue : === null
TextContent : == CiAgICAgICAgQ2hlY2sgeW91ciBETlMgc2V0dGluZ3MKICAgICAgICBDb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIGlmIHlvdSdyZSBub3Qgc3VyZSB3aGF0IHRoaXMgbWVhbnMuCiAgICAgIA==
ChildNodes : 5 : 100, 101, 103, 104, 106
ChildElementCount : 2
FirstElementChild : 101
LastElementChild : 104
Children : 2 : 101, 104
PreviousElementSibling : 91
NextElementSibling : 107
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestions
ClassList : 1 : == c3VnZ2VzdGlvbnM=
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestions

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsDetails

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : 1

NodeId : 100
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 99
ParentElement : 99
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 101
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 101
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 101
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 99
ParentElement : 99
FirstChild : 102
LastChild : 102
PreviousSibling : 100
NextSibling : 103
NodeValue : === null
TextContent : Check your DNS settings
ChildNodes : 1 : 102
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 104
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-header
ClassList : 1 : == c3VnZ2VzdGlvbi1oZWFkZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-header

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:header

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 11

NodeId : 102
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 101
ParentElement : 101
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Check your DNS settings
TextContent : Check your DNS settings
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Check your DNS settings
Length : 23
WholeText : Check your DNS settings

NodeId : 103
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 99
ParentElement : 99
FirstChild : null 
LastChild : null 
PreviousSibling : 101
NextSibling : 104
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 101
NextElementSibling : 104
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 104
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 99
ParentElement : 99
FirstChild : 105
LastChild : 105
PreviousSibling : 103
NextSibling : 106
NodeValue : === null
TextContent : Contact your network administrator if you're not sure what this means.
ChildNodes : 1 : 105
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 101
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-body
ClassList : 1 : == c3VnZ2VzdGlvbi1ib2R5
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-body

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:body

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 12

NodeId : 105
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 104
ParentElement : 104
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Contact your network administrator if you're not sure what this means.
TextContent : Contact your network administrator if you're not sure what this means.
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Contact your network administrator if you're not sure what this means.
Length : 70
WholeText : Contact your network administrator if you're not sure what this means.

NodeId : 106
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 99
ParentElement : 99
FirstChild : null 
LastChild : null 
PreviousSibling : 104
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 104
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 107
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : 108
LastChild : 123
PreviousSibling : 99
NextSibling : 124
NodeValue : === null
TextContent : == CiAgICAgICAgVHJ5IGRpc2FibGluZyBuZXR3b3JrIHByZWRpY3Rpb24KICAgICAgICBHbyB0bwogICAgICAgICAgdGhlIENocm9tZSBtZW51ID4KICAgICAgICAgIFNldHRpbmdzCiAgICAgICAgICA+CiAgICAgICAgICBTaG93IGFkdmFuY2VkIHNldHRpbmdz4oCmCiAgICAgICAgICBhbmQgZGVzZWxlY3QgIlVzZSBhIHByZWRpY3Rpb24gc2VydmljZSB0byBsb2FkIHBhZ2VzIG1vcmUgcXVpY2tseS4iCiAgICAgICAgICBJZiB0aGlzIGRvZXMgbm90IHJlc29sdmUgdGhlIGlzc3VlLCB3ZSByZWNvbW1lbmQgc2VsZWN0aW5nIHRoaXMgb3B0aW9uCiAgICAgICAgICBhZ2FpbiBmb3IgaW1wcm92ZWQgcGVyZm9ybWFuY2UuCiAgICAgIA==
ChildNodes : 5 : 108, 109, 111, 112, 123
ChildElementCount : 2
FirstElementChild : 109
LastElementChild : 112
Children : 2 : 109, 112
PreviousElementSibling : 99
NextElementSibling : 124
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestions
ClassList : 1 : == c3VnZ2VzdGlvbnM=
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestions

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsDetails

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : 2

NodeId : 108
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 107
ParentElement : 107
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 109
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 109
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 109
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 107
ParentElement : 107
FirstChild : 110
LastChild : 110
PreviousSibling : 108
NextSibling : 111
NodeValue : === null
TextContent : Try disabling network prediction
ChildNodes : 1 : 110
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 112
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-header
ClassList : 1 : == c3VnZ2VzdGlvbi1oZWFkZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-header

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:header

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 11

NodeId : 110
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 109
ParentElement : 109
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Try disabling network prediction
TextContent : Try disabling network prediction
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Try disabling network prediction
Length : 32
WholeText : Try disabling network prediction

NodeId : 111
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 107
ParentElement : 107
FirstChild : null 
LastChild : null 
PreviousSibling : 109
NextSibling : 112
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 109
NextElementSibling : 112
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 112
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 107
ParentElement : 107
FirstChild : 113
LastChild : 122
PreviousSibling : 111
NextSibling : 123
NodeValue : === null
TextContent : == R28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICBTZXR0aW5ncwogICAgICAgICAgPgogICAgICAgICAgU2hvdyBhZHZhbmNlZCBzZXR0aW5nc+KApgogICAgICAgICAgYW5kIGRlc2VsZWN0ICJVc2UgYSBwcmVkaWN0aW9uIHNlcnZpY2UgdG8gbG9hZCBwYWdlcyBtb3JlIHF1aWNrbHkuIgogICAgICAgICAgSWYgdGhpcyBkb2VzIG5vdCByZXNvbHZlIHRoZSBpc3N1ZSwgd2UgcmVjb21tZW5kIHNlbGVjdGluZyB0aGlzIG9wdGlvbgogICAgICAgICAgYWdhaW4gZm9yIGltcHJvdmVkIHBlcmZvcm1hbmNlLg==
ChildNodes : 7 : 113, 114, 116, 117, 119, 120, 122
ChildElementCount : 3
FirstElementChild : 114
LastElementChild : 120
Children : 3 : 114, 117, 120
PreviousElementSibling : 109
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-body
ClassList : 1 : == c3VnZ2VzdGlvbi1ib2R5
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-body

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:body

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 12

NodeId : 113
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 114
NodeValue : == R28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICA=
TextContent : == R28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 114
Data : == R28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICA=
Length : 44
WholeText : == R28gdG8KICAgICAgICAgIHRoZSBDaHJvbWUgbWVudSA+CiAgICAgICAgICA=

NodeId : 114
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : 115
LastChild : 115
PreviousSibling : 113
NextSibling : 116
NodeValue : === null
TextContent : Settings
ChildNodes : 1 : 115
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 117
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : settingsTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 18

NodeId : 115
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 114
ParentElement : 114
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Settings
TextContent : Settings
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Settings
Length : 8
WholeText : Settings

NodeId : 116
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : null 
LastChild : null 
PreviousSibling : 114
NextSibling : 117
NodeValue : == CiAgICAgICAgICA+CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA+CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 114
NextElementSibling : 117
Data : == CiAgICAgICAgICA+CiAgICAgICAgICA=
Length : 23
WholeText : == CiAgICAgICAgICA+CiAgICAgICAgICA=

NodeId : 117
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : 118
LastChild : 118
PreviousSibling : 116
NextSibling : 119
NodeValue : === null
TextContent : Show advanced settings…
ChildNodes : 1 : 118
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 114
NextElementSibling : 120
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : advancedTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 19

NodeId : 118
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 117
ParentElement : 117
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Show advanced settings…
TextContent : Show advanced settings…
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Show advanced settings…
Length : 23
WholeText : Show advanced settings…

NodeId : 119
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : null 
LastChild : null 
PreviousSibling : 117
NextSibling : 120
NodeValue : == CiAgICAgICAgICBhbmQgZGVzZWxlY3QgIg==
TextContent : == CiAgICAgICAgICBhbmQgZGVzZWxlY3QgIg==
ChildNodes : 0 : 
PreviousElementSibling : 117
NextElementSibling : 120
Data : == CiAgICAgICAgICBhbmQgZGVzZWxlY3QgIg==
Length : 25
WholeText : == CiAgICAgICAgICBhbmQgZGVzZWxlY3QgIg==

NodeId : 120
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : 121
LastChild : 121
PreviousSibling : 119
NextSibling : 122
NodeValue : === null
TextContent : Use a prediction service to load pages more quickly
ChildNodes : 1 : 121
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 117
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : noNetworkPredictionTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 20

NodeId : 121
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 120
ParentElement : 120
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Use a prediction service to load pages more quickly
TextContent : Use a prediction service to load pages more quickly
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Use a prediction service to load pages more quickly
Length : 51
WholeText : Use a prediction service to load pages more quickly

NodeId : 122
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 112
ParentElement : 112
FirstChild : null 
LastChild : null 
PreviousSibling : 120
NextSibling : null 
NodeValue : == LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4=
TextContent : == LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4=
ChildNodes : 0 : 
PreviousElementSibling : 120
NextElementSibling : null 
Data : == LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4=
Length : 125
WholeText : == LiIKICAgICAgICAgIElmIHRoaXMgZG9lcyBub3QgcmVzb2x2ZSB0aGUgaXNzdWUsIHdlIHJlY29tbWVuZCBzZWxlY3RpbmcgdGhpcyBvcHRpb24KICAgICAgICAgIGFnYWluIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS4=

NodeId : 123
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 107
ParentElement : 107
FirstChild : null 
LastChild : null 
PreviousSibling : 112
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 112
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 124
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : 125
LastChild : 131
PreviousSibling : 107
NextSibling : 132
NodeValue : === null
TextContent : == CiAgICAgICAgQWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3MuCiAgICAgICAgSWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLgogICAgICA=
ChildNodes : 5 : 125, 126, 128, 129, 131
ChildElementCount : 2
FirstElementChild : 126
LastElementChild : 129
Children : 2 : 126, 129
PreviousElementSibling : 107
NextElementSibling : 132
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestions
ClassList : 1 : == c3VnZ2VzdGlvbnM=
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestions

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsDetails

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : 3

NodeId : 125
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 124
ParentElement : 124
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 126
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 126
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 126
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 124
ParentElement : 124
FirstChild : 127
LastChild : 127
PreviousSibling : 125
NextSibling : 128
NodeValue : === null
TextContent : == QWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3Mu
ChildNodes : 1 : 127
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 129
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-header
ClassList : 1 : == c3VnZ2VzdGlvbi1oZWFkZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-header

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:header

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 11

NodeId : 127
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 126
ParentElement : 126
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == QWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3Mu
TextContent : == QWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3Mu
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == QWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3Mu
Length : 84
WholeText : == QWxsb3cgQ2hyb21lIHRvIGFjY2VzcyB0aGUgbmV0d29yayBpbiB5b3VyIGZpcmV3YWxsIG9yIGFudGl2aXJ1cwogICAgICAgICAgc2V0dGluZ3Mu

NodeId : 128
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 124
ParentElement : 124
FirstChild : null 
LastChild : null 
PreviousSibling : 126
NextSibling : 129
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 126
NextElementSibling : 129
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 129
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 124
ParentElement : 124
FirstChild : 130
LastChild : 130
PreviousSibling : 128
NextSibling : 131
NodeValue : === null
TextContent : == SWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLg==
ChildNodes : 1 : 130
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 126
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-body
ClassList : 1 : == c3VnZ2VzdGlvbi1ib2R5
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-body

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:body

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 12

NodeId : 130
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 129
ParentElement : 129
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == SWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLg==
TextContent : == SWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLg==
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == SWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLg==
Length : 124
WholeText : == SWYgaXQgaXMgYWxyZWFkeSBsaXN0ZWQgYXMgYSBwcm9ncmFtIGFsbG93ZWQgdG8gYWNjZXNzIHRoZSBuZXR3b3JrLCB0cnkKICAgICAgcmVtb3ZpbmcgaXQgZnJvbSB0aGUgbGlzdCBhbmQgYWRkaW5nIGl0IGFnYWluLg==

NodeId : 131
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 124
ParentElement : 124
FirstChild : null 
LastChild : null 
PreviousSibling : 129
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 129
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 132
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : 133
LastChild : 148
PreviousSibling : 124
NextSibling : 149
NodeValue : === null
TextContent : == CiAgICAgICAgSWYgeW91IHVzZSBhIHByb3h5IHNlcnZlcuKApgogICAgICAgIENoZWNrIHlvdXIgcHJveHkgc2V0dGluZ3Mgb3IgY29udGFjdCB5b3VyIG5ldHdvcmsgYWRtaW5pc3RyYXRvciB0bwogICAgICBtYWtlIHN1cmUgdGhlIHByb3h5IHNlcnZlciBpcyB3b3JraW5nLiBJZiB5b3UgZG9uJ3QgYmVsaWV2ZSB5b3Ugc2hvdWxkCiAgICAgIGJlIHVzaW5nIGEgcHJveHkgc2VydmVyOgogICAgICBHbyB0bwogICAgICAgICAgdGhlIENocm9tZSBtZW51ID4KICAgICAgICAgIFNldHRpbmdzCiAgICAgICAgICA+CiAgICAgICAgICBTaG93IGFkdmFuY2VkIHNldHRpbmdz4oCmCiAgICAgICAgICA+CiAgICAgICAgICBDaGFuZ2UgcHJveHkgc2V0dGluZ3PigKYKICAgICAgICAgID4KICAgICAgICAgIExBTiBTZXR0aW5ncwogICAgICAgICAgYW5kIGRlc2VsZWN0ICJVc2UgYSBwcm94eSBzZXJ2ZXIgZm9yIHlvdXIgTEFOIi4KICAgICAg
ChildNodes : 5 : 133, 134, 136, 137, 148
ChildElementCount : 2
FirstElementChild : 134
LastElementChild : 137
Children : 2 : 134, 137
PreviousElementSibling : 124
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestions
ClassList : 1 : == c3VnZ2VzdGlvbnM=
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestions

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : suggestionsDetails

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 4

NamespaceURI : === null
Prefix : === null
LocalName : jsinstance
Name : jsinstance
Value : *4

NodeId : 133
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 132
ParentElement : 132
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 134
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 134
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 134
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 132
ParentElement : 132
FirstChild : 135
LastChild : 135
PreviousSibling : 133
NextSibling : 136
NodeValue : === null
TextContent : If you use a proxy server…
ChildNodes : 1 : 135
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 137
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-header
ClassList : 1 : == c3VnZ2VzdGlvbi1oZWFkZXI=
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-header

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:header

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 11

NodeId : 135
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 134
ParentElement : 134
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : If you use a proxy server…
TextContent : If you use a proxy server…
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : If you use a proxy server…
Length : 26
WholeText : If you use a proxy server…

NodeId : 136
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 132
ParentElement : 132
FirstChild : null 
LastChild : null 
PreviousSibling : 134
NextSibling : 137
NodeValue : == CiAgICAgICAg
TextContent : == CiAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : 134
NextElementSibling : 137
Data : == CiAgICAgICAg
Length : 9
WholeText : == CiAgICAgICAg

NodeId : 137
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 132
ParentElement : 132
FirstChild : 138
LastChild : 147
PreviousSibling : 136
NextSibling : 148
NodeValue : === null
TextContent : == Q2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAgU2V0dGluZ3MKICAgICAgICAgID4KICAgICAgICAgIFNob3cgYWR2YW5jZWQgc2V0dGluZ3PigKYKICAgICAgICAgID4KICAgICAgICAgIENoYW5nZSBwcm94eSBzZXR0aW5nc+KApgogICAgICAgICAgPgogICAgICAgICAgTEFOIFNldHRpbmdzCiAgICAgICAgICBhbmQgZGVzZWxlY3QgIlVzZSBhIHByb3h5IHNlcnZlciBmb3IgeW91ciBMQU4iLg==
ChildNodes : 7 : 138, 139, 141, 142, 144, 145, 147
ChildElementCount : 3
FirstElementChild : 139
LastElementChild : 145
Children : 3 : 139, 142, 145
PreviousElementSibling : 134
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : suggestion-body
ClassList : 1 : == c3VnZ2VzdGlvbi1ib2R5
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : suggestion-body

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:body

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 12

NodeId : 138
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 139
NodeValue : == Q2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAg
TextContent : == Q2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAg
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 139
Data : == Q2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAg
Length : 225
WholeText : == Q2hlY2sgeW91ciBwcm94eSBzZXR0aW5ncyBvciBjb250YWN0IHlvdXIgbmV0d29yayBhZG1pbmlzdHJhdG9yIHRvCiAgICAgIG1ha2Ugc3VyZSB0aGUgcHJveHkgc2VydmVyIGlzIHdvcmtpbmcuIElmIHlvdSBkb24ndCBiZWxpZXZlIHlvdSBzaG91bGQKICAgICAgYmUgdXNpbmcgYSBwcm94eSBzZXJ2ZXI6CiAgICAgIEdvIHRvCiAgICAgICAgICB0aGUgQ2hyb21lIG1lbnUgPgogICAgICAgICAg

NodeId : 139
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : 140
LastChild : 140
PreviousSibling : 138
NextSibling : 141
NodeValue : === null
TextContent : Settings
ChildNodes : 1 : 140
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 142
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : settingsTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 18

NodeId : 140
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 139
ParentElement : 139
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Settings
TextContent : Settings
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Settings
Length : 8
WholeText : Settings

NodeId : 141
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : null 
LastChild : null 
PreviousSibling : 139
NextSibling : 142
NodeValue : == CiAgICAgICAgICA+CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA+CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 139
NextElementSibling : 142
Data : == CiAgICAgICAgICA+CiAgICAgICAgICA=
Length : 23
WholeText : == CiAgICAgICAgICA+CiAgICAgICAgICA=

NodeId : 142
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : 143
LastChild : 143
PreviousSibling : 141
NextSibling : 144
NodeValue : === null
TextContent : Show advanced settings…
ChildNodes : 1 : 143
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 139
NextElementSibling : 145
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : advancedTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 19

NodeId : 143
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 142
ParentElement : 142
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Show advanced settings…
TextContent : Show advanced settings…
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Show advanced settings…
Length : 23
WholeText : Show advanced settings…

NodeId : 144
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : null 
LastChild : null 
PreviousSibling : 142
NextSibling : 145
NodeValue : == CiAgICAgICAgICA+CiAgICAgICAgICA=
TextContent : == CiAgICAgICAgICA+CiAgICAgICAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 142
NextElementSibling : 145
Data : == CiAgICAgICAgICA+CiAgICAgICAgICA=
Length : 23
WholeText : == CiAgICAgICAgICA+CiAgICAgICAgICA=

NodeId : 145
NodeType : 1
NodeName : SPAN
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : 146
LastChild : 146
PreviousSibling : 144
NextSibling : 147
NodeValue : === null
TextContent : Change proxy settings…
ChildNodes : 1 : 146
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 142
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : span
TagName : SPAN
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : proxyTitle

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 21

NodeId : 146
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 145
ParentElement : 145
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : Change proxy settings…
TextContent : Change proxy settings…
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : Change proxy settings…
Length : 22
WholeText : Change proxy settings…

NodeId : 147
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 137
ParentElement : 137
FirstChild : null 
LastChild : null 
PreviousSibling : 145
NextSibling : null 
NodeValue : == CiAgICAgICAgICA+CiAgICAgICAgICBMQU4gU2V0dGluZ3MKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJveHkgc2VydmVyIGZvciB5b3VyIExBTiIu
TextContent : == CiAgICAgICAgICA+CiAgICAgICAgICBMQU4gU2V0dGluZ3MKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJveHkgc2VydmVyIGZvciB5b3VyIExBTiIu
ChildNodes : 0 : 
PreviousElementSibling : 145
NextElementSibling : null 
Data : == CiAgICAgICAgICA+CiAgICAgICAgICBMQU4gU2V0dGluZ3MKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJveHkgc2VydmVyIGZvciB5b3VyIExBTiIu
Length : 93
WholeText : == CiAgICAgICAgICA+CiAgICAgICAgICBMQU4gU2V0dGluZ3MKICAgICAgICAgIGFuZCBkZXNlbGVjdCAiVXNlIGEgcHJveHkgc2VydmVyIGZvciB5b3VyIExBTiIu

NodeId : 148
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 132
ParentElement : 132
FirstChild : null 
LastChild : null 
PreviousSibling : 137
NextSibling : null 
NodeValue : == CiAgICAgIA==
TextContent : == CiAgICAgIA==
ChildNodes : 0 : 
PreviousElementSibling : 137
NextElementSibling : null 
Data : == CiAgICAgIA==
Length : 7
WholeText : == CiAgICAgIA==

NodeId : 149
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 89
ParentElement : 89
FirstChild : null 
LastChild : null 
PreviousSibling : 132
NextSibling : null 
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 132
NextElementSibling : null 
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 150
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 30
ParentElement : 30
FirstChild : null 
LastChild : null 
PreviousSibling : 89
NextSibling : null 
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 89
NextElementSibling : null 
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 151
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : null 
LastChild : null 
PreviousSibling : 30
NextSibling : 152
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 30
NextElementSibling : 152
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 152
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 153
LastChild : 165
PreviousSibling : 151
NextSibling : 166
NodeValue : === null
TextContent : == CiAgICAKICAgIAogICAgbW9iaWxlLnR3aXR0ZXIuY29t4oCZcyBzZXJ2ZXIgRE5TIGFkZHJlc3MgY291bGQgbm90IGJlIGZvdW5kLgogIA==
ChildNodes : 7 : 153, 154, 155, 156, 157, 158, 165
ChildElementCount : 2
FirstElementChild : 156
LastElementChild : 158
Children : 2 : 156, 158
PreviousElementSibling : 30
NextElementSibling : 167
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : sub-frame-error
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : sub-frame-error

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 153
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 154
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 156
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 154
NodeType : 8
NodeName : #comment
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : 153
NextSibling : 155
NodeValue : == IFNob3cgZGV0YWlscyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGljb24sIGluIGNhc2UgdGhlIGRldGFpbHMgYXJlCiAgICAgICAgIGhpZGRlbiBiZWNhdXNlIHRoZXkncmUgdG9vIGxhcmdlLiA=
TextContent : == IFNob3cgZGV0YWlscyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGljb24sIGluIGNhc2UgdGhlIGRldGFpbHMgYXJlCiAgICAgICAgIGhpZGRlbiBiZWNhdXNlIHRoZXkncmUgdG9vIGxhcmdlLiA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 156
Data : == IFNob3cgZGV0YWlscyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGljb24sIGluIGNhc2UgdGhlIGRldGFpbHMgYXJlCiAgICAgICAgIGhpZGRlbiBiZWNhdXNlIHRoZXkncmUgdG9vIGxhcmdlLiA=
Length : 110

NodeId : 155
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : 154
NextSibling : 156
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 156
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 156
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : 155
NextSibling : 157
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 158
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : === empty
ClassName : icon icon-generic
ClassList : 2 : == aWNvbg==, == aWNvbi1nZW5lcmlj
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : class
Name : class
Value : icon icon-generic

NamespaceURI : === null
Prefix : === null
LocalName : jseval
Name : jseval
Value : updateIconClass(this.classList, iconClass)

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 1

NodeId : 157
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : 156
NextSibling : 158
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 156
NextElementSibling : 158
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 158
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : 159
LastChild : 164
PreviousSibling : 157
NextSibling : 165
NodeValue : === null
TextContent : mobile.twitter.com’s server DNS address could not be found.
ChildNodes : 4 : 159, 161, 162, 164
ChildElementCount : 2
FirstElementChild : 159
LastElementChild : 162
Children : 2 : 159, 162
PreviousElementSibling : 156
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : sub-frame-error-details
ClassName : === empty
ClassList : 0 : 
Attributes : 4

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : sub-frame-error-details

NamespaceURI : === null
Prefix : === null
LocalName : jsselect
Name : jsselect
Value : summary

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : .innerHTML:msg

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 2

NodeId : 159
NodeType : 1
NodeName : STRONG
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 158
ParentElement : 158
FirstChild : 160
LastChild : 160
PreviousSibling : null 
NextSibling : 161
NodeValue : === null
TextContent : mobile.twitter.com
ChildNodes : 1 : 160
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 162
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : strong
TagName : STRONG
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : jscontent
Name : jscontent
Value : hostName

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 16

NodeId : 160
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 159
ParentElement : 159
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : mobile.twitter.com
TextContent : mobile.twitter.com
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : mobile.twitter.com
Length : 18
WholeText : mobile.twitter.com

NodeId : 161
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 158
ParentElement : 158
FirstChild : null 
LastChild : null 
PreviousSibling : 159
NextSibling : 162
NodeValue : == 4oCZcyBzZXJ2ZXIg
TextContent : == 4oCZcyBzZXJ2ZXIg
ChildNodes : 0 : 
PreviousElementSibling : 159
NextElementSibling : 162
Data : == 4oCZcyBzZXJ2ZXIg
Length : 10
WholeText : == 4oCZcyBzZXJ2ZXIg

NodeId : 162
NodeType : 1
NodeName : ABBR
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 158
ParentElement : 158
FirstChild : 163
LastChild : 163
PreviousSibling : 161
NextSibling : 164
NodeValue : === null
TextContent : DNS address
ChildNodes : 1 : 163
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 159
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : abbr
TagName : ABBR
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : jsvalues
Name : jsvalues
Value : title:dnsDefinition

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 17

NamespaceURI : === null
Prefix : === null
LocalName : title
Name : title
Value : DNS is the network service that translates a website’s name to its Internet address.

NodeId : 163
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 162
ParentElement : 162
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : DNS address
TextContent : DNS address
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : DNS address
Length : 11
WholeText : DNS address

NodeId : 164
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 158
ParentElement : 158
FirstChild : null 
LastChild : null 
PreviousSibling : 162
NextSibling : null 
NodeValue : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
TextContent : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
ChildNodes : 0 : 
PreviousElementSibling : 162
NextElementSibling : null 
Data : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=
Length : 20
WholeText : == IGNvdWxkIG5vdCBiZSBmb3VuZC4=

NodeId : 165
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 152
ParentElement : 152
FirstChild : null 
LastChild : null 
PreviousSibling : 158
NextSibling : null 
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 158
NextElementSibling : null 
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 166
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : null 
LastChild : null 
PreviousSibling : 152
NextSibling : 167
NodeValue : == CgogIA==
TextContent : == CgogIA==
ChildNodes : 0 : 
PreviousElementSibling : 152
NextElementSibling : 167
Data : == CgogIA==
Length : 4
WholeText : == CgogIA==

NodeId : 167
NodeType : 1
NodeName : DIV
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 168
LastChild : 174
PreviousSibling : 166
NextSibling : 175
NodeValue : === null
TextContent : == CiAgICAKICAgIAogICAgCiAg
ChildNodes : 7 : 168, 169, 170, 171, 172, 173, 174
ChildElementCount : 3
FirstElementChild : 169
LastElementChild : 173
Children : 3 : 169, 171, 173
PreviousElementSibling : 152
NextElementSibling : 176
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : div
TagName : DIV
Id : offline-resources
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : offline-resources

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 168
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : 169
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : 169
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 169
NodeType : 1
NodeName : IMG
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 168
NextSibling : 170
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : null 
NextElementSibling : 171
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : img
TagName : IMG
Id : offline-resources-1x
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : offline-resources-1x

NamespaceURI : === null
Prefix : === null
LocalName : src
Name : src
Value : == ZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUJORUFBQUJFQ0FBQUFBQ0tJL3hCQUFBQUFuUlNUbE1BQUhhVHpUZ0FBQW9PU1VSQlZIZ0I3SjFiZHFTNEZrU0R1N2dQVFlTaDJBT0FUdzFQbjZrQlZBMkZpZWlUcmxlc3E2cG84bGd0MHBqMDJiMDZFNThIbFJoWE9DUUJCY2R4SE1keEhPZkRNZUE3QmZjSU9JNFZ3SVNES1FodkswTzRIOWlBb2JlRlpTeDhXSUswZHF6NHp0UVJnMVhkRUNOZlgvQ1RHVURtTmpKRFA2TXp1TW5LS3NRMFkrQW15eG5pcnVybXgxS2doQXZXWG9BUkFFckVQVXBBQi9LenZLNlljQUlsOGxEMkF0c0NiRU5QUzFYR3dxTVRTbnZIaE5PWWdCVjNtS2xrbEtEcVBVc2hNVUl6c3V6bE9YRkdXOUFRUzBDL2x2L1FNV3JhaE9Nb2lLWkw0MUh5VUNSQWRjS3lEUjB0VlJrTEQwK29WN1E3eUxvZm02dzZyS2Jkcm1OVUw2Tk95YXBNdEdjVXVpeFoyV1NIYnNsK005N0JvVVg4VHJweXJmR2JKSitzYUJRMFc5STZqbnhGL1pPKzRucW82NkdRbmVvMzI1a2VVanRoN2JGcFgzOE1PNmxiTStaTWFlT1lFVElTell6TjlXaXk3c2h1eWo0ZEk5NkpTUVh1T01TbFdjcWtnUTJEU2xWZFVTSWJXYlZzMnZKNDFDdmFkRHMwalRFNjNZOU5XTzI2cjN4OU1VM0F6REdrMW1RV1p1MkJodDZWYVB6RVhybDIxZ2p5WlJYTlBuS0ZJOCtUSm5SS0xFRUQyNEpOcGFxcUtCR3gvQzVvV0xTbEJSMCtQcDRKNXlNMjdZVnlkcDhzWDRwK1NVR2U2NjFUdVdFNVk3OGR0Y0RTWDN1K29xV0lOakxtUm0rd1RzQlVKV3BLMDZwS2FYWnBKZGJtaG9IL0xjQnlxNlJxK0xNQys3RGwrT0ZqdnpqMk9iUkpZL3RPYTFyL3VVdkR5OWQ5UWFQejR1dE1QNlpEeXN4c1BlU2NmM3lseTZiT2ZSYmNlbXRQWUVTdnBBbjIwR1NTMGVmVktPR2M0YU5RZ29qajFabnp2VEVua3hxek9WZkdsbFAzeTlxblowUzNwTTJtSzVqTXdRY3BpTWIxWlZxZGtCQU5sMWFDRmJCYmRPUjZQdndndGppdTl2a3g2MGpyWE5wcTE1RTh5d2h6LzJ0YnpHUVF3UTRiNTlaZmU3YWlwVnJTRWhDUDhtWkcxVWx6WjIwdE9ndzlIdzZocnpDTFppeU9icUNrVmF1WkZDME9QTDhucVVyay96SE4xZ29wT2Zrem5nSDNmdjhTUWF1MjBqdE1RMDlWVVNteFFVUzFPc1pTREFXU3dLTkZxNVN5bHpBNlBoRmYrT280eDNtMHBFdVlLWGI0czVXTEFBYVQxbHdmYzNLcjZDRFo2SkQ2aHJVQ1dWaG1qSEZyek5rMTdweFdqZEdsL1lpOUF1QnJCcUFidXNtdkdOTkN5V3BiaHZQVTgyajFhRE1pOVEwNHA4YUxhUXRpdzdwbFhaMEE3VHdEU29qTy9Hc0NpQW5FNnFBR2hnNDUvZUF1N2NzcnVuR2NFVXBFTjVOc1hZRGxVWTZNaWU2N1VHUFRQaWlPMXhsMHZnTFl2WHQ4M2dsbXZrdXg3a2U2V2RHeno3bUttaVNRTTJ1Zm1QRW9RVXY5ZDJmdTNqRWF6R3FjNzlKVVFqUnhnaG9aVDlGb2lKbmp6dmJZdERKR09YT2NveFV0NGhNeWJBdWNFM25sb0pQT1NKaDV2NmNtOGd3Rldybm43MmFqMXR4bnZSKzVScnpvWHk4a0JPQVN0V0J0dy9mb0d2ZDFObnlYK2gyYStMWFFVSDJYS0FGVDB1THBpOWJ5elhnMnZyenk5WjZlQVptcUlVbkhvYUo5UGxJb2Z3YUFZUU1XdTZYaXR1QUU2dldCZ2lmaGxhL1hwM0NscWpwRkVTUmR0NVorV0NJa1E2OHZITkJBWHlzWkgzQ211dWZoSW5SdXJDYWd2TGs2UU5YcGJ3TUROdm91dStWbi9mTGVWbzNyQTA4NFB6QVlpd0R0ekIxaklCM0ptdnVjMFlxelFSazZXMGQ4TGhJUTlnUGtOaFNwRUdqcjJIS1c0WHlPdXpudGh4L00rOFYvVzUrNy92Ulo5eUFSUTRMNWExOElJQmV0SmJOMTgvb0dZTmpSSHd5SHQ2cWlKU2o5UjI1elo1NU03VWlxNnUzcWdsREYyS21CQ3FxVFZxaE5PMGJRU3ArZ3hSSmtWOWZpNjh1UC96OFR6Z1lkM3R5dzliUU9xQlV0cG1kZDl3d2xHb0dLR3pEc3RNUjdMUjFFdEVOcDU4MmQxejVqTDN5R3JjNzl5ODNwU3NiQlpIcXVObHVYWmQ1RGZ0ZUtiYmhhTGMrT25ncDF0VXNsVVV2RHZlMWRyU1B1U0ZvRTJvLzhBSUw2cnNwQ2hyYnFaa2tiME41eWhOYTJFM0I5NUJtMnZOKzhtL21lM2xFOVdhR3AzTGJQUERjL3U5VlpvSkZiWit1b0N2YU1oQUpFRFRTMnhPTy9UZHpwK1hzNkMzbUc3ZlhoblhsUjRnbng0clhVN2RtYS9GVGwwWVMyOWJlT2p6dFR4Nk5PVUYyYVZyTkVlL2JaYTRtNitubXVFSlVBYm5GUDE1eEgrLzdmSFUvRllHNkxHK1NtVkw1Ym1uRlovSG8wSjRXUDROSzRLTUN0Uzd1MHAvQm85bmduWGJmV1huVnUvRGNOZEdmOXJSZ2ZlYWI2c1dmUjFLWFoxWjBrWTcrbDNySVRvUUNJbWlEMlU5eTRGZXBGYUhtNDRqcEpqRFRHbE9tZnhWYkdITWM5Mm5rRVcvUHJyUlNLSmlxakY0Q2lIYXFCTnFFdUxQeERMc0dMLyt4Y3ZGYXZiTHBoNlc4OVRkSEN3NXdaQ1cyelhnZ2ZlNFNxY2Myb0JoWVlTQWMrRVk0ekdoTTUvdGVpZDBvc0JTYWFCQzNGL3ZQQWp2cHhzZER4NURwMWpqc25JN1krOTVoVDV6K2VycFprekIvZHBZMndKUzBGUGZMSDAvd3NqL0FoSlMwRkp1VGFXT1BiSFdGYk4vOVZkQ1VTd3RQVzVnODFqMmFNWlVMRGtidExFK0dTQktPQ2RHaUNVUnRWVFhGcHA3S0N1RXR6bDNicmFWVkZRK2cvOG42ZVFpbC9YMjRNbWpBSWUrb1lKTnF3SzJNOHVVNW1YYzg2NTJyWE9ZNnZkWjZOdmR5b2lYWjFqQnFOY0M3bzB0S1ZhdzJYbGx0ZEdzMFZVd3NZR1RwYnh3UE8xSlhjVTdnVEdMWWZyeDB0eDZ0anNXL1BzakhkMTRwMmwrWU96WEdQZGlyQkRBd2RMZTlzQWY1NElFaDg2ekxBMnFRajY0U0dZcDlFTTY3NERrOVJxeTR0WTU4QjJNUnFWUlpPSXIydDQ0Rm55bWZSemx5SlNPSEJMZzJyT3pTbm41dnhqSTNPMWhIWHh5Vk5iOHpxdDJtTmk2T3JHelI5ZWdQZkgxUUxSRVFnRlNEczE3S3kvek9vUytPN3dWSk5mTjFheGpoMTA4TDkzRzhkSDN1bWVseDdnR01UQ3VMYmJmSkVRWkVZaGE2S0dUYk45bDJyK3pObjJ4a3dMbnpvck5XcXNMVlAwZWFHWE1aNzRwTFdETlhMTDBONytHUm5BbWRxd2dOcUU0Tzd0UWtSRVFtcCt6TW91ZFdsQVRjTWFJUk4yOEVyQTVudjlwRi82UHRFbmFrLzFyOEg1M2xSUjZiY2Z1WWUwRHJDY1p4TDN2ZGsxOVBIQlpRejczdTZBVDBPRFpXR2JUQVkzM1VkMG5FY1ozaGc2NGdtWmppTzgxWWlDa0sxZFh5dEJhdU8vd3d6c214QnFjM1ZJaFA2RFZOdzVGaEZ5d0RTMjQvY0tlSFJDZExmb1RpTzN6TXc1OCt1WVVYL0hZRDJCTEVUaW5ZNFo1Qms2K2phRm83OURGbTNMRzRRK3ByNnI5N0k1cEg3cFJzbGxnaVFVRUo3UXNTUkNkTjJhWWZqdUVjek5Ebm9sbFBMU0ttLzdFaFE2cGdRMnlVS3B4M09hUVRaT3JhMmdmN1AwTS9RMytTY1RKbExYNktnRUNiNDloMDJsRkx1ZFB6VnpuMGxOUXdFVVJRZHJmR3VjOWFuWDM0QUl6azIxYy94SGpMWUNvL0pVMlcxa0xUbS83QmVQN2trU1pJa1piajBKaEhaZ0RkQWc1VWVBQTZmOWY4QXIvL2VNWnFVeHM4Z2dzN0JoQUVhclBRQXNQbStod0Z1czRTbkc2TXgzcEkweHdFWC9zeW9NTUR0ZU8weDE3UWxDZDVtL0NiWDBTVHM5bTNSRGdnWEJMcEtXdjVTODNlU0Y3ODd5MVdkNWFwdUNjWERIRnUwSEwxd1BHYmh6NmxMMldMMlZZcnRFNk5QWlc3dXNYQUV5MVdaNWVwR0luQ01NTGhUQnNDUTVlclR5aFhWbEFBU1FST0lqTzBGdkhCRmgrZXZ6cGFyRU12VnNwOFhNR1o1SHVITDNjWkd6cHU4ODRreFp0Ti8xSExWeW5MMXVpUkprdlFGVWcxT2FLU2FxU2tBQUFBQVNVVk9SSzVDWUlJPQ==

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 170
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 169
NextSibling : 171
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 169
NextElementSibling : 171
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 171
NodeType : 1
NodeName : IMG
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 170
NextSibling : 172
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 169
NextElementSibling : 173
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : img
TagName : IMG
Id : offline-resources-2x
ClassName : === empty
ClassList : 0 : 
Attributes : 3

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : offline-resources-2x

NamespaceURI : === null
Prefix : === null
LocalName : src
Name : src
Value : == ZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUNZa0FBQUNDQkFNQUFBRDdnTWk4QUFBQUlWQk1WRVVBQUFEMzkvZmEydHIvLy8rNXVibFRVMVAyOXZidjcrLysvdjc0K1BqdzhQQ2pTa3k0QUFBQUFYUlNUbE1BUU9iWVpnQUFERGxKUkVGVWVBSHMzU3RzTEVtV2gvR3Z5Mld1SkJlM2dzOXIzUndGVjcrU3MzNmg0Y2djTFpuWGNoYmtjZ1ZjNkdxWmc5VGxKSnBiN29kRExoMHBGQk4yT05QT3F2VC9KM1U1NjhRNU9UczdNK1dUSjZQU3JFWkVSRVJFUGdNWWFFa3N4UUVUeXhwSXo4b2l0UU5YY0poVllsbVd0K2hDcWJ2QzhXQ2FFV1AyR1NaSy91WVhIbHgrQ1hjZmo0ZjVhQVJ5a0JHeVlJa2p4OVVjc2xqT3k0ZkZXY1kvWG5KdXdNNzNxb1pLTEcwZzk5VHNPR2NpSW50ZzhMVEVSSTkySCtBY0UyOXU4QkJUSzNEbGdNT2NFc3V5dk9VWFNwMFZFNnVad0xFOEVmYUluSUR4TGpCZWZubThQc3doOHNYazVSZ0l4N2UyU242YmpSQXN4bWkxWDM3RXpvSUp4NnRXMllMOWs2MFlQczYvakhaTVpCT09CUTE0SXVrNVBZcVBxUnF3dnNweG1GRmlXWmEzL0VJNW5tdFhHRWZCWWxNcno0THQ4YWJGck85cTUyM2ZBUGdpRnM4KzE0ekYrL0NlNW1JT2thTVBmSGZOSENKN2E4VTZtckhPajI0SEUrZHNTRVhnNnNBNmJEelhiM3FWM0FrM1p6VDJaMzYrQVVhQWtLLzd1UHY0cGYxdUg2RzhieG5HeDlDSTNYdTBpc2UzK1ZTdlFuU1BjZ0tSN01OMzN3SGY1ZGVYRXRtZi95ZVhUY2E2ZWlvTFhIR29OVm1XTVpUZDZKVXJTdDZNamVmYWxwdUt1Y2Fnc3hHYmNFL24vVGtmL014VytmcC9XVGVSTzFZaVlkT2ZZdDBYbUNLMm16VWZQZnhUWGoyUzd6M2F0YVZkZVlZUnhzZWp2SnJaa2FnWDYvam9QaDJWbmlvSHJseTF5YktNd2VOajBZcTVzcVRmQUduN0YvTE4wVmdFRHplL3NHRVRidFh6OXVlQ201KzcrVjVzd2pueVR4QzUvanRMRXZWaTBkTWxNQzYyc1dJQVVsZDJWd2VZZTZwVUJwd0ROMkZOMXFITW9NVktsci9aMk4vV0xUVVZtNHBZY3pJMnVaZFB4b2orSmtLZGZSZVN1MkJYaitVTnlKeHpYUDJTa0V2dlBsNSsrWkFiSHQ4LzV1V01GbkZNODNPMzNvdTVDYVo4d1BKRVJMMFkwUy8reWI0cFExcm5abU5wU0dWYmQ0ckVuY0I1bmFiN0M1dktlNVVpdHVFVk05cWR5TXErMXZ6U2NtZkREa3ZlSXRrenN4a2JuL3I4bjNxK0V3bVIxSlVkOGUzSjJKQ2FnWHBKeDMzTzllKzN0dHM2MTRoTno4d3pmWHZHWERQdkpNblVtN3UrdlI3VklpS2I2Y1dpTldQNWpkL0NQS3krUjZ5dnBISFRjaDJWKzYxdDA4bHZvQXFYWDQ3WXMxa3ZSK3plWWdqamNWK3JzVmg5ZGJRSDlSU0x4YitHekp1MzZWbXZ6dkdPeVlkcmV4V1ozNHRGTy9MMjQ2MDJpdy80V2RrMkdXdjNUbVhneVpMbE4zRU5wSTZLVGZ2ei85cnJDNG5zVjcrNEVPM2JmM2k5QzlodFNEdXdReE9LbUIwVlp5bk9aeG1CVGRLbldMU2d0NTVNbG5zUW1DMUVVa2VGZFcvOWpXRHRxMTZPUjFQZkhjcit1NVNUcStaTnVNZFlqSkJmUlU1c0x1WWM3cG5EdjhteEZOR3pYa1ZYbEhadkVqeVJ0elBnRy9PdGRqWkY1VG9HU0xXOStkVUZIekdOQ2x1SmFVWWplS0xzV2ErblJqUVhjMHhNVHpaYUloKytaSUx2ZnVIL0VGbnlVOHhyazh5eVV6QmI2RCtWZFc5cDRTOXBycytlOWJwOThjeHkxWXRONVpISTAwWjd5azRScndlRFBkbTFPSW1kcHlaWFpXSFdPUzBlV0pYc2wybkY0aUpUTVh0dlVqdDcvU2ZOdHBzZlcxaWpqM0k4bUNveCttUHR1NVI5c2NubDJBYWU5U3JhdTQvSU5YT0k3Ti85Vk95QVl4MWl6M290cnVOTWp1Zkg5cFRHUCtKVUJOcnN5bkdzL2l2Mm5OUE9RL21nNHFIeVA2dVlNODRoRjh0OXBxQmVUUFE5U3BIWG51NzNmTXpQbW9vVjd5S3BJN3ZGMXdPdFpzeWYxTmY1QjVLK1J5bHlVcjJZeVBYajYvZ2w0U09VSHVQaDQ4TkI2WElFRU5uenJzUTBsQUU0QUs1ZHN2cjNwb29kL0FQYnNKbnZVUTU0WW5HbDRqbUtaNTBMSTZHTVZPZGhGMzhGdUwrbG41V3FGeE1SOVdMemY5WDBpNWphYzhQQXBJN3NSQ0dtYXVEQWxjMjYyaVhad1ZJZGI2TDQvcVZubTJ5RDY4eVRRS0NQM2Zmc1BPZUk5SGRkaGZ2YldhVTd6b0tJaU9aaUVWSXprRTJIb1pWaDNSak9TbGhEVERBazVNUVVWeW9tbldOdVovdTUrL3pYVHhkWHVVT3FkazU1WWZIU1Blc1IrZkRULy8veHo3WDlDUkVvalJRc3Vab2Y2R1VuNUhLc25pSDBYd0xMU3IxWW5QMnJwbDlaRnl1ekxoT0IxSkdkTEdTRlJhQm94Vm9aNXNEVklxM1lNSzhWOHpIWnFjNXp3OWdYMmk3Mm5seGNQWFJkQUNiM1lDOHZ2Yi9kc1NLUmYvSWQxNGdzMG92NXVNVW5qYVhvRzRIQ0JBZnFKYjVaOG1LZVh0YVNGbitVMG5PT0l2eDhFeUhVdjlWbzMxVUVTbmVCWmQyRm5pdEV1d2dONVEzeTJnVkN4SnhmN2tpZ2ZvRmZYb0x2bkRWWFJlZjBzRUJwaWRJZGF4SDU4TjEzd0hmNVZXUmVMMVp2eGp6ZEg5M3pwY3FzeTJaMnFTKzd0eGs3UUgvSi9DYXhYK0tNNkZtdllxekxzb2o3OWRPczBqMXJFckdydWN0eDJXZkdOaTREY3c2aHRoUzZ6cGt2UWtlTHIwSDJHTThXcFFpK0V1Z3I4V1IrK1luZGVtZGEzOWFlOWVxSitiVVU4V2VmT3hMeWF5bFVZanRIalMzY2ZiUko1d0tsTzlZajhnSDQ1elV6aU93WC9WV3p2UGJzelNaamplekVnS2tGU3BXU01IZ2V4WFFTTGRTUTdDaDZ6dFNmYjc2NDRZYjY5WjBGNzBKSHZNR3FPcFlzVklzSDVGMC9YMHprT3Y4emc4aWVQaExUU1V6R0JoK1RIWjN2WkN4NlltUXpQSFZ4QTdramRRSHo2MlQzRVJ2c1JzNGlwVHZPbVlqSWZ2bGZOY3NyZDR1MUoyT1d2YnpZUHUxUUhyVVhVZ1M4TFhUSTIvYnRLRVhzVkdiQ0FXNHFZNllyVmpHOUxPYklNUkhOeFVSL2psSmtUdzlKTlBqeUtLYWh1aEFUV1lLaFdsSHYzaHFTSlI0UFl1SWN4TWc3a0RhY2ErNFBGMysxOFZaZjZXMTNxZG1CaUloNnNjUnJpTTg4ZnlKU1JrNUJUQjF4VzZsM2J3UFBZeFdJYUM0bUluTHlkcVE0ZTRlVXBGZ0p4bVFMSGExWXJDLzBzSXBwQXB3RGsyT1pxOFRLdkthbnFsdzl6em1MYlVSS01XNDFGMEo0L21Uc2xsK25UL1N5MHZmWGk0bUk3Si9lUWg2VDdjbDZTNUcwNGx4dS9qNzhtQ29MRVdpM1lnbXJhSXpMenFaL2xramFiRzdRWEd3MkVaRTlrT0tzUGllU2tCUjlwZVVxRml4cTJoVzJZTkUycThBNEprNkZZNVBzY21WN3VSQVlsOTh6OXV1bmhVcDNuRHNSVVM5R212L1IzVzlySFY2SzlUOWthUXN0UllYSHBHcTBKVDMzTzVKdWVqSnZ6bmNvM1ZONUlwcUxpWWpza1lVa1lPaGFhUGQxdmpGNms3T1pqTVZONU5Zblk2Rm5NbVlEcmVQU3poMGo5N2V6U25lY014R1IvZXhmTldjenNrcU53TUZlKzB1V1I0S2g4YmVaT3JRblhvN095WmltWXYxRWN6RVJFYzNGMHBPQncveVNONUFZYkVhR0IvSkxURHpKZFhWQXJpTVhwODFpemNjT3B3M2sxaVpqb2JGbmpJdS9sdU10N0VsaXY1YVJtYVU3enBtSXlINkJYelhyN2hiVGR3VmlldDNKR0U1VE1aa243N1hmZlo1L0xGKzZZelVpSXBxTHFSbUxrREJMamNiY3MxT2RobUtWUDVSdlA1ZlBCWStIT0VCcTVVWlkrUCtHd0dnL20zTDdaQnU4SG83TS9ZRVdLOHBITy9kd1lLWHF4VVJFdlZqNTBiMjhwS25ZczZTSWYvWlljZ0pjUGVaZ2F1WGxvT3VaaWVIYWViSjFGMyt0L1kwamNsOTFjWFYvMjFPYVdhbDZzWGRMUkwzWTJOaXBQNjd6K0VkSkE3MGNUSHFzMkJ2czZJc2tyRmRlTm5jZ0hvTlZPUU9QSnk3NGY0TUp6Y2xZMFQ2UkIxejN0L1N3b290ZnRYZGZSTlNMbGYxVjVhTTdzTFNFTEk5cDRWai9HV1R6N05rVWxQaDF5bXUzTTByVmk0bUk3bEd1VFVSLzlhaWRiNU94L0hPTnYzcGs3ZE9NcWRpeE02dmV0MVF2SmlMcXhTS0pIaUtpV2RuOFV2VmlJcUplYkFRaUl0TGtpU1E3V2p6M2FaYTE5UDhOSTZFNGFyUlBqL3YxTC9vbVk3YlZyS1JlVEVUMHhPcndCd0R2aHdIc1NDcUdKUmQ2RGJ4TG9rOHhFUkh0RnhzRDc5YVFCdXlOaittbEM4WVdPbGpGR2lUYTBlSzUvWmI5dnlIWVVjZXVNVE9yU0wyWWlPaVpGcUg1MGEwSFdndytlbnVYWW5yNWdqVnB0akFrS2hvVlowQkVjekVSa2M5NERacUxwWmN2RkUxYVRNZFF5aitPc1NIbE56SFZLdDRuVVM4bUlxSmVUS3h4Nmw2b04ybDV3ZVppT1o0ZUN3WkkvNzNpOS9idUFqZHlJSWdDYUMzNGZCdjZsd3lmTDh6SkJoWXNsUWRhN3drejJGMVRpcis1RWNoaUFEaHcvOStQTzNBZldRd0FBQURzbzRUVWc4dnphcUNBc3dwcnV4Z0FrTlM5S1R2VlFBRm5GRllXQXdDU1ZBbGpiUVdjVVZoWkRBQkk2c1dVdnRDZ2dMMkZsY1VBdmxWcVJIQlViNmFkZXZQNVVLZlVQeW5ndnd1N0NrY0RaREVBSUVtdGFlc090b3NCT0k4U3BwM3R2blVYc2hnZ2kyWGhCVmdhbHBBTlEyMmJ5UUFhWnFldkd1aXJNYk1ZUUpKVW4zeisvR3FWekJuQloxbGlLUE9IbEtSaEg5dXliMDFWSlRNK1FWKzFpTDRhS29zQmtPN1BXRjZ5b2hva3FVMm5yL1NWTEFhUXVmL2ZrMlRaN1FCSkdpZVhqQkJSa3MwUEl2cXFnYjRhTklzQjlrNG1xOXZybEVITHVkenZrdzFmM2taZkxVUmY5V2N4QUFBQXVBTXJtVk5CRlBnNldBQUFBQUJKUlU1RXJrSmdnZz09

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 172
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 171
NextSibling : 173
NodeValue : == CiAgICA=
TextContent : == CiAgICA=
ChildNodes : 0 : 
PreviousElementSibling : 171
NextElementSibling : 173
Data : == CiAgICA=
Length : 5
WholeText : == CiAgICA=

NodeId : 173
NodeType : 1
NodeName : TEMPLATE
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 172
NextSibling : 174
NodeValue : === null
TextContent : === empty
ChildNodes : 0 : 
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 171
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : template
TagName : TEMPLATE
Id : audio-resources
ClassName : === empty
ClassList : 0 : 
Attributes : 2

NamespaceURI : === null
Prefix : === null
LocalName : id
Name : id
Value : audio-resources

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 174
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 167
ParentElement : 167
FirstChild : null 
LastChild : null 
PreviousSibling : 173
NextSibling : null 
NodeValue : == CiAg
TextContent : == CiAg
ChildNodes : 0 : 
PreviousElementSibling : 173
NextElementSibling : null 
Data : == CiAg
Length : 3
WholeText : == CiAg

NodeId : 175
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : null 
LastChild : null 
PreviousSibling : 167
NextSibling : 176
NodeValue : == CgoK
TextContent : == CgoK
ChildNodes : 0 : 
PreviousElementSibling : 167
NextElementSibling : 176
Data : == CgoK
Length : 3
WholeText : == CgoK

NodeId : 176
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 177
LastChild : 177
PreviousSibling : 175
NextSibling : 178
NodeValue : === null
TextContent : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwo=
ChildNodes : 1 : 177
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 167
NextElementSibling : 178
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 177
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 176
ParentElement : 176
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwo=
TextContent : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwo=
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwo=
Length : 5126
WholeText : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovKioKICogQGZpbGVvdmVydmlldyBUaGlzIGZpbGUgZGVmaW5lcyBhIHNpbmdsZXRvbiB3aGljaCBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGRhdGEKICogdGhhdCBpcyBhdmFpbGFibGUgYXMgc29vbiBhcyB0aGUgcGFnZSdzIHJlc291cmNlcyBhcmUgbG9hZGVkIChiZWZvcmUgRE9NCiAqIGNvbnRlbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmcpLiBUaGlzIGRhdGEgaW5jbHVkZXMgYm90aCBsb2NhbGl6ZWQgc3RyaW5ncyBhbmQKICogYW55IGRhdGEgdGhhdCBpcyBpbXBvcnRhbnQgdG8gaGF2ZSByZWFkeSBmcm9tIGEgdmVyeSBlYXJseSBzdGFnZSAoZS5nLiB0aGluZ3MKICogdGhhdCBtdXN0IGJlIGRpc3BsYXllZCByaWdodCBhd2F5KS4KICovCgovKiogQHR5cGUgeyFMb2FkVGltZURhdGF9ICovIHZhciBsb2FkVGltZURhdGE7CgovLyBFeHBvc2UgdGhpcyB0eXBlIGdsb2JhbGx5IGFzIGEgdGVtcG9yYXJ5IHdvcmsgYXJvdW5kIHVudGlsCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1jb21waWxlci9pc3N1ZXMvNTQ0IGlzIGZpeGVkLgovKiogQGNvbnN0cnVjdG9yICovCmZ1bmN0aW9uIExvYWRUaW1lRGF0YSgpe30KCihmdW5jdGlvbigpIHsKICAndXNlIHN0cmljdCc7CgogIExvYWRUaW1lRGF0YS5wcm90b3R5cGUgPSB7CiAgICAvKioKICAgICAqIFNldHMgdGhlIGJhY2tpbmcgb2JqZWN0LgogICAgICoKICAgICAqIE5vdGUgdGhhdCB0aGVyZSBpcyBubyBnZXR0ZXIgZm9yIHxkYXRhX3wgdG8gZGlzY291cmFnZSBhYnVzZSBvZiB0aGUgZm9ybToKICAgICAqCiAgICAgKiAgICAgdmFyIHZhbHVlID0gbG9hZFRpbWVEYXRhLmRhdGEoKVsna2V5J107CiAgICAgKgogICAgICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBkZS1zZXJpYWxpemVkIHBhZ2UgZGF0YS4KICAgICAqLwogICAgc2V0IGRhdGEodmFsdWUpIHsKICAgICAgZXhwZWN0KCF0aGlzLmRhdGFfLCAnUmUtc2V0dGluZyBkYXRhLicpOwogICAgICB0aGlzLmRhdGFfID0gdmFsdWU7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIEpzRXZhbENvbnRleHQgZm9yIHxkYXRhX3wuCiAgICAgKiBAcmV0dXJucyB7SnNFdmFsQ29udGV4dH0KICAgICAqLwogICAgY3JlYXRlSnNFdmFsQ29udGV4dDogZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBuZXcgSnNFdmFsQ29udGV4dCh0aGlzLmRhdGFfKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgQW4gSUQgb2YgYSB2YWx1ZSB0aGF0IG1pZ2h0IGV4aXN0LgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB8aWR8IGlzIGEga2V5IGluIHRoZSBkaWN0aW9uYXJ5LgogICAgICovCiAgICB2YWx1ZUV4aXN0czogZnVuY3Rpb24oaWQpIHsKICAgICAgcmV0dXJuIGlkIGluIHRoaXMuZGF0YV87CiAgICB9LAoKICAgIC8qKgogICAgICogRmV0Y2hlcyBhIHZhbHVlLCBleHBlY3RpbmcgdGhhdCBpdCBleGlzdHMuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIGRlc2lyZWQgdmFsdWUuCiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGlkKSB7CiAgICAgIGV4cGVjdCh0aGlzLmRhdGFfLCAnTm8gZGF0YS4gRGlkIHlvdSByZW1lbWJlciB0byBpbmNsdWRlIHN0cmluZ3MuanM/Jyk7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZGF0YV9baWRdOwogICAgICBleHBlY3QodHlwZW9mIHZhbHVlICE9ICd1bmRlZmluZWQnLCAnQ291bGQgbm90IGZpbmQgdmFsdWUgZm9yICcgKyBpZCk7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBBcyBhYm92ZSwgYnV0IGFsc28gbWFrZXMgc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBhIHN0cmluZy4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBzdHJpbmcuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBjb3JyZXNwb25kaW5nIHN0cmluZyB2YWx1ZS4KICAgICAqLwogICAgZ2V0U3RyaW5nOiBmdW5jdGlvbihpZCkgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFZhbHVlKGlkKTsKICAgICAgZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgJ3N0cmluZycpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtzdHJpbmd9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogUmV0dXJucyBhIGZvcm1hdHRlZCBsb2NhbGl6ZWQgc3RyaW5nIHdoZXJlICQxIHRvICQ5IGFyZSByZXBsYWNlZCBieSB0aGUKICAgICAqIHNlY29uZCB0byB0aGUgdGVudGggYXJndW1lbnQuCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzdHJpbmcgd2Ugd2FudC4KICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xudW1iZXIpfSB2YXJfYXJncyBUaGUgZXh0cmEgdmFsdWVzIHRvIGluY2x1ZGUgaW4gdGhlCiAgICAgKiAgICAgZm9ybWF0dGVkIG91dHB1dC4KICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBzdHJpbmcuCiAgICAgKi8KICAgIGdldFN0cmluZ0Y6IGZ1bmN0aW9uKGlkLCB2YXJfYXJncykgewogICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldFN0cmluZyhpZCk7CiAgICAgIGlmICghdmFsdWUpCiAgICAgICAgcmV0dXJuICcnOwoKICAgICAgdmFyIHZhckFyZ3MgPSBhcmd1bWVudHM7CiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cJFskMS05XS9nLCBmdW5jdGlvbihtKSB7CiAgICAgICAgcmV0dXJuIG0gPT0gJyQkJyA/ICckJyA6IHZhckFyZ3NbbVsxXV07CiAgICAgIH0pOwogICAgfSwKCiAgICAvKioKICAgICAqIEFzIGFib3ZlLCBidXQgYWxzbyBtYWtlcyBzdXJlIHRoYXQgdGhlIHZhbHVlIGlzIGEgYm9vbGVhbi4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBib29sZWFuLgogICAgICogQHJldHVybiB7Ym9vbGVhbn0gVGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiB2YWx1ZS4KICAgICAqLwogICAgZ2V0Qm9vbGVhbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdib29sZWFuJyk7CiAgICAgIHJldHVybiAvKiogQHR5cGUge2Jvb2xlYW59ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogQXMgYWJvdmUsIGJ1dCBhbHNvIG1ha2VzIHN1cmUgdGhhdCB0aGUgdmFsdWUgaXMgYW4gaW50ZWdlci4KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgZGVzaXJlZCBudW1iZXIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb3JyZXNwb25kaW5nIG51bWJlciB2YWx1ZS4KICAgICAqLwogICAgZ2V0SW50ZWdlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShpZCk7CiAgICAgIGV4cGVjdElzVHlwZShpZCwgdmFsdWUsICdudW1iZXInKTsKICAgICAgZXhwZWN0KHZhbHVlID09IE1hdGguZmxvb3IodmFsdWUpLCAnTnVtYmVyIGlzblwndCBpbnRlZ2VyOiAnICsgdmFsdWUpOwogICAgICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovICh2YWx1ZSk7CiAgICB9LAoKICAgIC8qKgogICAgICogT3ZlcnJpZGUgdmFsdWVzIGluIGxvYWRUaW1lRGF0YSB3aXRoIHRoZSB2YWx1ZXMgZm91bmQgaW4gfHJlcGxhY2VtZW50c3wuCiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVwbGFjZW1lbnRzIFRoZSBkaWN0aW9uYXJ5IG9iamVjdCBvZiBrZXlzIHRvIHJlcGxhY2UuCiAgICAgKi8KICAgIG92ZXJyaWRlVmFsdWVzOiBmdW5jdGlvbihyZXBsYWNlbWVudHMpIHsKICAgICAgZXhwZWN0KAogICAgICAgICAgdHlwZW9mIHJlcGxhY2VtZW50cyA9PSAnb2JqZWN0JywKICAgICAgICAgICdSZXBsYWNlbWVudHMgbXVzdCBiZSBhIGRpY3Rpb25hcnkgb2JqZWN0LicpOwogICAgICBmb3IgKHZhciBrZXkgaW4gcmVwbGFjZW1lbnRzKSB7CiAgICAgICAgdGhpcy5kYXRhX1trZXldID0gcmVwbGFjZW1lbnRzW2tleV07CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBDaGVja3MgY29uZGl0aW9uLCBkaXNwbGF5cyBlcnJvciBtZXNzYWdlIGlmIGV4cGVjdGF0aW9uIGZhaWxzLgogICAqIEBwYXJhbSB7Kn0gY29uZGl0aW9uIFRoZSBjb25kaXRpb24gdG8gY2hlY2sgZm9yIHRydXRoaW5lc3MuCiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgY2hlY2sgZmFpbHMuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0KGNvbmRpdGlvbiwgbWVzc2FnZSkgewogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICdVbmV4cGVjdGVkIGNvbmRpdGlvbiBvbiAnICsgZG9jdW1lbnQubG9jYXRpb24uaHJlZiArICc6ICcgKyBtZXNzYWdlKTsKICAgIH0KICB9CgogIC8qKgogICAqIENoZWNrcyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBoYXMgdGhlIGdpdmVuIHR5cGUuCiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZCBvZiB0aGUgdmFsdWUgKG9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZSkuCiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgdGhlIHR5cGUgb24uCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgd2UgZXhwZWN0IHx2YWx1ZXwgdG8gYmUuCiAgICovCiAgZnVuY3Rpb24gZXhwZWN0SXNUeXBlKGlkLCB2YWx1ZSwgdHlwZSkgewogICAgZXhwZWN0KAogICAgICAgIHR5cGVvZiB2YWx1ZSA9PSB0eXBlLCAnWycgKyB2YWx1ZSArICddICgnICsgaWQgKyAnKSBpcyBub3QgYSAnICsgdHlwZSk7CiAgfQoKICBleHBlY3QoIWxvYWRUaW1lRGF0YSwgJ3Nob3VsZCBvbmx5IGluY2x1ZGUgdGhpcyBmaWxlIG9uY2UnKTsKICBsb2FkVGltZURhdGEgPSBuZXcgTG9hZFRpbWVEYXRhOwp9KSgpOwo=

NodeId : 178
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 179
LastChild : 179
PreviousSibling : 176
NextSibling : 180
NodeValue : === null
TextContent : == bG9hZFRpbWVEYXRhLmRhdGEgPSB7ImRldGFpbHMiOiJEZXRhaWxzIiwiZXJyb3JDb2RlIjoiRE5TX1BST0JFX1BPU1NJQkxFIiwiZm9udGZhbWlseSI6IidTZWdvZSBVSScsIFRhaG9tYSwgc2Fucy1zZXJpZiIsImZvbnRzaXplIjoiNzUlIiwiaGVhZGluZyI6eyJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6IlRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQifSwiaGlkZURldGFpbHMiOiJIaWRlIGRldGFpbHMiLCJpY29uQ2xhc3MiOiJpY29uLWdlbmVyaWMiLCJsYW5ndWFnZSI6ImVuIiwicmVsb2FkQnV0dG9uIjp7Im1zZyI6IlJlbG9hZCIsInJlbG9hZFRyYWNraW5nSWQiOi0xLCJyZWxvYWRVcmwiOiJodHRwczovL21vYmlsZS50d2l0dGVyLmNvbS9pL25vanNfcm91dGVyP3BhdGg9JTJGYW1hem9uIn0sInN1Z2dlc3Rpb25zRGV0YWlscyI6W10sInN1Z2dlc3Rpb25zU3VtbWFyeUxpc3QiOltdLCJzdW1tYXJ5Ijp7ImRuc0RlZmluaXRpb24iOiJETlMgaXMgdGhlIG5ldHdvcmsgc2VydmljZSB0aGF0IHRyYW5zbGF0ZXMgYSB3ZWJzaXRl4oCZcyBuYW1lIHRvIGl0cyBJbnRlcm5ldCBhZGRyZXNzLiIsImZhaWxlZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24iLCJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6Ilx1MDAzQ3N0cm9uZyBqc2NvbnRlbnQ9XCJob3N0TmFtZVwiPlx1MDAzQy9zdHJvbmc+4oCZcyBcdTAwM0NhYmJyIGlkPVwiZG5zRGVmaW5pdGlvblwiPkROUyBhZGRyZXNzXHUwMDNDL2FiYnI+IGNvdWxkIG5vdCBiZSBmb3VuZC4gRGlhZ25vc2luZyB0aGUgcHJvYmxlbS4ifSwidGV4dGRpcmVjdGlvbiI6Imx0ciIsInRpdGxlIjoibW9iaWxlLnR3aXR0ZXIuY29tIn07
ChildNodes : 1 : 179
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 176
NextElementSibling : 180
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 179
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 178
ParentElement : 178
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == bG9hZFRpbWVEYXRhLmRhdGEgPSB7ImRldGFpbHMiOiJEZXRhaWxzIiwiZXJyb3JDb2RlIjoiRE5TX1BST0JFX1BPU1NJQkxFIiwiZm9udGZhbWlseSI6IidTZWdvZSBVSScsIFRhaG9tYSwgc2Fucy1zZXJpZiIsImZvbnRzaXplIjoiNzUlIiwiaGVhZGluZyI6eyJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6IlRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQifSwiaGlkZURldGFpbHMiOiJIaWRlIGRldGFpbHMiLCJpY29uQ2xhc3MiOiJpY29uLWdlbmVyaWMiLCJsYW5ndWFnZSI6ImVuIiwicmVsb2FkQnV0dG9uIjp7Im1zZyI6IlJlbG9hZCIsInJlbG9hZFRyYWNraW5nSWQiOi0xLCJyZWxvYWRVcmwiOiJodHRwczovL21vYmlsZS50d2l0dGVyLmNvbS9pL25vanNfcm91dGVyP3BhdGg9JTJGYW1hem9uIn0sInN1Z2dlc3Rpb25zRGV0YWlscyI6W10sInN1Z2dlc3Rpb25zU3VtbWFyeUxpc3QiOltdLCJzdW1tYXJ5Ijp7ImRuc0RlZmluaXRpb24iOiJETlMgaXMgdGhlIG5ldHdvcmsgc2VydmljZSB0aGF0IHRyYW5zbGF0ZXMgYSB3ZWJzaXRl4oCZcyBuYW1lIHRvIGl0cyBJbnRlcm5ldCBhZGRyZXNzLiIsImZhaWxlZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24iLCJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6Ilx1MDAzQ3N0cm9uZyBqc2NvbnRlbnQ9XCJob3N0TmFtZVwiPlx1MDAzQy9zdHJvbmc+4oCZcyBcdTAwM0NhYmJyIGlkPVwiZG5zRGVmaW5pdGlvblwiPkROUyBhZGRyZXNzXHUwMDNDL2FiYnI+IGNvdWxkIG5vdCBiZSBmb3VuZC4gRGlhZ25vc2luZyB0aGUgcHJvYmxlbS4ifSwidGV4dGRpcmVjdGlvbiI6Imx0ciIsInRpdGxlIjoibW9iaWxlLnR3aXR0ZXIuY29tIn07
TextContent : == bG9hZFRpbWVEYXRhLmRhdGEgPSB7ImRldGFpbHMiOiJEZXRhaWxzIiwiZXJyb3JDb2RlIjoiRE5TX1BST0JFX1BPU1NJQkxFIiwiZm9udGZhbWlseSI6IidTZWdvZSBVSScsIFRhaG9tYSwgc2Fucy1zZXJpZiIsImZvbnRzaXplIjoiNzUlIiwiaGVhZGluZyI6eyJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6IlRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQifSwiaGlkZURldGFpbHMiOiJIaWRlIGRldGFpbHMiLCJpY29uQ2xhc3MiOiJpY29uLWdlbmVyaWMiLCJsYW5ndWFnZSI6ImVuIiwicmVsb2FkQnV0dG9uIjp7Im1zZyI6IlJlbG9hZCIsInJlbG9hZFRyYWNraW5nSWQiOi0xLCJyZWxvYWRVcmwiOiJodHRwczovL21vYmlsZS50d2l0dGVyLmNvbS9pL25vanNfcm91dGVyP3BhdGg9JTJGYW1hem9uIn0sInN1Z2dlc3Rpb25zRGV0YWlscyI6W10sInN1Z2dlc3Rpb25zU3VtbWFyeUxpc3QiOltdLCJzdW1tYXJ5Ijp7ImRuc0RlZmluaXRpb24iOiJETlMgaXMgdGhlIG5ldHdvcmsgc2VydmljZSB0aGF0IHRyYW5zbGF0ZXMgYSB3ZWJzaXRl4oCZcyBuYW1lIHRvIGl0cyBJbnRlcm5ldCBhZGRyZXNzLiIsImZhaWxlZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24iLCJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6Ilx1MDAzQ3N0cm9uZyBqc2NvbnRlbnQ9XCJob3N0TmFtZVwiPlx1MDAzQy9zdHJvbmc+4oCZcyBcdTAwM0NhYmJyIGlkPVwiZG5zRGVmaW5pdGlvblwiPkROUyBhZGRyZXNzXHUwMDNDL2FiYnI+IGNvdWxkIG5vdCBiZSBmb3VuZC4gRGlhZ25vc2luZyB0aGUgcHJvYmxlbS4ifSwidGV4dGRpcmVjdGlvbiI6Imx0ciIsInRpdGxlIjoibW9iaWxlLnR3aXR0ZXIuY29tIn07
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == bG9hZFRpbWVEYXRhLmRhdGEgPSB7ImRldGFpbHMiOiJEZXRhaWxzIiwiZXJyb3JDb2RlIjoiRE5TX1BST0JFX1BPU1NJQkxFIiwiZm9udGZhbWlseSI6IidTZWdvZSBVSScsIFRhaG9tYSwgc2Fucy1zZXJpZiIsImZvbnRzaXplIjoiNzUlIiwiaGVhZGluZyI6eyJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6IlRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQifSwiaGlkZURldGFpbHMiOiJIaWRlIGRldGFpbHMiLCJpY29uQ2xhc3MiOiJpY29uLWdlbmVyaWMiLCJsYW5ndWFnZSI6ImVuIiwicmVsb2FkQnV0dG9uIjp7Im1zZyI6IlJlbG9hZCIsInJlbG9hZFRyYWNraW5nSWQiOi0xLCJyZWxvYWRVcmwiOiJodHRwczovL21vYmlsZS50d2l0dGVyLmNvbS9pL25vanNfcm91dGVyP3BhdGg9JTJGYW1hem9uIn0sInN1Z2dlc3Rpb25zRGV0YWlscyI6W10sInN1Z2dlc3Rpb25zU3VtbWFyeUxpc3QiOltdLCJzdW1tYXJ5Ijp7ImRuc0RlZmluaXRpb24iOiJETlMgaXMgdGhlIG5ldHdvcmsgc2VydmljZSB0aGF0IHRyYW5zbGF0ZXMgYSB3ZWJzaXRl4oCZcyBuYW1lIHRvIGl0cyBJbnRlcm5ldCBhZGRyZXNzLiIsImZhaWxlZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24iLCJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6Ilx1MDAzQ3N0cm9uZyBqc2NvbnRlbnQ9XCJob3N0TmFtZVwiPlx1MDAzQy9zdHJvbmc+4oCZcyBcdTAwM0NhYmJyIGlkPVwiZG5zRGVmaW5pdGlvblwiPkROUyBhZGRyZXNzXHUwMDNDL2FiYnI+IGNvdWxkIG5vdCBiZSBmb3VuZC4gRGlhZ25vc2luZyB0aGUgcHJvYmxlbS4ifSwidGV4dGRpcmVjdGlvbiI6Imx0ciIsInRpdGxlIjoibW9iaWxlLnR3aXR0ZXIuY29tIn07
Length : 894
WholeText : == bG9hZFRpbWVEYXRhLmRhdGEgPSB7ImRldGFpbHMiOiJEZXRhaWxzIiwiZXJyb3JDb2RlIjoiRE5TX1BST0JFX1BPU1NJQkxFIiwiZm9udGZhbWlseSI6IidTZWdvZSBVSScsIFRhaG9tYSwgc2Fucy1zZXJpZiIsImZvbnRzaXplIjoiNzUlIiwiaGVhZGluZyI6eyJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6IlRoaXMgc2l0ZSBjYW7igJl0IGJlIHJlYWNoZWQifSwiaGlkZURldGFpbHMiOiJIaWRlIGRldGFpbHMiLCJpY29uQ2xhc3MiOiJpY29uLWdlbmVyaWMiLCJsYW5ndWFnZSI6ImVuIiwicmVsb2FkQnV0dG9uIjp7Im1zZyI6IlJlbG9hZCIsInJlbG9hZFRyYWNraW5nSWQiOi0xLCJyZWxvYWRVcmwiOiJodHRwczovL21vYmlsZS50d2l0dGVyLmNvbS9pL25vanNfcm91dGVyP3BhdGg9JTJGYW1hem9uIn0sInN1Z2dlc3Rpb25zRGV0YWlscyI6W10sInN1Z2dlc3Rpb25zU3VtbWFyeUxpc3QiOltdLCJzdW1tYXJ5Ijp7ImRuc0RlZmluaXRpb24iOiJETlMgaXMgdGhlIG5ldHdvcmsgc2VydmljZSB0aGF0IHRyYW5zbGF0ZXMgYSB3ZWJzaXRl4oCZcyBuYW1lIHRvIGl0cyBJbnRlcm5ldCBhZGRyZXNzLiIsImZhaWxlZFVybCI6Imh0dHBzOi8vbW9iaWxlLnR3aXR0ZXIuY29tL2kvbm9qc19yb3V0ZXI/cGF0aD0lMkZhbWF6b24iLCJob3N0TmFtZSI6Im1vYmlsZS50d2l0dGVyLmNvbSIsIm1zZyI6Ilx1MDAzQ3N0cm9uZyBqc2NvbnRlbnQ9XCJob3N0TmFtZVwiPlx1MDAzQy9zdHJvbmc+4oCZcyBcdTAwM0NhYmJyIGlkPVwiZG5zRGVmaW5pdGlvblwiPkROUyBhZGRyZXNzXHUwMDNDL2FiYnI+IGNvdWxkIG5vdCBiZSBmb3VuZC4gRGlhZ25vc2luZyB0aGUgcHJvYmxlbS4ifSwidGV4dGRpcmVjdGlvbiI6Imx0ciIsInRpdGxlIjoibW9iaWxlLnR3aXR0ZXIuY29tIn07

NodeId : 180
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 181
LastChild : 181
PreviousSibling : 178
NextSibling : 182
NodeValue : === null
TextContent : == 
ChildNodes : 1 : 181
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 178
NextElementSibling : 182
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 181
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 180
ParentElement : 180
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == 
TextContent : == 
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == 
Length : 8277
WholeText : == 

NodeId : 182
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 183
LastChild : 183
PreviousSibling : 180
NextSibling : 184
NodeValue : === null
TextContent : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovLyBUaGlzIGZpbGUgc2VydmVzIGFzIGEgcHJveHkgdG8gYnJpbmcgdGhlIGluY2x1ZGVkIGpzIGZpbGUgZnJvbSAvdGhpcmRfcGFydHkKLy8gaW50byBpdHMgY29ycmVjdCBsb2NhdGlvbiB1bmRlciB0aGUgcmVzb3VyY2VzIGRpcmVjdG9yeSB0cmVlLCB3aGVuY2UgaXQgaXMKLy8gZGVsaXZlcmVkIHZpYSBhIGNocm9tZTovL3Jlc291cmNlcyBVUkwuICBTZWUgLi4vd2VidWlfcmVzb3VyY2VzLmdyZC4KCi8vIE5vdGU6IHRoaXMgPGluY2x1ZGU+IGlzIG5vdCBiZWhpbmQgYSBzaW5nbGUtbGluZSBjb21tZW50IGJlY2F1c2UgdGhlIGZpcnN0Ci8vIGxpbmUgb2YgdGhlIGZpbGUgaXMgc291cmNlIGNvZGUgKHNvIHRoZSBmaXJzdCBsaW5lIHdvdWxkIGJlIHNraXBwZWQpIGluc3RlYWQKLy8gb2YgYSBsaWNlbmNlIGhlYWRlci4KLy8gY2xhbmctZm9ybWF0IG9mZgooZnVuY3Rpb24oKXt2YXIgaT1udWxsO2Z1bmN0aW9uIGsoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNsaWNlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWsoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KGEsYyl9fWZ1bmN0aW9uIG0oYSxiKXt2YXIgYz1uZXcgbihiKTtmb3IoYy5mPVthXTtjLmYubGVuZ3RoOyl7dmFyIGU9YyxkPWMuZi5zaGlmdCgpO2UuZyhkKTtmb3IoZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpZC5ub2RlVHlwZT09MSYmZS5mLnB1c2goZCl9fWZ1bmN0aW9uIG4oYSl7dGhpcy5nPWF9ZnVuY3Rpb24gbyhhKXthLnN0eWxlLmRpc3BsYXk9IiJ9ZnVuY3Rpb24gcChhKXthLnN0eWxlLmRpc3BsYXk9Im5vbmUifTt2YXIgcT0iOiIscj0vXHMqO1xzKi87ZnVuY3Rpb24gcygpe3RoaXMuaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cy5wcm90b3R5cGUuaT1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEpdGhpcy5hPXt9O2lmKGIpe3ZhciBjPXRoaXMuYSxlPWIuYSxkO2ZvcihkIGluIGUpY1tkXT1lW2RdfWVsc2UgZm9yKGMgaW4gZD10aGlzLmEsZT10LGUpZFtjXT1lW2NdO3RoaXMuYS4kdGhpcz1hO3RoaXMuYS4kY29udGV4dD10aGlzO3RoaXMuZD10eXBlb2YgYSE9InVuZGVmaW5lZCImJmEhPWk/YToiIjtpZighYil0aGlzLmEuJHRvcD10aGlzLmR9O3ZhciB0PXskZGVmYXVsdDppfSx1PVtdO2Z1bmN0aW9uIHYoYSl7Zm9yKHZhciBiIGluIGEuYSlkZWxldGUgYS5hW2JdO2EuZD1pO3UucHVzaChhKX1mdW5jdGlvbiB3KGEsYixjKXt0cnl7cmV0dXJuIGIuY2FsbChjLGEuYSxhLmQpfWNhdGNoKGUpe3JldHVybiB0LiRkZWZhdWx0fX0KZnVuY3Rpb24geChhLGIsYyxlKXtpZih1Lmxlbmd0aD4wKXt2YXIgZD11LnBvcCgpO3MuY2FsbChkLGIsYSk7YT1kfWVsc2UgYT1uZXcgcyhiLGEpO2EuYS4kaW5kZXg9YzthLmEuJGNvdW50PWU7cmV0dXJuIGF9dmFyIHk9ImFfIix6PSJiXyIsQT0id2l0aCAoYV8pIHdpdGggKGJfKSByZXR1cm4gIixEPXt9O2Z1bmN0aW9uIEUoYSl7aWYoIURbYV0pdHJ5e0RbYV09bmV3IEZ1bmN0aW9uKHkseixBK2EpfWNhdGNoKGIpe31yZXR1cm4gRFthXX1mdW5jdGlvbiBGKGEpe2Zvcih2YXIgYj1bXSxhPWEuc3BsaXQociksYz0wLGU9YS5sZW5ndGg7YzxlOysrYyl7dmFyIGQ9YVtjXS5pbmRleE9mKHEpO2lmKCEoZDwwKSl7dmFyIGY7Zj1hW2NdLnN1YnN0cigwLGQpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIik7ZD1FKGFbY10uc3Vic3RyKGQrMSkpO2IucHVzaChmLGQpfX1yZXR1cm4gYn07dmFyIEc9ImpzaW5zdGFuY2UiLEg9ImpzdHMiLEk9IioiLEo9ImRpdiIsSz0iaWQiO2Z1bmN0aW9uIEwoKXt9dmFyIE09MCxOPXswOnt9fSxQPXt9LFE9e30sUj1bXTtmdW5jdGlvbiBTKGEpe2EuX19qc3RjYWNoZXx8bShhLGZ1bmN0aW9uKGEpe1QoYSl9KX12YXIgVT1bWyJqc3NlbGVjdCIsRV0sWyJqc2Rpc3BsYXkiLEVdLFsianN2YWx1ZXMiLEZdLFsianN2YXJzIixGXSxbImpzZXZhbCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKWlmKGFbY10pe3ZhciBkPUUoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifV0sWyJ0cmFuc2NsdWRlIixmdW5jdGlvbihhKXtyZXR1cm4gYX1dLFsianNjb250ZW50IixFXSxbImpzc2tpcCIsRV1dOwpmdW5jdGlvbiBUKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIhPWkpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO2Zvcih2YXIgYj1SLmxlbmd0aD0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGU9VVtiXVswXSxkPWEuZ2V0QXR0cmlidXRlKGUpO1FbZV09ZDtkIT1pJiZSLnB1c2goZSsiPSIrZCl9aWYoUi5sZW5ndGg9PTApcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsIjAiKSxhLl9fanN0Y2FjaGU9TlswXTt2YXIgZj1SLmpvaW4oIiYiKTtpZihiPVBbZl0pcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYiksYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBoPXt9LGI9MCxjPVUubGVuZ3RoO2I8YzsrK2Ipe3ZhciBkPVVbYl0sZT1kWzBdLGc9ZFsxXSxkPVFbZV07ZCE9aSYmKGhbZV09ZyhkKSl9Yj0iIisgKytNO2Euc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYik7TltiXT0KaDtQW2ZdPWI7cmV0dXJuIGEuX19qc3RjYWNoZT1ofWZ1bmN0aW9uIFYoYSxiKXthLmgucHVzaChiKTthLmsucHVzaCgwKX1mdW5jdGlvbiBXKGEpe3JldHVybiBhLmMubGVuZ3RoP2EuYy5wb3AoKTpbXX0KTC5wcm90b3R5cGUuZT1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLnRyYW5zY2x1ZGU7aWYoZSkoYz1ZKGUpKT8oYi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjLGIpLGU9Vyh0aGlzKSxlLnB1c2godGhpcy5lLGEsYyksVih0aGlzLGUpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBpZihjPWMuanNzZWxlY3Qpe3ZhciBjPXcoYSxjLGIpLGQ9Yi5nZXRBdHRyaWJ1dGUoRyksZj0hMTtkJiYoZC5jaGFyQXQoMCk9PUk/KGQ9cGFyc2VJbnQoZC5zdWJzdHIoMSksMTApLGY9ITApOmQ9cGFyc2VJbnQoZCwxMCkpO3ZhciBoPWMhPWkmJnR5cGVvZiBjPT0ib2JqZWN0IiYmdHlwZW9mIGMubGVuZ3RoPT0ibnVtYmVyIixlPWg/Yy5sZW5ndGg6MSxnPWgmJmU9PTA7aWYoaClpZihnKWQ/Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOihiLnNldEF0dHJpYnV0ZShHLCIqMCIpLHAoYikpO2Vsc2UgaWYobyhiKSxkPT09aXx8ZD09PSIifHxmJiZkPGUtMSl7Zj1XKHRoaXMpOwpkPWR8fDA7Zm9yKGg9ZS0xO2Q8aDsrK2Qpe3ZhciBqPWIuY2xvbmVOb2RlKCEwKTtiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosYik7WihqLGMsZCk7Zz14KGEsY1tkXSxkLGUpO2YucHVzaCh0aGlzLmIsZyxqLHYsZyxpKX1aKGIsYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGIsdixnLGkpO1YodGhpcyxmKX1lbHNlIGQ8ZT8oZj1jW2RdLFooYixjLGQpLGc9eChhLGYsZCxlKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSk6Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2Vsc2UgYz09aT9wKGIpOihvKGIpLGc9eChhLGMsMCwxKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSl9ZWxzZSB0aGlzLmIoYSxiKX07CkwucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YKGIpLGU9Yy5qc2Rpc3BsYXk7aWYoZSl7aWYoIXcoYSxlLGIpKXtwKGIpO3JldHVybn1vKGIpfWlmKGU9Yy5qc3ZhcnMpZm9yKHZhciBkPTAsZj1lLmxlbmd0aDtkPGY7ZCs9Mil7dmFyIGg9ZVtkXSxnPXcoYSxlW2QrMV0sYik7YS5hW2hdPWd9aWYoZT1jLmpzdmFsdWVzKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmO2QrPTIpaWYoZz1lW2RdLGg9dyhhLGVbZCsxXSxiKSxnLmNoYXJBdCgwKT09IiQiKWEuYVtnXT1oO2Vsc2UgaWYoZy5jaGFyQXQoMCk9PSIuIil7Zm9yKHZhciBnPWcuc3Vic3RyKDEpLnNwbGl0KCIuIiksaj1iLE89Zy5sZW5ndGgsQj0wLCQ9Ty0xO0I8JDsrK0Ipe3ZhciBDPWdbQl07altDXXx8KGpbQ109e30pO2o9altDXX1qW2dbTy0xXV09aH1lbHNlIGcmJih0eXBlb2YgaD09ImJvb2xlYW4iP2g/Yi5zZXRBdHRyaWJ1dGUoZyxnKTpiLnJlbW92ZUF0dHJpYnV0ZShnKTpiLnNldEF0dHJpYnV0ZShnLCIiKwpoKSl9aWYoZT1jLmpzZXZhbCl7ZD0wO2ZvcihmPWUubGVuZ3RoO2Q8ZjsrK2QpdyhhLGVbZF0sYil9ZT1jLmpzc2tpcDtpZighZXx8IXcoYSxlLGIpKWlmKGM9Yy5qc2NvbnRlbnQpe2lmKGM9IiIrdyhhLGMsYiksYi5pbm5lckhUTUwhPWMpe2Zvcig7Yi5maXJzdENoaWxkOyllPWIuZmlyc3RDaGlsZCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yi5hcHBlbmRDaGlsZCh0aGlzLmouY3JlYXRlVGV4dE5vZGUoYykpfX1lbHNle2M9Vyh0aGlzKTtmb3IoZT1iLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpZS5ub2RlVHlwZT09MSYmYy5wdXNoKHRoaXMuZSxhLGUpO2MubGVuZ3RoJiZWKHRoaXMsYyl9fTtmdW5jdGlvbiBYKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO3JldHVybiBUKGEpfQpmdW5jdGlvbiBZKGEsYil7dmFyIGM9ZG9jdW1lbnQ7aWYoYil7dmFyIGU9Yy5nZXRFbGVtZW50QnlJZChhKTtpZighZSl7dmFyIGU9YigpLGQ9SCxmPWMuZ2V0RWxlbWVudEJ5SWQoZCk7aWYoIWYpZj1jLmNyZWF0ZUVsZW1lbnQoSiksZi5pZD1kLHAoZiksZi5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGMuYm9keS5hcHBlbmRDaGlsZChmKTtkPWMuY3JlYXRlRWxlbWVudChKKTtmLmFwcGVuZENoaWxkKGQpO2QuaW5uZXJIVE1MPWU7ZT1jLmdldEVsZW1lbnRCeUlkKGEpfWM9ZX1lbHNlIGM9Yy5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz8oUyhjKSxjPWMuY2xvbmVOb2RlKCEwKSxjLnJlbW92ZUF0dHJpYnV0ZShLKSxjKTppfWZ1bmN0aW9uIFooYSxiLGMpe2M9PWIubGVuZ3RoLTE/YS5zZXRBdHRyaWJ1dGUoRyxJK2MpOmEuc2V0QXR0cmlidXRlKEcsIiIrYyl9O3dpbmRvdy5qc3RHZXRUZW1wbGF0ZT1ZO3dpbmRvdy5Kc0V2YWxDb250ZXh0PXM7d2luZG93LmpzdFByb2Nlc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgTDtTKGIpO2Muaj1iP2Iubm9kZVR5cGU9PTk/YjpiLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50OmRvY3VtZW50O3ZhciBlPWwoYyxjLmUsYSxiKSxkPWMuaD1bXSxmPWMuaz1bXTtjLmM9W107ZSgpO2Zvcih2YXIgaCxnLGo7ZC5sZW5ndGg7KWg9ZFtkLmxlbmd0aC0xXSxlPWZbZi5sZW5ndGgtMV0sZT49aC5sZW5ndGg/KGU9YyxnPWQucG9wKCksZy5sZW5ndGg9MCxlLmMucHVzaChnKSxmLnBvcCgpKTooZz1oW2UrK10saj1oW2UrK10saD1oW2UrK10sZltmLmxlbmd0aC0xXT1lLGcuY2FsbChjLGosaCkpfTsKfSkoKQovLyBjbGFuZy1mb3JtYXQgb24K
ChildNodes : 1 : 183
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 180
NextElementSibling : 184
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 183
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 182
ParentElement : 182
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovLyBUaGlzIGZpbGUgc2VydmVzIGFzIGEgcHJveHkgdG8gYnJpbmcgdGhlIGluY2x1ZGVkIGpzIGZpbGUgZnJvbSAvdGhpcmRfcGFydHkKLy8gaW50byBpdHMgY29ycmVjdCBsb2NhdGlvbiB1bmRlciB0aGUgcmVzb3VyY2VzIGRpcmVjdG9yeSB0cmVlLCB3aGVuY2UgaXQgaXMKLy8gZGVsaXZlcmVkIHZpYSBhIGNocm9tZTovL3Jlc291cmNlcyBVUkwuICBTZWUgLi4vd2VidWlfcmVzb3VyY2VzLmdyZC4KCi8vIE5vdGU6IHRoaXMgPGluY2x1ZGU+IGlzIG5vdCBiZWhpbmQgYSBzaW5nbGUtbGluZSBjb21tZW50IGJlY2F1c2UgdGhlIGZpcnN0Ci8vIGxpbmUgb2YgdGhlIGZpbGUgaXMgc291cmNlIGNvZGUgKHNvIHRoZSBmaXJzdCBsaW5lIHdvdWxkIGJlIHNraXBwZWQpIGluc3RlYWQKLy8gb2YgYSBsaWNlbmNlIGhlYWRlci4KLy8gY2xhbmctZm9ybWF0IG9mZgooZnVuY3Rpb24oKXt2YXIgaT1udWxsO2Z1bmN0aW9uIGsoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNsaWNlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWsoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KGEsYyl9fWZ1bmN0aW9uIG0oYSxiKXt2YXIgYz1uZXcgbihiKTtmb3IoYy5mPVthXTtjLmYubGVuZ3RoOyl7dmFyIGU9YyxkPWMuZi5zaGlmdCgpO2UuZyhkKTtmb3IoZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpZC5ub2RlVHlwZT09MSYmZS5mLnB1c2goZCl9fWZ1bmN0aW9uIG4oYSl7dGhpcy5nPWF9ZnVuY3Rpb24gbyhhKXthLnN0eWxlLmRpc3BsYXk9IiJ9ZnVuY3Rpb24gcChhKXthLnN0eWxlLmRpc3BsYXk9Im5vbmUifTt2YXIgcT0iOiIscj0vXHMqO1xzKi87ZnVuY3Rpb24gcygpe3RoaXMuaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cy5wcm90b3R5cGUuaT1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEpdGhpcy5hPXt9O2lmKGIpe3ZhciBjPXRoaXMuYSxlPWIuYSxkO2ZvcihkIGluIGUpY1tkXT1lW2RdfWVsc2UgZm9yKGMgaW4gZD10aGlzLmEsZT10LGUpZFtjXT1lW2NdO3RoaXMuYS4kdGhpcz1hO3RoaXMuYS4kY29udGV4dD10aGlzO3RoaXMuZD10eXBlb2YgYSE9InVuZGVmaW5lZCImJmEhPWk/YToiIjtpZighYil0aGlzLmEuJHRvcD10aGlzLmR9O3ZhciB0PXskZGVmYXVsdDppfSx1PVtdO2Z1bmN0aW9uIHYoYSl7Zm9yKHZhciBiIGluIGEuYSlkZWxldGUgYS5hW2JdO2EuZD1pO3UucHVzaChhKX1mdW5jdGlvbiB3KGEsYixjKXt0cnl7cmV0dXJuIGIuY2FsbChjLGEuYSxhLmQpfWNhdGNoKGUpe3JldHVybiB0LiRkZWZhdWx0fX0KZnVuY3Rpb24geChhLGIsYyxlKXtpZih1Lmxlbmd0aD4wKXt2YXIgZD11LnBvcCgpO3MuY2FsbChkLGIsYSk7YT1kfWVsc2UgYT1uZXcgcyhiLGEpO2EuYS4kaW5kZXg9YzthLmEuJGNvdW50PWU7cmV0dXJuIGF9dmFyIHk9ImFfIix6PSJiXyIsQT0id2l0aCAoYV8pIHdpdGggKGJfKSByZXR1cm4gIixEPXt9O2Z1bmN0aW9uIEUoYSl7aWYoIURbYV0pdHJ5e0RbYV09bmV3IEZ1bmN0aW9uKHkseixBK2EpfWNhdGNoKGIpe31yZXR1cm4gRFthXX1mdW5jdGlvbiBGKGEpe2Zvcih2YXIgYj1bXSxhPWEuc3BsaXQociksYz0wLGU9YS5sZW5ndGg7YzxlOysrYyl7dmFyIGQ9YVtjXS5pbmRleE9mKHEpO2lmKCEoZDwwKSl7dmFyIGY7Zj1hW2NdLnN1YnN0cigwLGQpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIik7ZD1FKGFbY10uc3Vic3RyKGQrMSkpO2IucHVzaChmLGQpfX1yZXR1cm4gYn07dmFyIEc9ImpzaW5zdGFuY2UiLEg9ImpzdHMiLEk9IioiLEo9ImRpdiIsSz0iaWQiO2Z1bmN0aW9uIEwoKXt9dmFyIE09MCxOPXswOnt9fSxQPXt9LFE9e30sUj1bXTtmdW5jdGlvbiBTKGEpe2EuX19qc3RjYWNoZXx8bShhLGZ1bmN0aW9uKGEpe1QoYSl9KX12YXIgVT1bWyJqc3NlbGVjdCIsRV0sWyJqc2Rpc3BsYXkiLEVdLFsianN2YWx1ZXMiLEZdLFsianN2YXJzIixGXSxbImpzZXZhbCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKWlmKGFbY10pe3ZhciBkPUUoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifV0sWyJ0cmFuc2NsdWRlIixmdW5jdGlvbihhKXtyZXR1cm4gYX1dLFsianNjb250ZW50IixFXSxbImpzc2tpcCIsRV1dOwpmdW5jdGlvbiBUKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIhPWkpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO2Zvcih2YXIgYj1SLmxlbmd0aD0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGU9VVtiXVswXSxkPWEuZ2V0QXR0cmlidXRlKGUpO1FbZV09ZDtkIT1pJiZSLnB1c2goZSsiPSIrZCl9aWYoUi5sZW5ndGg9PTApcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsIjAiKSxhLl9fanN0Y2FjaGU9TlswXTt2YXIgZj1SLmpvaW4oIiYiKTtpZihiPVBbZl0pcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYiksYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBoPXt9LGI9MCxjPVUubGVuZ3RoO2I8YzsrK2Ipe3ZhciBkPVVbYl0sZT1kWzBdLGc9ZFsxXSxkPVFbZV07ZCE9aSYmKGhbZV09ZyhkKSl9Yj0iIisgKytNO2Euc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYik7TltiXT0KaDtQW2ZdPWI7cmV0dXJuIGEuX19qc3RjYWNoZT1ofWZ1bmN0aW9uIFYoYSxiKXthLmgucHVzaChiKTthLmsucHVzaCgwKX1mdW5jdGlvbiBXKGEpe3JldHVybiBhLmMubGVuZ3RoP2EuYy5wb3AoKTpbXX0KTC5wcm90b3R5cGUuZT1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLnRyYW5zY2x1ZGU7aWYoZSkoYz1ZKGUpKT8oYi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjLGIpLGU9Vyh0aGlzKSxlLnB1c2godGhpcy5lLGEsYyksVih0aGlzLGUpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBpZihjPWMuanNzZWxlY3Qpe3ZhciBjPXcoYSxjLGIpLGQ9Yi5nZXRBdHRyaWJ1dGUoRyksZj0hMTtkJiYoZC5jaGFyQXQoMCk9PUk/KGQ9cGFyc2VJbnQoZC5zdWJzdHIoMSksMTApLGY9ITApOmQ9cGFyc2VJbnQoZCwxMCkpO3ZhciBoPWMhPWkmJnR5cGVvZiBjPT0ib2JqZWN0IiYmdHlwZW9mIGMubGVuZ3RoPT0ibnVtYmVyIixlPWg/Yy5sZW5ndGg6MSxnPWgmJmU9PTA7aWYoaClpZihnKWQ/Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOihiLnNldEF0dHJpYnV0ZShHLCIqMCIpLHAoYikpO2Vsc2UgaWYobyhiKSxkPT09aXx8ZD09PSIifHxmJiZkPGUtMSl7Zj1XKHRoaXMpOwpkPWR8fDA7Zm9yKGg9ZS0xO2Q8aDsrK2Qpe3ZhciBqPWIuY2xvbmVOb2RlKCEwKTtiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosYik7WihqLGMsZCk7Zz14KGEsY1tkXSxkLGUpO2YucHVzaCh0aGlzLmIsZyxqLHYsZyxpKX1aKGIsYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGIsdixnLGkpO1YodGhpcyxmKX1lbHNlIGQ8ZT8oZj1jW2RdLFooYixjLGQpLGc9eChhLGYsZCxlKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSk6Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2Vsc2UgYz09aT9wKGIpOihvKGIpLGc9eChhLGMsMCwxKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSl9ZWxzZSB0aGlzLmIoYSxiKX07CkwucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YKGIpLGU9Yy5qc2Rpc3BsYXk7aWYoZSl7aWYoIXcoYSxlLGIpKXtwKGIpO3JldHVybn1vKGIpfWlmKGU9Yy5qc3ZhcnMpZm9yKHZhciBkPTAsZj1lLmxlbmd0aDtkPGY7ZCs9Mil7dmFyIGg9ZVtkXSxnPXcoYSxlW2QrMV0sYik7YS5hW2hdPWd9aWYoZT1jLmpzdmFsdWVzKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmO2QrPTIpaWYoZz1lW2RdLGg9dyhhLGVbZCsxXSxiKSxnLmNoYXJBdCgwKT09IiQiKWEuYVtnXT1oO2Vsc2UgaWYoZy5jaGFyQXQoMCk9PSIuIil7Zm9yKHZhciBnPWcuc3Vic3RyKDEpLnNwbGl0KCIuIiksaj1iLE89Zy5sZW5ndGgsQj0wLCQ9Ty0xO0I8JDsrK0Ipe3ZhciBDPWdbQl07altDXXx8KGpbQ109e30pO2o9altDXX1qW2dbTy0xXV09aH1lbHNlIGcmJih0eXBlb2YgaD09ImJvb2xlYW4iP2g/Yi5zZXRBdHRyaWJ1dGUoZyxnKTpiLnJlbW92ZUF0dHJpYnV0ZShnKTpiLnNldEF0dHJpYnV0ZShnLCIiKwpoKSl9aWYoZT1jLmpzZXZhbCl7ZD0wO2ZvcihmPWUubGVuZ3RoO2Q8ZjsrK2QpdyhhLGVbZF0sYil9ZT1jLmpzc2tpcDtpZighZXx8IXcoYSxlLGIpKWlmKGM9Yy5qc2NvbnRlbnQpe2lmKGM9IiIrdyhhLGMsYiksYi5pbm5lckhUTUwhPWMpe2Zvcig7Yi5maXJzdENoaWxkOyllPWIuZmlyc3RDaGlsZCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yi5hcHBlbmRDaGlsZCh0aGlzLmouY3JlYXRlVGV4dE5vZGUoYykpfX1lbHNle2M9Vyh0aGlzKTtmb3IoZT1iLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpZS5ub2RlVHlwZT09MSYmYy5wdXNoKHRoaXMuZSxhLGUpO2MubGVuZ3RoJiZWKHRoaXMsYyl9fTtmdW5jdGlvbiBYKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO3JldHVybiBUKGEpfQpmdW5jdGlvbiBZKGEsYil7dmFyIGM9ZG9jdW1lbnQ7aWYoYil7dmFyIGU9Yy5nZXRFbGVtZW50QnlJZChhKTtpZighZSl7dmFyIGU9YigpLGQ9SCxmPWMuZ2V0RWxlbWVudEJ5SWQoZCk7aWYoIWYpZj1jLmNyZWF0ZUVsZW1lbnQoSiksZi5pZD1kLHAoZiksZi5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGMuYm9keS5hcHBlbmRDaGlsZChmKTtkPWMuY3JlYXRlRWxlbWVudChKKTtmLmFwcGVuZENoaWxkKGQpO2QuaW5uZXJIVE1MPWU7ZT1jLmdldEVsZW1lbnRCeUlkKGEpfWM9ZX1lbHNlIGM9Yy5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz8oUyhjKSxjPWMuY2xvbmVOb2RlKCEwKSxjLnJlbW92ZUF0dHJpYnV0ZShLKSxjKTppfWZ1bmN0aW9uIFooYSxiLGMpe2M9PWIubGVuZ3RoLTE/YS5zZXRBdHRyaWJ1dGUoRyxJK2MpOmEuc2V0QXR0cmlidXRlKEcsIiIrYyl9O3dpbmRvdy5qc3RHZXRUZW1wbGF0ZT1ZO3dpbmRvdy5Kc0V2YWxDb250ZXh0PXM7d2luZG93LmpzdFByb2Nlc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgTDtTKGIpO2Muaj1iP2Iubm9kZVR5cGU9PTk/YjpiLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50OmRvY3VtZW50O3ZhciBlPWwoYyxjLmUsYSxiKSxkPWMuaD1bXSxmPWMuaz1bXTtjLmM9W107ZSgpO2Zvcih2YXIgaCxnLGo7ZC5sZW5ndGg7KWg9ZFtkLmxlbmd0aC0xXSxlPWZbZi5sZW5ndGgtMV0sZT49aC5sZW5ndGg/KGU9YyxnPWQucG9wKCksZy5sZW5ndGg9MCxlLmMucHVzaChnKSxmLnBvcCgpKTooZz1oW2UrK10saj1oW2UrK10saD1oW2UrK10sZltmLmxlbmd0aC0xXT1lLGcuY2FsbChjLGosaCkpfTsKfSkoKQovLyBjbGFuZy1mb3JtYXQgb24K
TextContent : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovLyBUaGlzIGZpbGUgc2VydmVzIGFzIGEgcHJveHkgdG8gYnJpbmcgdGhlIGluY2x1ZGVkIGpzIGZpbGUgZnJvbSAvdGhpcmRfcGFydHkKLy8gaW50byBpdHMgY29ycmVjdCBsb2NhdGlvbiB1bmRlciB0aGUgcmVzb3VyY2VzIGRpcmVjdG9yeSB0cmVlLCB3aGVuY2UgaXQgaXMKLy8gZGVsaXZlcmVkIHZpYSBhIGNocm9tZTovL3Jlc291cmNlcyBVUkwuICBTZWUgLi4vd2VidWlfcmVzb3VyY2VzLmdyZC4KCi8vIE5vdGU6IHRoaXMgPGluY2x1ZGU+IGlzIG5vdCBiZWhpbmQgYSBzaW5nbGUtbGluZSBjb21tZW50IGJlY2F1c2UgdGhlIGZpcnN0Ci8vIGxpbmUgb2YgdGhlIGZpbGUgaXMgc291cmNlIGNvZGUgKHNvIHRoZSBmaXJzdCBsaW5lIHdvdWxkIGJlIHNraXBwZWQpIGluc3RlYWQKLy8gb2YgYSBsaWNlbmNlIGhlYWRlci4KLy8gY2xhbmctZm9ybWF0IG9mZgooZnVuY3Rpb24oKXt2YXIgaT1udWxsO2Z1bmN0aW9uIGsoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNsaWNlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWsoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KGEsYyl9fWZ1bmN0aW9uIG0oYSxiKXt2YXIgYz1uZXcgbihiKTtmb3IoYy5mPVthXTtjLmYubGVuZ3RoOyl7dmFyIGU9YyxkPWMuZi5zaGlmdCgpO2UuZyhkKTtmb3IoZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpZC5ub2RlVHlwZT09MSYmZS5mLnB1c2goZCl9fWZ1bmN0aW9uIG4oYSl7dGhpcy5nPWF9ZnVuY3Rpb24gbyhhKXthLnN0eWxlLmRpc3BsYXk9IiJ9ZnVuY3Rpb24gcChhKXthLnN0eWxlLmRpc3BsYXk9Im5vbmUifTt2YXIgcT0iOiIscj0vXHMqO1xzKi87ZnVuY3Rpb24gcygpe3RoaXMuaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cy5wcm90b3R5cGUuaT1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEpdGhpcy5hPXt9O2lmKGIpe3ZhciBjPXRoaXMuYSxlPWIuYSxkO2ZvcihkIGluIGUpY1tkXT1lW2RdfWVsc2UgZm9yKGMgaW4gZD10aGlzLmEsZT10LGUpZFtjXT1lW2NdO3RoaXMuYS4kdGhpcz1hO3RoaXMuYS4kY29udGV4dD10aGlzO3RoaXMuZD10eXBlb2YgYSE9InVuZGVmaW5lZCImJmEhPWk/YToiIjtpZighYil0aGlzLmEuJHRvcD10aGlzLmR9O3ZhciB0PXskZGVmYXVsdDppfSx1PVtdO2Z1bmN0aW9uIHYoYSl7Zm9yKHZhciBiIGluIGEuYSlkZWxldGUgYS5hW2JdO2EuZD1pO3UucHVzaChhKX1mdW5jdGlvbiB3KGEsYixjKXt0cnl7cmV0dXJuIGIuY2FsbChjLGEuYSxhLmQpfWNhdGNoKGUpe3JldHVybiB0LiRkZWZhdWx0fX0KZnVuY3Rpb24geChhLGIsYyxlKXtpZih1Lmxlbmd0aD4wKXt2YXIgZD11LnBvcCgpO3MuY2FsbChkLGIsYSk7YT1kfWVsc2UgYT1uZXcgcyhiLGEpO2EuYS4kaW5kZXg9YzthLmEuJGNvdW50PWU7cmV0dXJuIGF9dmFyIHk9ImFfIix6PSJiXyIsQT0id2l0aCAoYV8pIHdpdGggKGJfKSByZXR1cm4gIixEPXt9O2Z1bmN0aW9uIEUoYSl7aWYoIURbYV0pdHJ5e0RbYV09bmV3IEZ1bmN0aW9uKHkseixBK2EpfWNhdGNoKGIpe31yZXR1cm4gRFthXX1mdW5jdGlvbiBGKGEpe2Zvcih2YXIgYj1bXSxhPWEuc3BsaXQociksYz0wLGU9YS5sZW5ndGg7YzxlOysrYyl7dmFyIGQ9YVtjXS5pbmRleE9mKHEpO2lmKCEoZDwwKSl7dmFyIGY7Zj1hW2NdLnN1YnN0cigwLGQpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIik7ZD1FKGFbY10uc3Vic3RyKGQrMSkpO2IucHVzaChmLGQpfX1yZXR1cm4gYn07dmFyIEc9ImpzaW5zdGFuY2UiLEg9ImpzdHMiLEk9IioiLEo9ImRpdiIsSz0iaWQiO2Z1bmN0aW9uIEwoKXt9dmFyIE09MCxOPXswOnt9fSxQPXt9LFE9e30sUj1bXTtmdW5jdGlvbiBTKGEpe2EuX19qc3RjYWNoZXx8bShhLGZ1bmN0aW9uKGEpe1QoYSl9KX12YXIgVT1bWyJqc3NlbGVjdCIsRV0sWyJqc2Rpc3BsYXkiLEVdLFsianN2YWx1ZXMiLEZdLFsianN2YXJzIixGXSxbImpzZXZhbCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKWlmKGFbY10pe3ZhciBkPUUoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifV0sWyJ0cmFuc2NsdWRlIixmdW5jdGlvbihhKXtyZXR1cm4gYX1dLFsianNjb250ZW50IixFXSxbImpzc2tpcCIsRV1dOwpmdW5jdGlvbiBUKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIhPWkpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO2Zvcih2YXIgYj1SLmxlbmd0aD0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGU9VVtiXVswXSxkPWEuZ2V0QXR0cmlidXRlKGUpO1FbZV09ZDtkIT1pJiZSLnB1c2goZSsiPSIrZCl9aWYoUi5sZW5ndGg9PTApcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsIjAiKSxhLl9fanN0Y2FjaGU9TlswXTt2YXIgZj1SLmpvaW4oIiYiKTtpZihiPVBbZl0pcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYiksYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBoPXt9LGI9MCxjPVUubGVuZ3RoO2I8YzsrK2Ipe3ZhciBkPVVbYl0sZT1kWzBdLGc9ZFsxXSxkPVFbZV07ZCE9aSYmKGhbZV09ZyhkKSl9Yj0iIisgKytNO2Euc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYik7TltiXT0KaDtQW2ZdPWI7cmV0dXJuIGEuX19qc3RjYWNoZT1ofWZ1bmN0aW9uIFYoYSxiKXthLmgucHVzaChiKTthLmsucHVzaCgwKX1mdW5jdGlvbiBXKGEpe3JldHVybiBhLmMubGVuZ3RoP2EuYy5wb3AoKTpbXX0KTC5wcm90b3R5cGUuZT1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLnRyYW5zY2x1ZGU7aWYoZSkoYz1ZKGUpKT8oYi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjLGIpLGU9Vyh0aGlzKSxlLnB1c2godGhpcy5lLGEsYyksVih0aGlzLGUpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBpZihjPWMuanNzZWxlY3Qpe3ZhciBjPXcoYSxjLGIpLGQ9Yi5nZXRBdHRyaWJ1dGUoRyksZj0hMTtkJiYoZC5jaGFyQXQoMCk9PUk/KGQ9cGFyc2VJbnQoZC5zdWJzdHIoMSksMTApLGY9ITApOmQ9cGFyc2VJbnQoZCwxMCkpO3ZhciBoPWMhPWkmJnR5cGVvZiBjPT0ib2JqZWN0IiYmdHlwZW9mIGMubGVuZ3RoPT0ibnVtYmVyIixlPWg/Yy5sZW5ndGg6MSxnPWgmJmU9PTA7aWYoaClpZihnKWQ/Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOihiLnNldEF0dHJpYnV0ZShHLCIqMCIpLHAoYikpO2Vsc2UgaWYobyhiKSxkPT09aXx8ZD09PSIifHxmJiZkPGUtMSl7Zj1XKHRoaXMpOwpkPWR8fDA7Zm9yKGg9ZS0xO2Q8aDsrK2Qpe3ZhciBqPWIuY2xvbmVOb2RlKCEwKTtiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosYik7WihqLGMsZCk7Zz14KGEsY1tkXSxkLGUpO2YucHVzaCh0aGlzLmIsZyxqLHYsZyxpKX1aKGIsYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGIsdixnLGkpO1YodGhpcyxmKX1lbHNlIGQ8ZT8oZj1jW2RdLFooYixjLGQpLGc9eChhLGYsZCxlKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSk6Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2Vsc2UgYz09aT9wKGIpOihvKGIpLGc9eChhLGMsMCwxKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSl9ZWxzZSB0aGlzLmIoYSxiKX07CkwucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YKGIpLGU9Yy5qc2Rpc3BsYXk7aWYoZSl7aWYoIXcoYSxlLGIpKXtwKGIpO3JldHVybn1vKGIpfWlmKGU9Yy5qc3ZhcnMpZm9yKHZhciBkPTAsZj1lLmxlbmd0aDtkPGY7ZCs9Mil7dmFyIGg9ZVtkXSxnPXcoYSxlW2QrMV0sYik7YS5hW2hdPWd9aWYoZT1jLmpzdmFsdWVzKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmO2QrPTIpaWYoZz1lW2RdLGg9dyhhLGVbZCsxXSxiKSxnLmNoYXJBdCgwKT09IiQiKWEuYVtnXT1oO2Vsc2UgaWYoZy5jaGFyQXQoMCk9PSIuIil7Zm9yKHZhciBnPWcuc3Vic3RyKDEpLnNwbGl0KCIuIiksaj1iLE89Zy5sZW5ndGgsQj0wLCQ9Ty0xO0I8JDsrK0Ipe3ZhciBDPWdbQl07altDXXx8KGpbQ109e30pO2o9altDXX1qW2dbTy0xXV09aH1lbHNlIGcmJih0eXBlb2YgaD09ImJvb2xlYW4iP2g/Yi5zZXRBdHRyaWJ1dGUoZyxnKTpiLnJlbW92ZUF0dHJpYnV0ZShnKTpiLnNldEF0dHJpYnV0ZShnLCIiKwpoKSl9aWYoZT1jLmpzZXZhbCl7ZD0wO2ZvcihmPWUubGVuZ3RoO2Q8ZjsrK2QpdyhhLGVbZF0sYil9ZT1jLmpzc2tpcDtpZighZXx8IXcoYSxlLGIpKWlmKGM9Yy5qc2NvbnRlbnQpe2lmKGM9IiIrdyhhLGMsYiksYi5pbm5lckhUTUwhPWMpe2Zvcig7Yi5maXJzdENoaWxkOyllPWIuZmlyc3RDaGlsZCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yi5hcHBlbmRDaGlsZCh0aGlzLmouY3JlYXRlVGV4dE5vZGUoYykpfX1lbHNle2M9Vyh0aGlzKTtmb3IoZT1iLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpZS5ub2RlVHlwZT09MSYmYy5wdXNoKHRoaXMuZSxhLGUpO2MubGVuZ3RoJiZWKHRoaXMsYyl9fTtmdW5jdGlvbiBYKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO3JldHVybiBUKGEpfQpmdW5jdGlvbiBZKGEsYil7dmFyIGM9ZG9jdW1lbnQ7aWYoYil7dmFyIGU9Yy5nZXRFbGVtZW50QnlJZChhKTtpZighZSl7dmFyIGU9YigpLGQ9SCxmPWMuZ2V0RWxlbWVudEJ5SWQoZCk7aWYoIWYpZj1jLmNyZWF0ZUVsZW1lbnQoSiksZi5pZD1kLHAoZiksZi5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGMuYm9keS5hcHBlbmRDaGlsZChmKTtkPWMuY3JlYXRlRWxlbWVudChKKTtmLmFwcGVuZENoaWxkKGQpO2QuaW5uZXJIVE1MPWU7ZT1jLmdldEVsZW1lbnRCeUlkKGEpfWM9ZX1lbHNlIGM9Yy5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz8oUyhjKSxjPWMuY2xvbmVOb2RlKCEwKSxjLnJlbW92ZUF0dHJpYnV0ZShLKSxjKTppfWZ1bmN0aW9uIFooYSxiLGMpe2M9PWIubGVuZ3RoLTE/YS5zZXRBdHRyaWJ1dGUoRyxJK2MpOmEuc2V0QXR0cmlidXRlKEcsIiIrYyl9O3dpbmRvdy5qc3RHZXRUZW1wbGF0ZT1ZO3dpbmRvdy5Kc0V2YWxDb250ZXh0PXM7d2luZG93LmpzdFByb2Nlc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgTDtTKGIpO2Muaj1iP2Iubm9kZVR5cGU9PTk/YjpiLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50OmRvY3VtZW50O3ZhciBlPWwoYyxjLmUsYSxiKSxkPWMuaD1bXSxmPWMuaz1bXTtjLmM9W107ZSgpO2Zvcih2YXIgaCxnLGo7ZC5sZW5ndGg7KWg9ZFtkLmxlbmd0aC0xXSxlPWZbZi5sZW5ndGgtMV0sZT49aC5sZW5ndGg/KGU9YyxnPWQucG9wKCksZy5sZW5ndGg9MCxlLmMucHVzaChnKSxmLnBvcCgpKTooZz1oW2UrK10saj1oW2UrK10saD1oW2UrK10sZltmLmxlbmd0aC0xXT1lLGcuY2FsbChjLGosaCkpfTsKfSkoKQovLyBjbGFuZy1mb3JtYXQgb24K
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovLyBUaGlzIGZpbGUgc2VydmVzIGFzIGEgcHJveHkgdG8gYnJpbmcgdGhlIGluY2x1ZGVkIGpzIGZpbGUgZnJvbSAvdGhpcmRfcGFydHkKLy8gaW50byBpdHMgY29ycmVjdCBsb2NhdGlvbiB1bmRlciB0aGUgcmVzb3VyY2VzIGRpcmVjdG9yeSB0cmVlLCB3aGVuY2UgaXQgaXMKLy8gZGVsaXZlcmVkIHZpYSBhIGNocm9tZTovL3Jlc291cmNlcyBVUkwuICBTZWUgLi4vd2VidWlfcmVzb3VyY2VzLmdyZC4KCi8vIE5vdGU6IHRoaXMgPGluY2x1ZGU+IGlzIG5vdCBiZWhpbmQgYSBzaW5nbGUtbGluZSBjb21tZW50IGJlY2F1c2UgdGhlIGZpcnN0Ci8vIGxpbmUgb2YgdGhlIGZpbGUgaXMgc291cmNlIGNvZGUgKHNvIHRoZSBmaXJzdCBsaW5lIHdvdWxkIGJlIHNraXBwZWQpIGluc3RlYWQKLy8gb2YgYSBsaWNlbmNlIGhlYWRlci4KLy8gY2xhbmctZm9ybWF0IG9mZgooZnVuY3Rpb24oKXt2YXIgaT1udWxsO2Z1bmN0aW9uIGsoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNsaWNlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWsoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KGEsYyl9fWZ1bmN0aW9uIG0oYSxiKXt2YXIgYz1uZXcgbihiKTtmb3IoYy5mPVthXTtjLmYubGVuZ3RoOyl7dmFyIGU9YyxkPWMuZi5zaGlmdCgpO2UuZyhkKTtmb3IoZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpZC5ub2RlVHlwZT09MSYmZS5mLnB1c2goZCl9fWZ1bmN0aW9uIG4oYSl7dGhpcy5nPWF9ZnVuY3Rpb24gbyhhKXthLnN0eWxlLmRpc3BsYXk9IiJ9ZnVuY3Rpb24gcChhKXthLnN0eWxlLmRpc3BsYXk9Im5vbmUifTt2YXIgcT0iOiIscj0vXHMqO1xzKi87ZnVuY3Rpb24gcygpe3RoaXMuaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cy5wcm90b3R5cGUuaT1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEpdGhpcy5hPXt9O2lmKGIpe3ZhciBjPXRoaXMuYSxlPWIuYSxkO2ZvcihkIGluIGUpY1tkXT1lW2RdfWVsc2UgZm9yKGMgaW4gZD10aGlzLmEsZT10LGUpZFtjXT1lW2NdO3RoaXMuYS4kdGhpcz1hO3RoaXMuYS4kY29udGV4dD10aGlzO3RoaXMuZD10eXBlb2YgYSE9InVuZGVmaW5lZCImJmEhPWk/YToiIjtpZighYil0aGlzLmEuJHRvcD10aGlzLmR9O3ZhciB0PXskZGVmYXVsdDppfSx1PVtdO2Z1bmN0aW9uIHYoYSl7Zm9yKHZhciBiIGluIGEuYSlkZWxldGUgYS5hW2JdO2EuZD1pO3UucHVzaChhKX1mdW5jdGlvbiB3KGEsYixjKXt0cnl7cmV0dXJuIGIuY2FsbChjLGEuYSxhLmQpfWNhdGNoKGUpe3JldHVybiB0LiRkZWZhdWx0fX0KZnVuY3Rpb24geChhLGIsYyxlKXtpZih1Lmxlbmd0aD4wKXt2YXIgZD11LnBvcCgpO3MuY2FsbChkLGIsYSk7YT1kfWVsc2UgYT1uZXcgcyhiLGEpO2EuYS4kaW5kZXg9YzthLmEuJGNvdW50PWU7cmV0dXJuIGF9dmFyIHk9ImFfIix6PSJiXyIsQT0id2l0aCAoYV8pIHdpdGggKGJfKSByZXR1cm4gIixEPXt9O2Z1bmN0aW9uIEUoYSl7aWYoIURbYV0pdHJ5e0RbYV09bmV3IEZ1bmN0aW9uKHkseixBK2EpfWNhdGNoKGIpe31yZXR1cm4gRFthXX1mdW5jdGlvbiBGKGEpe2Zvcih2YXIgYj1bXSxhPWEuc3BsaXQociksYz0wLGU9YS5sZW5ndGg7YzxlOysrYyl7dmFyIGQ9YVtjXS5pbmRleE9mKHEpO2lmKCEoZDwwKSl7dmFyIGY7Zj1hW2NdLnN1YnN0cigwLGQpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIik7ZD1FKGFbY10uc3Vic3RyKGQrMSkpO2IucHVzaChmLGQpfX1yZXR1cm4gYn07dmFyIEc9ImpzaW5zdGFuY2UiLEg9ImpzdHMiLEk9IioiLEo9ImRpdiIsSz0iaWQiO2Z1bmN0aW9uIEwoKXt9dmFyIE09MCxOPXswOnt9fSxQPXt9LFE9e30sUj1bXTtmdW5jdGlvbiBTKGEpe2EuX19qc3RjYWNoZXx8bShhLGZ1bmN0aW9uKGEpe1QoYSl9KX12YXIgVT1bWyJqc3NlbGVjdCIsRV0sWyJqc2Rpc3BsYXkiLEVdLFsianN2YWx1ZXMiLEZdLFsianN2YXJzIixGXSxbImpzZXZhbCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKWlmKGFbY10pe3ZhciBkPUUoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifV0sWyJ0cmFuc2NsdWRlIixmdW5jdGlvbihhKXtyZXR1cm4gYX1dLFsianNjb250ZW50IixFXSxbImpzc2tpcCIsRV1dOwpmdW5jdGlvbiBUKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIhPWkpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO2Zvcih2YXIgYj1SLmxlbmd0aD0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGU9VVtiXVswXSxkPWEuZ2V0QXR0cmlidXRlKGUpO1FbZV09ZDtkIT1pJiZSLnB1c2goZSsiPSIrZCl9aWYoUi5sZW5ndGg9PTApcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsIjAiKSxhLl9fanN0Y2FjaGU9TlswXTt2YXIgZj1SLmpvaW4oIiYiKTtpZihiPVBbZl0pcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYiksYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBoPXt9LGI9MCxjPVUubGVuZ3RoO2I8YzsrK2Ipe3ZhciBkPVVbYl0sZT1kWzBdLGc9ZFsxXSxkPVFbZV07ZCE9aSYmKGhbZV09ZyhkKSl9Yj0iIisgKytNO2Euc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYik7TltiXT0KaDtQW2ZdPWI7cmV0dXJuIGEuX19qc3RjYWNoZT1ofWZ1bmN0aW9uIFYoYSxiKXthLmgucHVzaChiKTthLmsucHVzaCgwKX1mdW5jdGlvbiBXKGEpe3JldHVybiBhLmMubGVuZ3RoP2EuYy5wb3AoKTpbXX0KTC5wcm90b3R5cGUuZT1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLnRyYW5zY2x1ZGU7aWYoZSkoYz1ZKGUpKT8oYi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjLGIpLGU9Vyh0aGlzKSxlLnB1c2godGhpcy5lLGEsYyksVih0aGlzLGUpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBpZihjPWMuanNzZWxlY3Qpe3ZhciBjPXcoYSxjLGIpLGQ9Yi5nZXRBdHRyaWJ1dGUoRyksZj0hMTtkJiYoZC5jaGFyQXQoMCk9PUk/KGQ9cGFyc2VJbnQoZC5zdWJzdHIoMSksMTApLGY9ITApOmQ9cGFyc2VJbnQoZCwxMCkpO3ZhciBoPWMhPWkmJnR5cGVvZiBjPT0ib2JqZWN0IiYmdHlwZW9mIGMubGVuZ3RoPT0ibnVtYmVyIixlPWg/Yy5sZW5ndGg6MSxnPWgmJmU9PTA7aWYoaClpZihnKWQ/Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOihiLnNldEF0dHJpYnV0ZShHLCIqMCIpLHAoYikpO2Vsc2UgaWYobyhiKSxkPT09aXx8ZD09PSIifHxmJiZkPGUtMSl7Zj1XKHRoaXMpOwpkPWR8fDA7Zm9yKGg9ZS0xO2Q8aDsrK2Qpe3ZhciBqPWIuY2xvbmVOb2RlKCEwKTtiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosYik7WihqLGMsZCk7Zz14KGEsY1tkXSxkLGUpO2YucHVzaCh0aGlzLmIsZyxqLHYsZyxpKX1aKGIsYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGIsdixnLGkpO1YodGhpcyxmKX1lbHNlIGQ8ZT8oZj1jW2RdLFooYixjLGQpLGc9eChhLGYsZCxlKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSk6Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2Vsc2UgYz09aT9wKGIpOihvKGIpLGc9eChhLGMsMCwxKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSl9ZWxzZSB0aGlzLmIoYSxiKX07CkwucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YKGIpLGU9Yy5qc2Rpc3BsYXk7aWYoZSl7aWYoIXcoYSxlLGIpKXtwKGIpO3JldHVybn1vKGIpfWlmKGU9Yy5qc3ZhcnMpZm9yKHZhciBkPTAsZj1lLmxlbmd0aDtkPGY7ZCs9Mil7dmFyIGg9ZVtkXSxnPXcoYSxlW2QrMV0sYik7YS5hW2hdPWd9aWYoZT1jLmpzdmFsdWVzKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmO2QrPTIpaWYoZz1lW2RdLGg9dyhhLGVbZCsxXSxiKSxnLmNoYXJBdCgwKT09IiQiKWEuYVtnXT1oO2Vsc2UgaWYoZy5jaGFyQXQoMCk9PSIuIil7Zm9yKHZhciBnPWcuc3Vic3RyKDEpLnNwbGl0KCIuIiksaj1iLE89Zy5sZW5ndGgsQj0wLCQ9Ty0xO0I8JDsrK0Ipe3ZhciBDPWdbQl07altDXXx8KGpbQ109e30pO2o9altDXX1qW2dbTy0xXV09aH1lbHNlIGcmJih0eXBlb2YgaD09ImJvb2xlYW4iP2g/Yi5zZXRBdHRyaWJ1dGUoZyxnKTpiLnJlbW92ZUF0dHJpYnV0ZShnKTpiLnNldEF0dHJpYnV0ZShnLCIiKwpoKSl9aWYoZT1jLmpzZXZhbCl7ZD0wO2ZvcihmPWUubGVuZ3RoO2Q8ZjsrK2QpdyhhLGVbZF0sYil9ZT1jLmpzc2tpcDtpZighZXx8IXcoYSxlLGIpKWlmKGM9Yy5qc2NvbnRlbnQpe2lmKGM9IiIrdyhhLGMsYiksYi5pbm5lckhUTUwhPWMpe2Zvcig7Yi5maXJzdENoaWxkOyllPWIuZmlyc3RDaGlsZCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yi5hcHBlbmRDaGlsZCh0aGlzLmouY3JlYXRlVGV4dE5vZGUoYykpfX1lbHNle2M9Vyh0aGlzKTtmb3IoZT1iLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpZS5ub2RlVHlwZT09MSYmYy5wdXNoKHRoaXMuZSxhLGUpO2MubGVuZ3RoJiZWKHRoaXMsYyl9fTtmdW5jdGlvbiBYKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO3JldHVybiBUKGEpfQpmdW5jdGlvbiBZKGEsYil7dmFyIGM9ZG9jdW1lbnQ7aWYoYil7dmFyIGU9Yy5nZXRFbGVtZW50QnlJZChhKTtpZighZSl7dmFyIGU9YigpLGQ9SCxmPWMuZ2V0RWxlbWVudEJ5SWQoZCk7aWYoIWYpZj1jLmNyZWF0ZUVsZW1lbnQoSiksZi5pZD1kLHAoZiksZi5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGMuYm9keS5hcHBlbmRDaGlsZChmKTtkPWMuY3JlYXRlRWxlbWVudChKKTtmLmFwcGVuZENoaWxkKGQpO2QuaW5uZXJIVE1MPWU7ZT1jLmdldEVsZW1lbnRCeUlkKGEpfWM9ZX1lbHNlIGM9Yy5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz8oUyhjKSxjPWMuY2xvbmVOb2RlKCEwKSxjLnJlbW92ZUF0dHJpYnV0ZShLKSxjKTppfWZ1bmN0aW9uIFooYSxiLGMpe2M9PWIubGVuZ3RoLTE/YS5zZXRBdHRyaWJ1dGUoRyxJK2MpOmEuc2V0QXR0cmlidXRlKEcsIiIrYyl9O3dpbmRvdy5qc3RHZXRUZW1wbGF0ZT1ZO3dpbmRvdy5Kc0V2YWxDb250ZXh0PXM7d2luZG93LmpzdFByb2Nlc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgTDtTKGIpO2Muaj1iP2Iubm9kZVR5cGU9PTk/YjpiLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50OmRvY3VtZW50O3ZhciBlPWwoYyxjLmUsYSxiKSxkPWMuaD1bXSxmPWMuaz1bXTtjLmM9W107ZSgpO2Zvcih2YXIgaCxnLGo7ZC5sZW5ndGg7KWg9ZFtkLmxlbmd0aC0xXSxlPWZbZi5sZW5ndGgtMV0sZT49aC5sZW5ndGg/KGU9YyxnPWQucG9wKCksZy5sZW5ndGg9MCxlLmMucHVzaChnKSxmLnBvcCgpKTooZz1oW2UrK10saj1oW2UrK10saD1oW2UrK10sZltmLmxlbmd0aC0xXT1lLGcuY2FsbChjLGosaCkpfTsKfSkoKQovLyBjbGFuZy1mb3JtYXQgb24K
Length : 5682
WholeText : == Ly8gQ29weXJpZ2h0IChjKSAyMDEyIFRoZSBDaHJvbWl1bSBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgovLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlCi8vIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuCgovLyBUaGlzIGZpbGUgc2VydmVzIGFzIGEgcHJveHkgdG8gYnJpbmcgdGhlIGluY2x1ZGVkIGpzIGZpbGUgZnJvbSAvdGhpcmRfcGFydHkKLy8gaW50byBpdHMgY29ycmVjdCBsb2NhdGlvbiB1bmRlciB0aGUgcmVzb3VyY2VzIGRpcmVjdG9yeSB0cmVlLCB3aGVuY2UgaXQgaXMKLy8gZGVsaXZlcmVkIHZpYSBhIGNocm9tZTovL3Jlc291cmNlcyBVUkwuICBTZWUgLi4vd2VidWlfcmVzb3VyY2VzLmdyZC4KCi8vIE5vdGU6IHRoaXMgPGluY2x1ZGU+IGlzIG5vdCBiZWhpbmQgYSBzaW5nbGUtbGluZSBjb21tZW50IGJlY2F1c2UgdGhlIGZpcnN0Ci8vIGxpbmUgb2YgdGhlIGZpbGUgaXMgc291cmNlIGNvZGUgKHNvIHRoZSBmaXJzdCBsaW5lIHdvdWxkIGJlIHNraXBwZWQpIGluc3RlYWQKLy8gb2YgYSBsaWNlbmNlIGhlYWRlci4KLy8gY2xhbmctZm9ybWF0IG9mZgooZnVuY3Rpb24oKXt2YXIgaT1udWxsO2Z1bmN0aW9uIGsoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNsaWNlLGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChhLGIpe3ZhciBjPWsoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KGEsYyl9fWZ1bmN0aW9uIG0oYSxiKXt2YXIgYz1uZXcgbihiKTtmb3IoYy5mPVthXTtjLmYubGVuZ3RoOyl7dmFyIGU9YyxkPWMuZi5zaGlmdCgpO2UuZyhkKTtmb3IoZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpZC5ub2RlVHlwZT09MSYmZS5mLnB1c2goZCl9fWZ1bmN0aW9uIG4oYSl7dGhpcy5nPWF9ZnVuY3Rpb24gbyhhKXthLnN0eWxlLmRpc3BsYXk9IiJ9ZnVuY3Rpb24gcChhKXthLnN0eWxlLmRpc3BsYXk9Im5vbmUifTt2YXIgcT0iOiIscj0vXHMqO1xzKi87ZnVuY3Rpb24gcygpe3RoaXMuaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cy5wcm90b3R5cGUuaT1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEpdGhpcy5hPXt9O2lmKGIpe3ZhciBjPXRoaXMuYSxlPWIuYSxkO2ZvcihkIGluIGUpY1tkXT1lW2RdfWVsc2UgZm9yKGMgaW4gZD10aGlzLmEsZT10LGUpZFtjXT1lW2NdO3RoaXMuYS4kdGhpcz1hO3RoaXMuYS4kY29udGV4dD10aGlzO3RoaXMuZD10eXBlb2YgYSE9InVuZGVmaW5lZCImJmEhPWk/YToiIjtpZighYil0aGlzLmEuJHRvcD10aGlzLmR9O3ZhciB0PXskZGVmYXVsdDppfSx1PVtdO2Z1bmN0aW9uIHYoYSl7Zm9yKHZhciBiIGluIGEuYSlkZWxldGUgYS5hW2JdO2EuZD1pO3UucHVzaChhKX1mdW5jdGlvbiB3KGEsYixjKXt0cnl7cmV0dXJuIGIuY2FsbChjLGEuYSxhLmQpfWNhdGNoKGUpe3JldHVybiB0LiRkZWZhdWx0fX0KZnVuY3Rpb24geChhLGIsYyxlKXtpZih1Lmxlbmd0aD4wKXt2YXIgZD11LnBvcCgpO3MuY2FsbChkLGIsYSk7YT1kfWVsc2UgYT1uZXcgcyhiLGEpO2EuYS4kaW5kZXg9YzthLmEuJGNvdW50PWU7cmV0dXJuIGF9dmFyIHk9ImFfIix6PSJiXyIsQT0id2l0aCAoYV8pIHdpdGggKGJfKSByZXR1cm4gIixEPXt9O2Z1bmN0aW9uIEUoYSl7aWYoIURbYV0pdHJ5e0RbYV09bmV3IEZ1bmN0aW9uKHkseixBK2EpfWNhdGNoKGIpe31yZXR1cm4gRFthXX1mdW5jdGlvbiBGKGEpe2Zvcih2YXIgYj1bXSxhPWEuc3BsaXQociksYz0wLGU9YS5sZW5ndGg7YzxlOysrYyl7dmFyIGQ9YVtjXS5pbmRleE9mKHEpO2lmKCEoZDwwKSl7dmFyIGY7Zj1hW2NdLnN1YnN0cigwLGQpLnJlcGxhY2UoL15ccysvLCIiKS5yZXBsYWNlKC9ccyskLywiIik7ZD1FKGFbY10uc3Vic3RyKGQrMSkpO2IucHVzaChmLGQpfX1yZXR1cm4gYn07dmFyIEc9ImpzaW5zdGFuY2UiLEg9ImpzdHMiLEk9IioiLEo9ImRpdiIsSz0iaWQiO2Z1bmN0aW9uIEwoKXt9dmFyIE09MCxOPXswOnt9fSxQPXt9LFE9e30sUj1bXTtmdW5jdGlvbiBTKGEpe2EuX19qc3RjYWNoZXx8bShhLGZ1bmN0aW9uKGEpe1QoYSl9KX12YXIgVT1bWyJqc3NlbGVjdCIsRV0sWyJqc2Rpc3BsYXkiLEVdLFsianN2YWx1ZXMiLEZdLFsianN2YXJzIixGXSxbImpzZXZhbCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGE9YS5zcGxpdChyKSxjPTAsZT1hLmxlbmd0aDtjPGU7KytjKWlmKGFbY10pe3ZhciBkPUUoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifV0sWyJ0cmFuc2NsdWRlIixmdW5jdGlvbihhKXtyZXR1cm4gYX1dLFsianNjb250ZW50IixFXSxbImpzc2tpcCIsRV1dOwpmdW5jdGlvbiBUKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIhPWkpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO2Zvcih2YXIgYj1SLmxlbmd0aD0wLGM9VS5sZW5ndGg7YjxjOysrYil7dmFyIGU9VVtiXVswXSxkPWEuZ2V0QXR0cmlidXRlKGUpO1FbZV09ZDtkIT1pJiZSLnB1c2goZSsiPSIrZCl9aWYoUi5sZW5ndGg9PTApcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsIjAiKSxhLl9fanN0Y2FjaGU9TlswXTt2YXIgZj1SLmpvaW4oIiYiKTtpZihiPVBbZl0pcmV0dXJuIGEuc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYiksYS5fX2pzdGNhY2hlPU5bYl07Zm9yKHZhciBoPXt9LGI9MCxjPVUubGVuZ3RoO2I8YzsrK2Ipe3ZhciBkPVVbYl0sZT1kWzBdLGc9ZFsxXSxkPVFbZV07ZCE9aSYmKGhbZV09ZyhkKSl9Yj0iIisgKytNO2Euc2V0QXR0cmlidXRlKCJqc3RjYWNoZSIsYik7TltiXT0KaDtQW2ZdPWI7cmV0dXJuIGEuX19qc3RjYWNoZT1ofWZ1bmN0aW9uIFYoYSxiKXthLmgucHVzaChiKTthLmsucHVzaCgwKX1mdW5jdGlvbiBXKGEpe3JldHVybiBhLmMubGVuZ3RoP2EuYy5wb3AoKTpbXX0KTC5wcm90b3R5cGUuZT1mdW5jdGlvbihhLGIpe3ZhciBjPVgoYiksZT1jLnRyYW5zY2x1ZGU7aWYoZSkoYz1ZKGUpKT8oYi5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjLGIpLGU9Vyh0aGlzKSxlLnB1c2godGhpcy5lLGEsYyksVih0aGlzLGUpKTpiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik7ZWxzZSBpZihjPWMuanNzZWxlY3Qpe3ZhciBjPXcoYSxjLGIpLGQ9Yi5nZXRBdHRyaWJ1dGUoRyksZj0hMTtkJiYoZC5jaGFyQXQoMCk9PUk/KGQ9cGFyc2VJbnQoZC5zdWJzdHIoMSksMTApLGY9ITApOmQ9cGFyc2VJbnQoZCwxMCkpO3ZhciBoPWMhPWkmJnR5cGVvZiBjPT0ib2JqZWN0IiYmdHlwZW9mIGMubGVuZ3RoPT0ibnVtYmVyIixlPWg/Yy5sZW5ndGg6MSxnPWgmJmU9PTA7aWYoaClpZihnKWQ/Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpOihiLnNldEF0dHJpYnV0ZShHLCIqMCIpLHAoYikpO2Vsc2UgaWYobyhiKSxkPT09aXx8ZD09PSIifHxmJiZkPGUtMSl7Zj1XKHRoaXMpOwpkPWR8fDA7Zm9yKGg9ZS0xO2Q8aDsrK2Qpe3ZhciBqPWIuY2xvbmVOb2RlKCEwKTtiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosYik7WihqLGMsZCk7Zz14KGEsY1tkXSxkLGUpO2YucHVzaCh0aGlzLmIsZyxqLHYsZyxpKX1aKGIsYyxkKTtnPXgoYSxjW2RdLGQsZSk7Zi5wdXNoKHRoaXMuYixnLGIsdixnLGkpO1YodGhpcyxmKX1lbHNlIGQ8ZT8oZj1jW2RdLFooYixjLGQpLGc9eChhLGYsZCxlKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSk6Yi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpO2Vsc2UgYz09aT9wKGIpOihvKGIpLGc9eChhLGMsMCwxKSxmPVcodGhpcyksZi5wdXNoKHRoaXMuYixnLGIsdixnLGkpLFYodGhpcyxmKSl9ZWxzZSB0aGlzLmIoYSxiKX07CkwucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YKGIpLGU9Yy5qc2Rpc3BsYXk7aWYoZSl7aWYoIXcoYSxlLGIpKXtwKGIpO3JldHVybn1vKGIpfWlmKGU9Yy5qc3ZhcnMpZm9yKHZhciBkPTAsZj1lLmxlbmd0aDtkPGY7ZCs9Mil7dmFyIGg9ZVtkXSxnPXcoYSxlW2QrMV0sYik7YS5hW2hdPWd9aWYoZT1jLmpzdmFsdWVzKXtkPTA7Zm9yKGY9ZS5sZW5ndGg7ZDxmO2QrPTIpaWYoZz1lW2RdLGg9dyhhLGVbZCsxXSxiKSxnLmNoYXJBdCgwKT09IiQiKWEuYVtnXT1oO2Vsc2UgaWYoZy5jaGFyQXQoMCk9PSIuIil7Zm9yKHZhciBnPWcuc3Vic3RyKDEpLnNwbGl0KCIuIiksaj1iLE89Zy5sZW5ndGgsQj0wLCQ9Ty0xO0I8JDsrK0Ipe3ZhciBDPWdbQl07altDXXx8KGpbQ109e30pO2o9altDXX1qW2dbTy0xXV09aH1lbHNlIGcmJih0eXBlb2YgaD09ImJvb2xlYW4iP2g/Yi5zZXRBdHRyaWJ1dGUoZyxnKTpiLnJlbW92ZUF0dHJpYnV0ZShnKTpiLnNldEF0dHJpYnV0ZShnLCIiKwpoKSl9aWYoZT1jLmpzZXZhbCl7ZD0wO2ZvcihmPWUubGVuZ3RoO2Q8ZjsrK2QpdyhhLGVbZF0sYil9ZT1jLmpzc2tpcDtpZighZXx8IXcoYSxlLGIpKWlmKGM9Yy5qc2NvbnRlbnQpe2lmKGM9IiIrdyhhLGMsYiksYi5pbm5lckhUTUwhPWMpe2Zvcig7Yi5maXJzdENoaWxkOyllPWIuZmlyc3RDaGlsZCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSk7Yi5hcHBlbmRDaGlsZCh0aGlzLmouY3JlYXRlVGV4dE5vZGUoYykpfX1lbHNle2M9Vyh0aGlzKTtmb3IoZT1iLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpZS5ub2RlVHlwZT09MSYmYy5wdXNoKHRoaXMuZSxhLGUpO2MubGVuZ3RoJiZWKHRoaXMsYyl9fTtmdW5jdGlvbiBYKGEpe2lmKGEuX19qc3RjYWNoZSlyZXR1cm4gYS5fX2pzdGNhY2hlO3ZhciBiPWEuZ2V0QXR0cmlidXRlKCJqc3RjYWNoZSIpO2lmKGIpcmV0dXJuIGEuX19qc3RjYWNoZT1OW2JdO3JldHVybiBUKGEpfQpmdW5jdGlvbiBZKGEsYil7dmFyIGM9ZG9jdW1lbnQ7aWYoYil7dmFyIGU9Yy5nZXRFbGVtZW50QnlJZChhKTtpZighZSl7dmFyIGU9YigpLGQ9SCxmPWMuZ2V0RWxlbWVudEJ5SWQoZCk7aWYoIWYpZj1jLmNyZWF0ZUVsZW1lbnQoSiksZi5pZD1kLHAoZiksZi5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGMuYm9keS5hcHBlbmRDaGlsZChmKTtkPWMuY3JlYXRlRWxlbWVudChKKTtmLmFwcGVuZENoaWxkKGQpO2QuaW5uZXJIVE1MPWU7ZT1jLmdldEVsZW1lbnRCeUlkKGEpfWM9ZX1lbHNlIGM9Yy5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz8oUyhjKSxjPWMuY2xvbmVOb2RlKCEwKSxjLnJlbW92ZUF0dHJpYnV0ZShLKSxjKTppfWZ1bmN0aW9uIFooYSxiLGMpe2M9PWIubGVuZ3RoLTE/YS5zZXRBdHRyaWJ1dGUoRyxJK2MpOmEuc2V0QXR0cmlidXRlKEcsIiIrYyl9O3dpbmRvdy5qc3RHZXRUZW1wbGF0ZT1ZO3dpbmRvdy5Kc0V2YWxDb250ZXh0PXM7d2luZG93LmpzdFByb2Nlc3M9ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZXcgTDtTKGIpO2Muaj1iP2Iubm9kZVR5cGU9PTk/YjpiLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50OmRvY3VtZW50O3ZhciBlPWwoYyxjLmUsYSxiKSxkPWMuaD1bXSxmPWMuaz1bXTtjLmM9W107ZSgpO2Zvcih2YXIgaCxnLGo7ZC5sZW5ndGg7KWg9ZFtkLmxlbmd0aC0xXSxlPWZbZi5sZW5ndGgtMV0sZT49aC5sZW5ndGg/KGU9YyxnPWQucG9wKCksZy5sZW5ndGg9MCxlLmMucHVzaChnKSxmLnBvcCgpKTooZz1oW2UrK10saj1oW2UrK10saD1oW2UrK10sZltmLmxlbmd0aC0xXT1lLGcuY2FsbChjLGosaCkpfTsKfSkoKQovLyBjbGFuZy1mb3JtYXQgb24K

NodeId : 184
NodeType : 1
NodeName : SCRIPT
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 28
ParentElement : 28
FirstChild : 185
LastChild : 185
PreviousSibling : 182
NextSibling : null 
NodeValue : === null
TextContent : var tp = document.getElementById('t');jstProcess(loadTimeData.createJsEvalContext(), tp);
ChildNodes : 1 : 185
ChildElementCount : 0
FirstElementChild : null 
LastElementChild : null 
Children : 0 : 
PreviousElementSibling : 182
NextElementSibling : null 
NamespaceURI : http://www.w3.org/1999/xhtml
Prefix : === null
LocalName : script
TagName : SCRIPT
Id : === empty
ClassName : === empty
ClassList : 0 : 
Attributes : 1

NamespaceURI : === null
Prefix : === null
LocalName : jstcache
Name : jstcache
Value : 0

NodeId : 185
NodeType : 3
NodeName : #text
BaseUri : data:text/html,chromewebdata
OwnerDocument : 0
ParentNode : 184
ParentElement : 184
FirstChild : null 
LastChild : null 
PreviousSibling : null 
NextSibling : null 
NodeValue : var tp = document.getElementById('t');jstProcess(loadTimeData.createJsEvalContext(), tp);
TextContent : var tp = document.getElementById('t');jstProcess(loadTimeData.createJsEvalContext(), tp);
ChildNodes : 0 : 
PreviousElementSibling : null 
NextElementSibling : null 
Data : var tp = document.getElementById('t');jstProcess(loadTimeData.createJsEvalContext(), tp);
Length : 89
WholeText : var tp = document.getElementById('t');jstProcess(loadTimeData.createJsEvalContext(), tp);

