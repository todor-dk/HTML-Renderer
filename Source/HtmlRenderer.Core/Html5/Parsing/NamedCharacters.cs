/*
 * **************************************************************************
 *
 * Copyright (c) Todor Todorov / Scientia Software. 
 *
 * This source code is subject to terms and conditions of the 
 * license agreement found in the project directory. 
 * See: $(ProjectDir)\LICENSE.txt ... in the root of this project.
 * By using this source code in any fashion, you are agreeing 
 * to be bound by the terms of the license agreement.
 *
 * You must not remove this notice, or any other, from this software.
 *
 * **************************************************************************
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Scientia.HtmlRenderer.Html5.Parsing
{
    /// <summary>
    /// Helper class containing functionality related to named characters.
    /// See: http://www.w3.org/TR/html52/syntax.html#named-character-references
    /// </summary>
    internal static class NamedCharacters
    {
        private static readonly KeyValuePair<string, string>[] SortedNameMap;

        public static readonly int MaxNameLength;

        static NamedCharacters()
        {
            Dictionary<string, string> characters = NamedCharacters.GetCharacters();

            // Create a list for binary searching
            NamedCharacters.SortedNameMap = characters.ToArray();
            Array.Sort(NamedCharacters.SortedNameMap, Comparer.Default);

            // Calculate the maximum length
            NamedCharacters.MaxNameLength = characters.Max(pair => pair.Key.Length);
        }

        private class Comparer : IComparer<KeyValuePair<string, string>>
        {
            public static readonly Comparer Default = new Comparer();
            public int Compare(KeyValuePair<string, string> x, KeyValuePair<string, string> y)
            {
                return StringComparer.Ordinal.Compare(x.Key, y.Key);
            }

            public Match CompareMatch(string candidate, string name)
            {
                int len = Math.Min(candidate.Length, name.Length);

                for (int i = 0; i < len; i++)
                {
                    char cc = candidate[i];
                    char cn = name[i];
                    int comp = cc.CompareTo(cn);
                    if (comp < 0)
                        return Match.Before;
                    else if (comp > 0)
                        return Match.After;
                }

                if (candidate.Length < name.Length)
                    return Match.Before;
                else if (candidate.Length > name.Length)
                    return Match.PartialMatch;
                else
                    return Match.FullMatch;
            }

            public enum Match
            {
                Before,
                After,
                FullMatch,
                PartialMatch
            }
        }

        /// <summary>
        /// Represents a match from the <see cref="TryGetNamedCharacter(string)"/> method.
        /// </summary>
        public struct Match
        {
            public static readonly Match NoMatch = new Match();

            /// <summary>
            /// The character value of the named character.
            /// </summary>
            public string Character { get; private set; }

            /// <summary>
            /// The character reference name that matches the name given to the
            /// <see cref="NamedCharacters.TryGetNamedCharacter(string)"/> method.
            /// </summary>
            public string Name { get; private set; }

            /// <summary>
            /// If true, the <see cref="Name"/> matches 100% the named given to the
            /// <see cref="NamedCharacters.TryGetNamedCharacter(string)"/> method.
            /// Otherwise, this is a partial match, for example "am" was matched for
            /// "amp;" and the caller could try to continue matching by giving additional
            /// input to the TryGetNamedCharacter method. If several named characters
            /// match the given input, the first and the best is returned.
            /// </summary>
            public bool IsFullMatch { get; private set; }

            /// <summary>
            /// Indicates if the input to <see cref="NamedCharacters.TryGetNamedCharacter(string)"/>
            /// had any match at all (either partial or full match).
            /// </summary>
            public bool HasMatch
            {
                get { return this.Name != null; }
            }

            public char LastMatchedCharacter
            {
                get
                {
                    if (String.IsNullOrEmpty(this.Name))
                        return '\u0000';
                    else
                        return this.Name[this.Name.Length - 1];
                }
            }

            internal Match(KeyValuePair<string, string> pair, bool fullMatch)
            {
                this.Character = pair.Value;
                this.Name = pair.Key;
                this.IsFullMatch = fullMatch;
            }
        }

        /// <summary>
        /// Try find a named character with the given named. The logic looks for
        /// a named character with the given <paramref name="name"/> or alternatively 
        /// starting with the given <paramref name="name"/>.
        /// </summary>
        /// <param name="name">The character name to lookup.</param>
        /// <returns>Returns a <see cref="Match"/> containing information about the found named character.</returns>
        public static Match TryGetNamedCharacter(string name)
        {
            Contract.RequiresNotNull(name, nameof(name));

            if (name.Length > NamedCharacters.MaxNameLength)
                return Match.NoMatch;

            int lo = 0;
            int hi = NamedCharacters.SortedNameMap.Length - 1;
            int partial = -1;
            while (lo <= hi)
            {
                int i = lo + ((hi - lo) >> 1);
                Comparer.Match match = Comparer.Default.CompareMatch(NamedCharacters.SortedNameMap[i].Key, name);

                if (match == Comparer.Match.FullMatch)
                    return new Match(NamedCharacters.SortedNameMap[i], true);

                if (match == Comparer.Match.PartialMatch)
                {
                    partial = i;
                    match = Comparer.Match.After;
                }

                if (match == Comparer.Match.Before)
                    lo = i + 1;
                else
                    hi = i - 1;
            }

            if (partial != -1)
                return new Match(NamedCharacters.SortedNameMap[partial], false);

            return Match.NoMatch;
        }

        private static Dictionary<string, string> GetCharacters()
        {
            Dictionary<string, string> chars = new Dictionary<string, string>(StringComparer.Ordinal);

            // See: http://www.w3.org/TR/html52/syntax.html#named-character-references
            // See: http://www.w3.org/TR/html52/entities.json
            chars.Add("Aacute;", "\u00C1");
            chars.Add("Aacute", "\u00C1");
            chars.Add("aacute;", "\u00E1");
            chars.Add("aacute", "\u00E1");
            chars.Add("Abreve;", "\u0102");
            chars.Add("abreve;", "\u0103");
            chars.Add("ac;", "\u223E");
            chars.Add("acd;", "\u223F");
            chars.Add("acE;", "\u223E\u0333");
            chars.Add("Acirc;", "\u00C2");
            chars.Add("Acirc", "\u00C2");
            chars.Add("acirc;", "\u00E2");
            chars.Add("acirc", "\u00E2");
            chars.Add("acute;", "\u00B4");
            chars.Add("acute", "\u00B4");
            chars.Add("Acy;", "\u0410");
            chars.Add("acy;", "\u0430");
            chars.Add("AElig;", "\u00C6");
            chars.Add("AElig", "\u00C6");
            chars.Add("aelig;", "\u00E6");
            chars.Add("aelig", "\u00E6");
            chars.Add("af;", "\u2061");
            chars.Add("Afr;", "\uD835\uDD04");
            chars.Add("afr;", "\uD835\uDD1E");
            chars.Add("Agrave;", "\u00C0");
            chars.Add("Agrave", "\u00C0");
            chars.Add("agrave;", "\u00E0");
            chars.Add("agrave", "\u00E0");
            chars.Add("alefsym;", "\u2135");
            chars.Add("aleph;", "\u2135");
            chars.Add("Alpha;", "\u0391");
            chars.Add("alpha;", "\u03B1");
            chars.Add("Amacr;", "\u0100");
            chars.Add("amacr;", "\u0101");
            chars.Add("amalg;", "\u2A3F");
            chars.Add("amp;", "\u0026");
            chars.Add("amp", "\u0026");
            chars.Add("AMP;", "\u0026");
            chars.Add("AMP", "\u0026");
            chars.Add("andand;", "\u2A55");
            chars.Add("And;", "\u2A53");
            chars.Add("and;", "\u2227");
            chars.Add("andd;", "\u2A5C");
            chars.Add("andslope;", "\u2A58");
            chars.Add("andv;", "\u2A5A");
            chars.Add("ang;", "\u2220");
            chars.Add("ange;", "\u29A4");
            chars.Add("angle;", "\u2220");
            chars.Add("angmsdaa;", "\u29A8");
            chars.Add("angmsdab;", "\u29A9");
            chars.Add("angmsdac;", "\u29AA");
            chars.Add("angmsdad;", "\u29AB");
            chars.Add("angmsdae;", "\u29AC");
            chars.Add("angmsdaf;", "\u29AD");
            chars.Add("angmsdag;", "\u29AE");
            chars.Add("angmsdah;", "\u29AF");
            chars.Add("angmsd;", "\u2221");
            chars.Add("angrt;", "\u221F");
            chars.Add("angrtvb;", "\u22BE");
            chars.Add("angrtvbd;", "\u299D");
            chars.Add("angsph;", "\u2222");
            chars.Add("angst;", "\u00C5");
            chars.Add("angzarr;", "\u237C");
            chars.Add("Aogon;", "\u0104");
            chars.Add("aogon;", "\u0105");
            chars.Add("Aopf;", "\uD835\uDD38");
            chars.Add("aopf;", "\uD835\uDD52");
            chars.Add("apacir;", "\u2A6F");
            chars.Add("ap;", "\u2248");
            chars.Add("apE;", "\u2A70");
            chars.Add("ape;", "\u224A");
            chars.Add("apid;", "\u224B");
            chars.Add("apos;", "\u0027");
            chars.Add("ApplyFunction;", "\u2061");
            chars.Add("approx;", "\u2248");
            chars.Add("approxeq;", "\u224A");
            chars.Add("Aring;", "\u00C5");
            chars.Add("Aring", "\u00C5");
            chars.Add("aring;", "\u00E5");
            chars.Add("aring", "\u00E5");
            chars.Add("Ascr;", "\uD835\uDC9C");
            chars.Add("ascr;", "\uD835\uDCB6");
            chars.Add("Assign;", "\u2254");
            chars.Add("ast;", "\u002A");
            chars.Add("asymp;", "\u2248");
            chars.Add("asympeq;", "\u224D");
            chars.Add("Atilde;", "\u00C3");
            chars.Add("Atilde", "\u00C3");
            chars.Add("atilde;", "\u00E3");
            chars.Add("atilde", "\u00E3");
            chars.Add("Auml;", "\u00C4");
            chars.Add("Auml", "\u00C4");
            chars.Add("auml;", "\u00E4");
            chars.Add("auml", "\u00E4");
            chars.Add("awconint;", "\u2233");
            chars.Add("awint;", "\u2A11");
            chars.Add("backcong;", "\u224C");
            chars.Add("backepsilon;", "\u03F6");
            chars.Add("backprime;", "\u2035");
            chars.Add("backsim;", "\u223D");
            chars.Add("backsimeq;", "\u22CD");
            chars.Add("Backslash;", "\u2216");
            chars.Add("Barv;", "\u2AE7");
            chars.Add("barvee;", "\u22BD");
            chars.Add("barwed;", "\u2305");
            chars.Add("Barwed;", "\u2306");
            chars.Add("barwedge;", "\u2305");
            chars.Add("bbrk;", "\u23B5");
            chars.Add("bbrktbrk;", "\u23B6");
            chars.Add("bcong;", "\u224C");
            chars.Add("Bcy;", "\u0411");
            chars.Add("bcy;", "\u0431");
            chars.Add("bdquo;", "\u201E");
            chars.Add("becaus;", "\u2235");
            chars.Add("because;", "\u2235");
            chars.Add("Because;", "\u2235");
            chars.Add("bemptyv;", "\u29B0");
            chars.Add("bepsi;", "\u03F6");
            chars.Add("bernou;", "\u212C");
            chars.Add("Bernoullis;", "\u212C");
            chars.Add("Beta;", "\u0392");
            chars.Add("beta;", "\u03B2");
            chars.Add("beth;", "\u2136");
            chars.Add("between;", "\u226C");
            chars.Add("Bfr;", "\uD835\uDD05");
            chars.Add("bfr;", "\uD835\uDD1F");
            chars.Add("bigcap;", "\u22C2");
            chars.Add("bigcirc;", "\u25EF");
            chars.Add("bigcup;", "\u22C3");
            chars.Add("bigodot;", "\u2A00");
            chars.Add("bigoplus;", "\u2A01");
            chars.Add("bigotimes;", "\u2A02");
            chars.Add("bigsqcup;", "\u2A06");
            chars.Add("bigstar;", "\u2605");
            chars.Add("bigtriangledown;", "\u25BD");
            chars.Add("bigtriangleup;", "\u25B3");
            chars.Add("biguplus;", "\u2A04");
            chars.Add("bigvee;", "\u22C1");
            chars.Add("bigwedge;", "\u22C0");
            chars.Add("bkarow;", "\u290D");
            chars.Add("blacklozenge;", "\u29EB");
            chars.Add("blacksquare;", "\u25AA");
            chars.Add("blacktriangle;", "\u25B4");
            chars.Add("blacktriangledown;", "\u25BE");
            chars.Add("blacktriangleleft;", "\u25C2");
            chars.Add("blacktriangleright;", "\u25B8");
            chars.Add("blank;", "\u2423");
            chars.Add("blk12;", "\u2592");
            chars.Add("blk14;", "\u2591");
            chars.Add("blk34;", "\u2593");
            chars.Add("block;", "\u2588");
            chars.Add("bne;", "\u003D\u20E5");
            chars.Add("bnequiv;", "\u2261\u20E5");
            chars.Add("bNot;", "\u2AED");
            chars.Add("bnot;", "\u2310");
            chars.Add("Bopf;", "\uD835\uDD39");
            chars.Add("bopf;", "\uD835\uDD53");
            chars.Add("bot;", "\u22A5");
            chars.Add("bottom;", "\u22A5");
            chars.Add("bowtie;", "\u22C8");
            chars.Add("boxbox;", "\u29C9");
            chars.Add("boxdl;", "\u2510");
            chars.Add("boxdL;", "\u2555");
            chars.Add("boxDl;", "\u2556");
            chars.Add("boxDL;", "\u2557");
            chars.Add("boxdr;", "\u250C");
            chars.Add("boxdR;", "\u2552");
            chars.Add("boxDr;", "\u2553");
            chars.Add("boxDR;", "\u2554");
            chars.Add("boxh;", "\u2500");
            chars.Add("boxH;", "\u2550");
            chars.Add("boxhd;", "\u252C");
            chars.Add("boxHd;", "\u2564");
            chars.Add("boxhD;", "\u2565");
            chars.Add("boxHD;", "\u2566");
            chars.Add("boxhu;", "\u2534");
            chars.Add("boxHu;", "\u2567");
            chars.Add("boxhU;", "\u2568");
            chars.Add("boxHU;", "\u2569");
            chars.Add("boxminus;", "\u229F");
            chars.Add("boxplus;", "\u229E");
            chars.Add("boxtimes;", "\u22A0");
            chars.Add("boxul;", "\u2518");
            chars.Add("boxuL;", "\u255B");
            chars.Add("boxUl;", "\u255C");
            chars.Add("boxUL;", "\u255D");
            chars.Add("boxur;", "\u2514");
            chars.Add("boxuR;", "\u2558");
            chars.Add("boxUr;", "\u2559");
            chars.Add("boxUR;", "\u255A");
            chars.Add("boxv;", "\u2502");
            chars.Add("boxV;", "\u2551");
            chars.Add("boxvh;", "\u253C");
            chars.Add("boxvH;", "\u256A");
            chars.Add("boxVh;", "\u256B");
            chars.Add("boxVH;", "\u256C");
            chars.Add("boxvl;", "\u2524");
            chars.Add("boxvL;", "\u2561");
            chars.Add("boxVl;", "\u2562");
            chars.Add("boxVL;", "\u2563");
            chars.Add("boxvr;", "\u251C");
            chars.Add("boxvR;", "\u255E");
            chars.Add("boxVr;", "\u255F");
            chars.Add("boxVR;", "\u2560");
            chars.Add("bprime;", "\u2035");
            chars.Add("breve;", "\u02D8");
            chars.Add("Breve;", "\u02D8");
            chars.Add("brvbar;", "\u00A6");
            chars.Add("brvbar", "\u00A6");
            chars.Add("bscr;", "\uD835\uDCB7");
            chars.Add("Bscr;", "\u212C");
            chars.Add("bsemi;", "\u204F");
            chars.Add("bsim;", "\u223D");
            chars.Add("bsime;", "\u22CD");
            chars.Add("bsolb;", "\u29C5");
            chars.Add("bsol;", "\u005C");
            chars.Add("bsolhsub;", "\u27C8");
            chars.Add("bull;", "\u2022");
            chars.Add("bullet;", "\u2022");
            chars.Add("bump;", "\u224E");
            chars.Add("bumpE;", "\u2AAE");
            chars.Add("bumpe;", "\u224F");
            chars.Add("Bumpeq;", "\u224E");
            chars.Add("bumpeq;", "\u224F");
            chars.Add("Cacute;", "\u0106");
            chars.Add("cacute;", "\u0107");
            chars.Add("capand;", "\u2A44");
            chars.Add("capbrcup;", "\u2A49");
            chars.Add("capcap;", "\u2A4B");
            chars.Add("cap;", "\u2229");
            chars.Add("Cap;", "\u22D2");
            chars.Add("capcup;", "\u2A47");
            chars.Add("capdot;", "\u2A40");
            chars.Add("CapitalDifferentialD;", "\u2145");
            chars.Add("caps;", "\u2229\uFE00");
            chars.Add("caret;", "\u2041");
            chars.Add("caron;", "\u02C7");
            chars.Add("Cayleys;", "\u212D");
            chars.Add("ccaps;", "\u2A4D");
            chars.Add("Ccaron;", "\u010C");
            chars.Add("ccaron;", "\u010D");
            chars.Add("Ccedil;", "\u00C7");
            chars.Add("Ccedil", "\u00C7");
            chars.Add("ccedil;", "\u00E7");
            chars.Add("ccedil", "\u00E7");
            chars.Add("Ccirc;", "\u0108");
            chars.Add("ccirc;", "\u0109");
            chars.Add("Cconint;", "\u2230");
            chars.Add("ccups;", "\u2A4C");
            chars.Add("ccupssm;", "\u2A50");
            chars.Add("Cdot;", "\u010A");
            chars.Add("cdot;", "\u010B");
            chars.Add("cedil;", "\u00B8");
            chars.Add("cedil", "\u00B8");
            chars.Add("Cedilla;", "\u00B8");
            chars.Add("cemptyv;", "\u29B2");
            chars.Add("cent;", "\u00A2");
            chars.Add("cent", "\u00A2");
            chars.Add("centerdot;", "\u00B7");
            chars.Add("CenterDot;", "\u00B7");
            chars.Add("cfr;", "\uD835\uDD20");
            chars.Add("Cfr;", "\u212D");
            chars.Add("CHcy;", "\u0427");
            chars.Add("chcy;", "\u0447");
            chars.Add("check;", "\u2713");
            chars.Add("checkmark;", "\u2713");
            chars.Add("Chi;", "\u03A7");
            chars.Add("chi;", "\u03C7");
            chars.Add("circ;", "\u02C6");
            chars.Add("circeq;", "\u2257");
            chars.Add("circlearrowleft;", "\u21BA");
            chars.Add("circlearrowright;", "\u21BB");
            chars.Add("circledast;", "\u229B");
            chars.Add("circledcirc;", "\u229A");
            chars.Add("circleddash;", "\u229D");
            chars.Add("CircleDot;", "\u2299");
            chars.Add("circledR;", "\u00AE");
            chars.Add("circledS;", "\u24C8");
            chars.Add("CircleMinus;", "\u2296");
            chars.Add("CirclePlus;", "\u2295");
            chars.Add("CircleTimes;", "\u2297");
            chars.Add("cir;", "\u25CB");
            chars.Add("cirE;", "\u29C3");
            chars.Add("cire;", "\u2257");
            chars.Add("cirfnint;", "\u2A10");
            chars.Add("cirmid;", "\u2AEF");
            chars.Add("cirscir;", "\u29C2");
            chars.Add("ClockwiseContourIntegral;", "\u2232");
            chars.Add("CloseCurlyDoubleQuote;", "\u201D");
            chars.Add("CloseCurlyQuote;", "\u2019");
            chars.Add("clubs;", "\u2663");
            chars.Add("clubsuit;", "\u2663");
            chars.Add("colon;", "\u003A");
            chars.Add("Colon;", "\u2237");
            chars.Add("Colone;", "\u2A74");
            chars.Add("colone;", "\u2254");
            chars.Add("coloneq;", "\u2254");
            chars.Add("comma;", "\u002C");
            chars.Add("commat;", "\u0040");
            chars.Add("comp;", "\u2201");
            chars.Add("compfn;", "\u2218");
            chars.Add("complement;", "\u2201");
            chars.Add("complexes;", "\u2102");
            chars.Add("cong;", "\u2245");
            chars.Add("congdot;", "\u2A6D");
            chars.Add("Congruent;", "\u2261");
            chars.Add("conint;", "\u222E");
            chars.Add("Conint;", "\u222F");
            chars.Add("ContourIntegral;", "\u222E");
            chars.Add("copf;", "\uD835\uDD54");
            chars.Add("Copf;", "\u2102");
            chars.Add("coprod;", "\u2210");
            chars.Add("Coproduct;", "\u2210");
            chars.Add("copy;", "\u00A9");
            chars.Add("copy", "\u00A9");
            chars.Add("COPY;", "\u00A9");
            chars.Add("COPY", "\u00A9");
            chars.Add("copysr;", "\u2117");
            chars.Add("CounterClockwiseContourIntegral;", "\u2233");
            chars.Add("crarr;", "\u21B5");
            chars.Add("cross;", "\u2717");
            chars.Add("Cross;", "\u2A2F");
            chars.Add("Cscr;", "\uD835\uDC9E");
            chars.Add("cscr;", "\uD835\uDCB8");
            chars.Add("csub;", "\u2ACF");
            chars.Add("csube;", "\u2AD1");
            chars.Add("csup;", "\u2AD0");
            chars.Add("csupe;", "\u2AD2");
            chars.Add("ctdot;", "\u22EF");
            chars.Add("cudarrl;", "\u2938");
            chars.Add("cudarrr;", "\u2935");
            chars.Add("cuepr;", "\u22DE");
            chars.Add("cuesc;", "\u22DF");
            chars.Add("cularr;", "\u21B6");
            chars.Add("cularrp;", "\u293D");
            chars.Add("cupbrcap;", "\u2A48");
            chars.Add("cupcap;", "\u2A46");
            chars.Add("CupCap;", "\u224D");
            chars.Add("cup;", "\u222A");
            chars.Add("Cup;", "\u22D3");
            chars.Add("cupcup;", "\u2A4A");
            chars.Add("cupdot;", "\u228D");
            chars.Add("cupor;", "\u2A45");
            chars.Add("cups;", "\u222A\uFE00");
            chars.Add("curarr;", "\u21B7");
            chars.Add("curarrm;", "\u293C");
            chars.Add("curlyeqprec;", "\u22DE");
            chars.Add("curlyeqsucc;", "\u22DF");
            chars.Add("curlyvee;", "\u22CE");
            chars.Add("curlywedge;", "\u22CF");
            chars.Add("curren;", "\u00A4");
            chars.Add("curren", "\u00A4");
            chars.Add("curvearrowleft;", "\u21B6");
            chars.Add("curvearrowright;", "\u21B7");
            chars.Add("cuvee;", "\u22CE");
            chars.Add("cuwed;", "\u22CF");
            chars.Add("cwconint;", "\u2232");
            chars.Add("cwint;", "\u2231");
            chars.Add("cylcty;", "\u232D");
            chars.Add("dagger;", "\u2020");
            chars.Add("Dagger;", "\u2021");
            chars.Add("daleth;", "\u2138");
            chars.Add("darr;", "\u2193");
            chars.Add("Darr;", "\u21A1");
            chars.Add("dArr;", "\u21D3");
            chars.Add("dash;", "\u2010");
            chars.Add("Dashv;", "\u2AE4");
            chars.Add("dashv;", "\u22A3");
            chars.Add("dbkarow;", "\u290F");
            chars.Add("dblac;", "\u02DD");
            chars.Add("Dcaron;", "\u010E");
            chars.Add("dcaron;", "\u010F");
            chars.Add("Dcy;", "\u0414");
            chars.Add("dcy;", "\u0434");
            chars.Add("ddagger;", "\u2021");
            chars.Add("ddarr;", "\u21CA");
            chars.Add("DD;", "\u2145");
            chars.Add("dd;", "\u2146");
            chars.Add("DDotrahd;", "\u2911");
            chars.Add("ddotseq;", "\u2A77");
            chars.Add("deg;", "\u00B0");
            chars.Add("deg", "\u00B0");
            chars.Add("Del;", "\u2207");
            chars.Add("Delta;", "\u0394");
            chars.Add("delta;", "\u03B4");
            chars.Add("demptyv;", "\u29B1");
            chars.Add("dfisht;", "\u297F");
            chars.Add("Dfr;", "\uD835\uDD07");
            chars.Add("dfr;", "\uD835\uDD21");
            chars.Add("dHar;", "\u2965");
            chars.Add("dharl;", "\u21C3");
            chars.Add("dharr;", "\u21C2");
            chars.Add("DiacriticalAcute;", "\u00B4");
            chars.Add("DiacriticalDot;", "\u02D9");
            chars.Add("DiacriticalDoubleAcute;", "\u02DD");
            chars.Add("DiacriticalGrave;", "\u0060");
            chars.Add("DiacriticalTilde;", "\u02DC");
            chars.Add("diam;", "\u22C4");
            chars.Add("diamond;", "\u22C4");
            chars.Add("Diamond;", "\u22C4");
            chars.Add("diamondsuit;", "\u2666");
            chars.Add("diams;", "\u2666");
            chars.Add("die;", "\u00A8");
            chars.Add("DifferentialD;", "\u2146");
            chars.Add("digamma;", "\u03DD");
            chars.Add("disin;", "\u22F2");
            chars.Add("div;", "\u00F7");
            chars.Add("divide;", "\u00F7");
            chars.Add("divide", "\u00F7");
            chars.Add("divideontimes;", "\u22C7");
            chars.Add("divonx;", "\u22C7");
            chars.Add("DJcy;", "\u0402");
            chars.Add("djcy;", "\u0452");
            chars.Add("dlcorn;", "\u231E");
            chars.Add("dlcrop;", "\u230D");
            chars.Add("dollar;", "\u0024");
            chars.Add("Dopf;", "\uD835\uDD3B");
            chars.Add("dopf;", "\uD835\uDD55");
            chars.Add("Dot;", "\u00A8");
            chars.Add("dot;", "\u02D9");
            chars.Add("DotDot;", "\u20DC");
            chars.Add("doteq;", "\u2250");
            chars.Add("doteqdot;", "\u2251");
            chars.Add("DotEqual;", "\u2250");
            chars.Add("dotminus;", "\u2238");
            chars.Add("dotplus;", "\u2214");
            chars.Add("dotsquare;", "\u22A1");
            chars.Add("doublebarwedge;", "\u2306");
            chars.Add("DoubleContourIntegral;", "\u222F");
            chars.Add("DoubleDot;", "\u00A8");
            chars.Add("DoubleDownArrow;", "\u21D3");
            chars.Add("DoubleLeftArrow;", "\u21D0");
            chars.Add("DoubleLeftRightArrow;", "\u21D4");
            chars.Add("DoubleLeftTee;", "\u2AE4");
            chars.Add("DoubleLongLeftArrow;", "\u27F8");
            chars.Add("DoubleLongLeftRightArrow;", "\u27FA");
            chars.Add("DoubleLongRightArrow;", "\u27F9");
            chars.Add("DoubleRightArrow;", "\u21D2");
            chars.Add("DoubleRightTee;", "\u22A8");
            chars.Add("DoubleUpArrow;", "\u21D1");
            chars.Add("DoubleUpDownArrow;", "\u21D5");
            chars.Add("DoubleVerticalBar;", "\u2225");
            chars.Add("DownArrowBar;", "\u2913");
            chars.Add("downarrow;", "\u2193");
            chars.Add("DownArrow;", "\u2193");
            chars.Add("Downarrow;", "\u21D3");
            chars.Add("DownArrowUpArrow;", "\u21F5");
            chars.Add("DownBreve;", "\u0311");
            chars.Add("downdownarrows;", "\u21CA");
            chars.Add("downharpoonleft;", "\u21C3");
            chars.Add("downharpoonright;", "\u21C2");
            chars.Add("DownLeftRightVector;", "\u2950");
            chars.Add("DownLeftTeeVector;", "\u295E");
            chars.Add("DownLeftVectorBar;", "\u2956");
            chars.Add("DownLeftVector;", "\u21BD");
            chars.Add("DownRightTeeVector;", "\u295F");
            chars.Add("DownRightVectorBar;", "\u2957");
            chars.Add("DownRightVector;", "\u21C1");
            chars.Add("DownTeeArrow;", "\u21A7");
            chars.Add("DownTee;", "\u22A4");
            chars.Add("drbkarow;", "\u2910");
            chars.Add("drcorn;", "\u231F");
            chars.Add("drcrop;", "\u230C");
            chars.Add("Dscr;", "\uD835\uDC9F");
            chars.Add("dscr;", "\uD835\uDCB9");
            chars.Add("DScy;", "\u0405");
            chars.Add("dscy;", "\u0455");
            chars.Add("dsol;", "\u29F6");
            chars.Add("Dstrok;", "\u0110");
            chars.Add("dstrok;", "\u0111");
            chars.Add("dtdot;", "\u22F1");
            chars.Add("dtri;", "\u25BF");
            chars.Add("dtrif;", "\u25BE");
            chars.Add("duarr;", "\u21F5");
            chars.Add("duhar;", "\u296F");
            chars.Add("dwangle;", "\u29A6");
            chars.Add("DZcy;", "\u040F");
            chars.Add("dzcy;", "\u045F");
            chars.Add("dzigrarr;", "\u27FF");
            chars.Add("Eacute;", "\u00C9");
            chars.Add("Eacute", "\u00C9");
            chars.Add("eacute;", "\u00E9");
            chars.Add("eacute", "\u00E9");
            chars.Add("easter;", "\u2A6E");
            chars.Add("Ecaron;", "\u011A");
            chars.Add("ecaron;", "\u011B");
            chars.Add("Ecirc;", "\u00CA");
            chars.Add("Ecirc", "\u00CA");
            chars.Add("ecirc;", "\u00EA");
            chars.Add("ecirc", "\u00EA");
            chars.Add("ecir;", "\u2256");
            chars.Add("ecolon;", "\u2255");
            chars.Add("Ecy;", "\u042D");
            chars.Add("ecy;", "\u044D");
            chars.Add("eDDot;", "\u2A77");
            chars.Add("Edot;", "\u0116");
            chars.Add("edot;", "\u0117");
            chars.Add("eDot;", "\u2251");
            chars.Add("ee;", "\u2147");
            chars.Add("efDot;", "\u2252");
            chars.Add("Efr;", "\uD835\uDD08");
            chars.Add("efr;", "\uD835\uDD22");
            chars.Add("eg;", "\u2A9A");
            chars.Add("Egrave;", "\u00C8");
            chars.Add("Egrave", "\u00C8");
            chars.Add("egrave;", "\u00E8");
            chars.Add("egrave", "\u00E8");
            chars.Add("egs;", "\u2A96");
            chars.Add("egsdot;", "\u2A98");
            chars.Add("el;", "\u2A99");
            chars.Add("Element;", "\u2208");
            chars.Add("elinters;", "\u23E7");
            chars.Add("ell;", "\u2113");
            chars.Add("els;", "\u2A95");
            chars.Add("elsdot;", "\u2A97");
            chars.Add("Emacr;", "\u0112");
            chars.Add("emacr;", "\u0113");
            chars.Add("empty;", "\u2205");
            chars.Add("emptyset;", "\u2205");
            chars.Add("EmptySmallSquare;", "\u25FB");
            chars.Add("emptyv;", "\u2205");
            chars.Add("EmptyVerySmallSquare;", "\u25AB");
            chars.Add("emsp13;", "\u2004");
            chars.Add("emsp14;", "\u2005");
            chars.Add("emsp;", "\u2003");
            chars.Add("ENG;", "\u014A");
            chars.Add("eng;", "\u014B");
            chars.Add("ensp;", "\u2002");
            chars.Add("Eogon;", "\u0118");
            chars.Add("eogon;", "\u0119");
            chars.Add("Eopf;", "\uD835\uDD3C");
            chars.Add("eopf;", "\uD835\uDD56");
            chars.Add("epar;", "\u22D5");
            chars.Add("eparsl;", "\u29E3");
            chars.Add("eplus;", "\u2A71");
            chars.Add("epsi;", "\u03B5");
            chars.Add("Epsilon;", "\u0395");
            chars.Add("epsilon;", "\u03B5");
            chars.Add("epsiv;", "\u03F5");
            chars.Add("eqcirc;", "\u2256");
            chars.Add("eqcolon;", "\u2255");
            chars.Add("eqsim;", "\u2242");
            chars.Add("eqslantgtr;", "\u2A96");
            chars.Add("eqslantless;", "\u2A95");
            chars.Add("Equal;", "\u2A75");
            chars.Add("equals;", "\u003D");
            chars.Add("EqualTilde;", "\u2242");
            chars.Add("equest;", "\u225F");
            chars.Add("Equilibrium;", "\u21CC");
            chars.Add("equiv;", "\u2261");
            chars.Add("equivDD;", "\u2A78");
            chars.Add("eqvparsl;", "\u29E5");
            chars.Add("erarr;", "\u2971");
            chars.Add("erDot;", "\u2253");
            chars.Add("escr;", "\u212F");
            chars.Add("Escr;", "\u2130");
            chars.Add("esdot;", "\u2250");
            chars.Add("Esim;", "\u2A73");
            chars.Add("esim;", "\u2242");
            chars.Add("Eta;", "\u0397");
            chars.Add("eta;", "\u03B7");
            chars.Add("ETH;", "\u00D0");
            chars.Add("ETH", "\u00D0");
            chars.Add("eth;", "\u00F0");
            chars.Add("eth", "\u00F0");
            chars.Add("Euml;", "\u00CB");
            chars.Add("Euml", "\u00CB");
            chars.Add("euml;", "\u00EB");
            chars.Add("euml", "\u00EB");
            chars.Add("euro;", "\u20AC");
            chars.Add("excl;", "\u0021");
            chars.Add("exist;", "\u2203");
            chars.Add("Exists;", "\u2203");
            chars.Add("expectation;", "\u2130");
            chars.Add("exponentiale;", "\u2147");
            chars.Add("ExponentialE;", "\u2147");
            chars.Add("fallingdotseq;", "\u2252");
            chars.Add("Fcy;", "\u0424");
            chars.Add("fcy;", "\u0444");
            chars.Add("female;", "\u2640");
            chars.Add("ffilig;", "\uFB03");
            chars.Add("fflig;", "\uFB00");
            chars.Add("ffllig;", "\uFB04");
            chars.Add("Ffr;", "\uD835\uDD09");
            chars.Add("ffr;", "\uD835\uDD23");
            chars.Add("filig;", "\uFB01");
            chars.Add("FilledSmallSquare;", "\u25FC");
            chars.Add("FilledVerySmallSquare;", "\u25AA");
            chars.Add("fjlig;", "\u0066\u006A");
            chars.Add("flat;", "\u266D");
            chars.Add("fllig;", "\uFB02");
            chars.Add("fltns;", "\u25B1");
            chars.Add("fnof;", "\u0192");
            chars.Add("Fopf;", "\uD835\uDD3D");
            chars.Add("fopf;", "\uD835\uDD57");
            chars.Add("forall;", "\u2200");
            chars.Add("ForAll;", "\u2200");
            chars.Add("fork;", "\u22D4");
            chars.Add("forkv;", "\u2AD9");
            chars.Add("Fouriertrf;", "\u2131");
            chars.Add("fpartint;", "\u2A0D");
            chars.Add("frac12;", "\u00BD");
            chars.Add("frac12", "\u00BD");
            chars.Add("frac13;", "\u2153");
            chars.Add("frac14;", "\u00BC");
            chars.Add("frac14", "\u00BC");
            chars.Add("frac15;", "\u2155");
            chars.Add("frac16;", "\u2159");
            chars.Add("frac18;", "\u215B");
            chars.Add("frac23;", "\u2154");
            chars.Add("frac25;", "\u2156");
            chars.Add("frac34;", "\u00BE");
            chars.Add("frac34", "\u00BE");
            chars.Add("frac35;", "\u2157");
            chars.Add("frac38;", "\u215C");
            chars.Add("frac45;", "\u2158");
            chars.Add("frac56;", "\u215A");
            chars.Add("frac58;", "\u215D");
            chars.Add("frac78;", "\u215E");
            chars.Add("frasl;", "\u2044");
            chars.Add("frown;", "\u2322");
            chars.Add("fscr;", "\uD835\uDCBB");
            chars.Add("Fscr;", "\u2131");
            chars.Add("gacute;", "\u01F5");
            chars.Add("Gamma;", "\u0393");
            chars.Add("gamma;", "\u03B3");
            chars.Add("Gammad;", "\u03DC");
            chars.Add("gammad;", "\u03DD");
            chars.Add("gap;", "\u2A86");
            chars.Add("Gbreve;", "\u011E");
            chars.Add("gbreve;", "\u011F");
            chars.Add("Gcedil;", "\u0122");
            chars.Add("Gcirc;", "\u011C");
            chars.Add("gcirc;", "\u011D");
            chars.Add("Gcy;", "\u0413");
            chars.Add("gcy;", "\u0433");
            chars.Add("Gdot;", "\u0120");
            chars.Add("gdot;", "\u0121");
            chars.Add("ge;", "\u2265");
            chars.Add("gE;", "\u2267");
            chars.Add("gEl;", "\u2A8C");
            chars.Add("gel;", "\u22DB");
            chars.Add("geq;", "\u2265");
            chars.Add("geqq;", "\u2267");
            chars.Add("geqslant;", "\u2A7E");
            chars.Add("gescc;", "\u2AA9");
            chars.Add("ges;", "\u2A7E");
            chars.Add("gesdot;", "\u2A80");
            chars.Add("gesdoto;", "\u2A82");
            chars.Add("gesdotol;", "\u2A84");
            chars.Add("gesl;", "\u22DB\uFE00");
            chars.Add("gesles;", "\u2A94");
            chars.Add("Gfr;", "\uD835\uDD0A");
            chars.Add("gfr;", "\uD835\uDD24");
            chars.Add("gg;", "\u226B");
            chars.Add("Gg;", "\u22D9");
            chars.Add("ggg;", "\u22D9");
            chars.Add("gimel;", "\u2137");
            chars.Add("GJcy;", "\u0403");
            chars.Add("gjcy;", "\u0453");
            chars.Add("gla;", "\u2AA5");
            chars.Add("gl;", "\u2277");
            chars.Add("glE;", "\u2A92");
            chars.Add("glj;", "\u2AA4");
            chars.Add("gnap;", "\u2A8A");
            chars.Add("gnapprox;", "\u2A8A");
            chars.Add("gne;", "\u2A88");
            chars.Add("gnE;", "\u2269");
            chars.Add("gneq;", "\u2A88");
            chars.Add("gneqq;", "\u2269");
            chars.Add("gnsim;", "\u22E7");
            chars.Add("Gopf;", "\uD835\uDD3E");
            chars.Add("gopf;", "\uD835\uDD58");
            chars.Add("grave;", "\u0060");
            chars.Add("GreaterEqual;", "\u2265");
            chars.Add("GreaterEqualLess;", "\u22DB");
            chars.Add("GreaterFullEqual;", "\u2267");
            chars.Add("GreaterGreater;", "\u2AA2");
            chars.Add("GreaterLess;", "\u2277");
            chars.Add("GreaterSlantEqual;", "\u2A7E");
            chars.Add("GreaterTilde;", "\u2273");
            chars.Add("Gscr;", "\uD835\uDCA2");
            chars.Add("gscr;", "\u210A");
            chars.Add("gsim;", "\u2273");
            chars.Add("gsime;", "\u2A8E");
            chars.Add("gsiml;", "\u2A90");
            chars.Add("gtcc;", "\u2AA7");
            chars.Add("gtcir;", "\u2A7A");
            chars.Add("gt;", "\u003E");
            chars.Add("gt", "\u003E");
            chars.Add("GT;", "\u003E");
            chars.Add("GT", "\u003E");
            chars.Add("Gt;", "\u226B");
            chars.Add("gtdot;", "\u22D7");
            chars.Add("gtlPar;", "\u2995");
            chars.Add("gtquest;", "\u2A7C");
            chars.Add("gtrapprox;", "\u2A86");
            chars.Add("gtrarr;", "\u2978");
            chars.Add("gtrdot;", "\u22D7");
            chars.Add("gtreqless;", "\u22DB");
            chars.Add("gtreqqless;", "\u2A8C");
            chars.Add("gtrless;", "\u2277");
            chars.Add("gtrsim;", "\u2273");
            chars.Add("gvertneqq;", "\u2269\uFE00");
            chars.Add("gvnE;", "\u2269\uFE00");
            chars.Add("Hacek;", "\u02C7");
            chars.Add("hairsp;", "\u200A");
            chars.Add("half;", "\u00BD");
            chars.Add("hamilt;", "\u210B");
            chars.Add("HARDcy;", "\u042A");
            chars.Add("hardcy;", "\u044A");
            chars.Add("harrcir;", "\u2948");
            chars.Add("harr;", "\u2194");
            chars.Add("hArr;", "\u21D4");
            chars.Add("harrw;", "\u21AD");
            chars.Add("Hat;", "\u005E");
            chars.Add("hbar;", "\u210F");
            chars.Add("Hcirc;", "\u0124");
            chars.Add("hcirc;", "\u0125");
            chars.Add("hearts;", "\u2665");
            chars.Add("heartsuit;", "\u2665");
            chars.Add("hellip;", "\u2026");
            chars.Add("hercon;", "\u22B9");
            chars.Add("hfr;", "\uD835\uDD25");
            chars.Add("Hfr;", "\u210C");
            chars.Add("HilbertSpace;", "\u210B");
            chars.Add("hksearow;", "\u2925");
            chars.Add("hkswarow;", "\u2926");
            chars.Add("hoarr;", "\u21FF");
            chars.Add("homtht;", "\u223B");
            chars.Add("hookleftarrow;", "\u21A9");
            chars.Add("hookrightarrow;", "\u21AA");
            chars.Add("hopf;", "\uD835\uDD59");
            chars.Add("Hopf;", "\u210D");
            chars.Add("horbar;", "\u2015");
            chars.Add("HorizontalLine;", "\u2500");
            chars.Add("hscr;", "\uD835\uDCBD");
            chars.Add("Hscr;", "\u210B");
            chars.Add("hslash;", "\u210F");
            chars.Add("Hstrok;", "\u0126");
            chars.Add("hstrok;", "\u0127");
            chars.Add("HumpDownHump;", "\u224E");
            chars.Add("HumpEqual;", "\u224F");
            chars.Add("hybull;", "\u2043");
            chars.Add("hyphen;", "\u2010");
            chars.Add("Iacute;", "\u00CD");
            chars.Add("Iacute", "\u00CD");
            chars.Add("iacute;", "\u00ED");
            chars.Add("iacute", "\u00ED");
            chars.Add("ic;", "\u2063");
            chars.Add("Icirc;", "\u00CE");
            chars.Add("Icirc", "\u00CE");
            chars.Add("icirc;", "\u00EE");
            chars.Add("icirc", "\u00EE");
            chars.Add("Icy;", "\u0418");
            chars.Add("icy;", "\u0438");
            chars.Add("Idot;", "\u0130");
            chars.Add("IEcy;", "\u0415");
            chars.Add("iecy;", "\u0435");
            chars.Add("iexcl;", "\u00A1");
            chars.Add("iexcl", "\u00A1");
            chars.Add("iff;", "\u21D4");
            chars.Add("ifr;", "\uD835\uDD26");
            chars.Add("Ifr;", "\u2111");
            chars.Add("Igrave;", "\u00CC");
            chars.Add("Igrave", "\u00CC");
            chars.Add("igrave;", "\u00EC");
            chars.Add("igrave", "\u00EC");
            chars.Add("ii;", "\u2148");
            chars.Add("iiiint;", "\u2A0C");
            chars.Add("iiint;", "\u222D");
            chars.Add("iinfin;", "\u29DC");
            chars.Add("iiota;", "\u2129");
            chars.Add("IJlig;", "\u0132");
            chars.Add("ijlig;", "\u0133");
            chars.Add("Imacr;", "\u012A");
            chars.Add("imacr;", "\u012B");
            chars.Add("image;", "\u2111");
            chars.Add("ImaginaryI;", "\u2148");
            chars.Add("imagline;", "\u2110");
            chars.Add("imagpart;", "\u2111");
            chars.Add("imath;", "\u0131");
            chars.Add("Im;", "\u2111");
            chars.Add("imof;", "\u22B7");
            chars.Add("imped;", "\u01B5");
            chars.Add("Implies;", "\u21D2");
            chars.Add("incare;", "\u2105");
            chars.Add("in;", "\u2208");
            chars.Add("infin;", "\u221E");
            chars.Add("infintie;", "\u29DD");
            chars.Add("inodot;", "\u0131");
            chars.Add("intcal;", "\u22BA");
            chars.Add("int;", "\u222B");
            chars.Add("Int;", "\u222C");
            chars.Add("integers;", "\u2124");
            chars.Add("Integral;", "\u222B");
            chars.Add("intercal;", "\u22BA");
            chars.Add("Intersection;", "\u22C2");
            chars.Add("intlarhk;", "\u2A17");
            chars.Add("intprod;", "\u2A3C");
            chars.Add("InvisibleComma;", "\u2063");
            chars.Add("InvisibleTimes;", "\u2062");
            chars.Add("IOcy;", "\u0401");
            chars.Add("iocy;", "\u0451");
            chars.Add("Iogon;", "\u012E");
            chars.Add("iogon;", "\u012F");
            chars.Add("Iopf;", "\uD835\uDD40");
            chars.Add("iopf;", "\uD835\uDD5A");
            chars.Add("Iota;", "\u0399");
            chars.Add("iota;", "\u03B9");
            chars.Add("iprod;", "\u2A3C");
            chars.Add("iquest;", "\u00BF");
            chars.Add("iquest", "\u00BF");
            chars.Add("iscr;", "\uD835\uDCBE");
            chars.Add("Iscr;", "\u2110");
            chars.Add("isin;", "\u2208");
            chars.Add("isindot;", "\u22F5");
            chars.Add("isinE;", "\u22F9");
            chars.Add("isins;", "\u22F4");
            chars.Add("isinsv;", "\u22F3");
            chars.Add("isinv;", "\u2208");
            chars.Add("it;", "\u2062");
            chars.Add("Itilde;", "\u0128");
            chars.Add("itilde;", "\u0129");
            chars.Add("Iukcy;", "\u0406");
            chars.Add("iukcy;", "\u0456");
            chars.Add("Iuml;", "\u00CF");
            chars.Add("Iuml", "\u00CF");
            chars.Add("iuml;", "\u00EF");
            chars.Add("iuml", "\u00EF");
            chars.Add("Jcirc;", "\u0134");
            chars.Add("jcirc;", "\u0135");
            chars.Add("Jcy;", "\u0419");
            chars.Add("jcy;", "\u0439");
            chars.Add("Jfr;", "\uD835\uDD0D");
            chars.Add("jfr;", "\uD835\uDD27");
            chars.Add("jmath;", "\u0237");
            chars.Add("Jopf;", "\uD835\uDD41");
            chars.Add("jopf;", "\uD835\uDD5B");
            chars.Add("Jscr;", "\uD835\uDCA5");
            chars.Add("jscr;", "\uD835\uDCBF");
            chars.Add("Jsercy;", "\u0408");
            chars.Add("jsercy;", "\u0458");
            chars.Add("Jukcy;", "\u0404");
            chars.Add("jukcy;", "\u0454");
            chars.Add("Kappa;", "\u039A");
            chars.Add("kappa;", "\u03BA");
            chars.Add("kappav;", "\u03F0");
            chars.Add("Kcedil;", "\u0136");
            chars.Add("kcedil;", "\u0137");
            chars.Add("Kcy;", "\u041A");
            chars.Add("kcy;", "\u043A");
            chars.Add("Kfr;", "\uD835\uDD0E");
            chars.Add("kfr;", "\uD835\uDD28");
            chars.Add("kgreen;", "\u0138");
            chars.Add("KHcy;", "\u0425");
            chars.Add("khcy;", "\u0445");
            chars.Add("KJcy;", "\u040C");
            chars.Add("kjcy;", "\u045C");
            chars.Add("Kopf;", "\uD835\uDD42");
            chars.Add("kopf;", "\uD835\uDD5C");
            chars.Add("Kscr;", "\uD835\uDCA6");
            chars.Add("kscr;", "\uD835\uDCC0");
            chars.Add("lAarr;", "\u21DA");
            chars.Add("Lacute;", "\u0139");
            chars.Add("lacute;", "\u013A");
            chars.Add("laemptyv;", "\u29B4");
            chars.Add("lagran;", "\u2112");
            chars.Add("Lambda;", "\u039B");
            chars.Add("lambda;", "\u03BB");
            chars.Add("lang;", "\u27E8");
            chars.Add("Lang;", "\u27EA");
            chars.Add("langd;", "\u2991");
            chars.Add("langle;", "\u27E8");
            chars.Add("lap;", "\u2A85");
            chars.Add("Laplacetrf;", "\u2112");
            chars.Add("laquo;", "\u00AB");
            chars.Add("laquo", "\u00AB");
            chars.Add("larrb;", "\u21E4");
            chars.Add("larrbfs;", "\u291F");
            chars.Add("larr;", "\u2190");
            chars.Add("Larr;", "\u219E");
            chars.Add("lArr;", "\u21D0");
            chars.Add("larrfs;", "\u291D");
            chars.Add("larrhk;", "\u21A9");
            chars.Add("larrlp;", "\u21AB");
            chars.Add("larrpl;", "\u2939");
            chars.Add("larrsim;", "\u2973");
            chars.Add("larrtl;", "\u21A2");
            chars.Add("latail;", "\u2919");
            chars.Add("lAtail;", "\u291B");
            chars.Add("lat;", "\u2AAB");
            chars.Add("late;", "\u2AAD");
            chars.Add("lates;", "\u2AAD\uFE00");
            chars.Add("lbarr;", "\u290C");
            chars.Add("lBarr;", "\u290E");
            chars.Add("lbbrk;", "\u2772");
            chars.Add("lbrace;", "\u007B");
            chars.Add("lbrack;", "\u005B");
            chars.Add("lbrke;", "\u298B");
            chars.Add("lbrksld;", "\u298F");
            chars.Add("lbrkslu;", "\u298D");
            chars.Add("Lcaron;", "\u013D");
            chars.Add("lcaron;", "\u013E");
            chars.Add("Lcedil;", "\u013B");
            chars.Add("lcedil;", "\u013C");
            chars.Add("lceil;", "\u2308");
            chars.Add("lcub;", "\u007B");
            chars.Add("Lcy;", "\u041B");
            chars.Add("lcy;", "\u043B");
            chars.Add("ldca;", "\u2936");
            chars.Add("ldquo;", "\u201C");
            chars.Add("ldquor;", "\u201E");
            chars.Add("ldrdhar;", "\u2967");
            chars.Add("ldrushar;", "\u294B");
            chars.Add("ldsh;", "\u21B2");
            chars.Add("le;", "\u2264");
            chars.Add("lE;", "\u2266");
            chars.Add("LeftAngleBracket;", "\u27E8");
            chars.Add("LeftArrowBar;", "\u21E4");
            chars.Add("leftarrow;", "\u2190");
            chars.Add("LeftArrow;", "\u2190");
            chars.Add("Leftarrow;", "\u21D0");
            chars.Add("LeftArrowRightArrow;", "\u21C6");
            chars.Add("leftarrowtail;", "\u21A2");
            chars.Add("LeftCeiling;", "\u2308");
            chars.Add("LeftDoubleBracket;", "\u27E6");
            chars.Add("LeftDownTeeVector;", "\u2961");
            chars.Add("LeftDownVectorBar;", "\u2959");
            chars.Add("LeftDownVector;", "\u21C3");
            chars.Add("LeftFloor;", "\u230A");
            chars.Add("leftharpoondown;", "\u21BD");
            chars.Add("leftharpoonup;", "\u21BC");
            chars.Add("leftleftarrows;", "\u21C7");
            chars.Add("leftrightarrow;", "\u2194");
            chars.Add("LeftRightArrow;", "\u2194");
            chars.Add("Leftrightarrow;", "\u21D4");
            chars.Add("leftrightarrows;", "\u21C6");
            chars.Add("leftrightharpoons;", "\u21CB");
            chars.Add("leftrightsquigarrow;", "\u21AD");
            chars.Add("LeftRightVector;", "\u294E");
            chars.Add("LeftTeeArrow;", "\u21A4");
            chars.Add("LeftTee;", "\u22A3");
            chars.Add("LeftTeeVector;", "\u295A");
            chars.Add("leftthreetimes;", "\u22CB");
            chars.Add("LeftTriangleBar;", "\u29CF");
            chars.Add("LeftTriangle;", "\u22B2");
            chars.Add("LeftTriangleEqual;", "\u22B4");
            chars.Add("LeftUpDownVector;", "\u2951");
            chars.Add("LeftUpTeeVector;", "\u2960");
            chars.Add("LeftUpVectorBar;", "\u2958");
            chars.Add("LeftUpVector;", "\u21BF");
            chars.Add("LeftVectorBar;", "\u2952");
            chars.Add("LeftVector;", "\u21BC");
            chars.Add("lEg;", "\u2A8B");
            chars.Add("leg;", "\u22DA");
            chars.Add("leq;", "\u2264");
            chars.Add("leqq;", "\u2266");
            chars.Add("leqslant;", "\u2A7D");
            chars.Add("lescc;", "\u2AA8");
            chars.Add("les;", "\u2A7D");
            chars.Add("lesdot;", "\u2A7F");
            chars.Add("lesdoto;", "\u2A81");
            chars.Add("lesdotor;", "\u2A83");
            chars.Add("lesg;", "\u22DA\uFE00");
            chars.Add("lesges;", "\u2A93");
            chars.Add("lessapprox;", "\u2A85");
            chars.Add("lessdot;", "\u22D6");
            chars.Add("lesseqgtr;", "\u22DA");
            chars.Add("lesseqqgtr;", "\u2A8B");
            chars.Add("LessEqualGreater;", "\u22DA");
            chars.Add("LessFullEqual;", "\u2266");
            chars.Add("LessGreater;", "\u2276");
            chars.Add("lessgtr;", "\u2276");
            chars.Add("LessLess;", "\u2AA1");
            chars.Add("lesssim;", "\u2272");
            chars.Add("LessSlantEqual;", "\u2A7D");
            chars.Add("LessTilde;", "\u2272");
            chars.Add("lfisht;", "\u297C");
            chars.Add("lfloor;", "\u230A");
            chars.Add("Lfr;", "\uD835\uDD0F");
            chars.Add("lfr;", "\uD835\uDD29");
            chars.Add("lg;", "\u2276");
            chars.Add("lgE;", "\u2A91");
            chars.Add("lHar;", "\u2962");
            chars.Add("lhard;", "\u21BD");
            chars.Add("lharu;", "\u21BC");
            chars.Add("lharul;", "\u296A");
            chars.Add("lhblk;", "\u2584");
            chars.Add("LJcy;", "\u0409");
            chars.Add("ljcy;", "\u0459");
            chars.Add("llarr;", "\u21C7");
            chars.Add("ll;", "\u226A");
            chars.Add("Ll;", "\u22D8");
            chars.Add("llcorner;", "\u231E");
            chars.Add("Lleftarrow;", "\u21DA");
            chars.Add("llhard;", "\u296B");
            chars.Add("lltri;", "\u25FA");
            chars.Add("Lmidot;", "\u013F");
            chars.Add("lmidot;", "\u0140");
            chars.Add("lmoustache;", "\u23B0");
            chars.Add("lmoust;", "\u23B0");
            chars.Add("lnap;", "\u2A89");
            chars.Add("lnapprox;", "\u2A89");
            chars.Add("lne;", "\u2A87");
            chars.Add("lnE;", "\u2268");
            chars.Add("lneq;", "\u2A87");
            chars.Add("lneqq;", "\u2268");
            chars.Add("lnsim;", "\u22E6");
            chars.Add("loang;", "\u27EC");
            chars.Add("loarr;", "\u21FD");
            chars.Add("lobrk;", "\u27E6");
            chars.Add("longleftarrow;", "\u27F5");
            chars.Add("LongLeftArrow;", "\u27F5");
            chars.Add("Longleftarrow;", "\u27F8");
            chars.Add("longleftrightarrow;", "\u27F7");
            chars.Add("LongLeftRightArrow;", "\u27F7");
            chars.Add("Longleftrightarrow;", "\u27FA");
            chars.Add("longmapsto;", "\u27FC");
            chars.Add("longrightarrow;", "\u27F6");
            chars.Add("LongRightArrow;", "\u27F6");
            chars.Add("Longrightarrow;", "\u27F9");
            chars.Add("looparrowleft;", "\u21AB");
            chars.Add("looparrowright;", "\u21AC");
            chars.Add("lopar;", "\u2985");
            chars.Add("Lopf;", "\uD835\uDD43");
            chars.Add("lopf;", "\uD835\uDD5D");
            chars.Add("loplus;", "\u2A2D");
            chars.Add("lotimes;", "\u2A34");
            chars.Add("lowast;", "\u2217");
            chars.Add("lowbar;", "\u005F");
            chars.Add("LowerLeftArrow;", "\u2199");
            chars.Add("LowerRightArrow;", "\u2198");
            chars.Add("loz;", "\u25CA");
            chars.Add("lozenge;", "\u25CA");
            chars.Add("lozf;", "\u29EB");
            chars.Add("lpar;", "\u0028");
            chars.Add("lparlt;", "\u2993");
            chars.Add("lrarr;", "\u21C6");
            chars.Add("lrcorner;", "\u231F");
            chars.Add("lrhar;", "\u21CB");
            chars.Add("lrhard;", "\u296D");
            chars.Add("lrm;", "\u200E");
            chars.Add("lrtri;", "\u22BF");
            chars.Add("lsaquo;", "\u2039");
            chars.Add("lscr;", "\uD835\uDCC1");
            chars.Add("Lscr;", "\u2112");
            chars.Add("lsh;", "\u21B0");
            chars.Add("Lsh;", "\u21B0");
            chars.Add("lsim;", "\u2272");
            chars.Add("lsime;", "\u2A8D");
            chars.Add("lsimg;", "\u2A8F");
            chars.Add("lsqb;", "\u005B");
            chars.Add("lsquo;", "\u2018");
            chars.Add("lsquor;", "\u201A");
            chars.Add("Lstrok;", "\u0141");
            chars.Add("lstrok;", "\u0142");
            chars.Add("ltcc;", "\u2AA6");
            chars.Add("ltcir;", "\u2A79");
            chars.Add("lt;", "\u003C");
            chars.Add("lt", "\u003C");
            chars.Add("LT;", "\u003C");
            chars.Add("LT", "\u003C");
            chars.Add("Lt;", "\u226A");
            chars.Add("ltdot;", "\u22D6");
            chars.Add("lthree;", "\u22CB");
            chars.Add("ltimes;", "\u22C9");
            chars.Add("ltlarr;", "\u2976");
            chars.Add("ltquest;", "\u2A7B");
            chars.Add("ltri;", "\u25C3");
            chars.Add("ltrie;", "\u22B4");
            chars.Add("ltrif;", "\u25C2");
            chars.Add("ltrPar;", "\u2996");
            chars.Add("lurdshar;", "\u294A");
            chars.Add("luruhar;", "\u2966");
            chars.Add("lvertneqq;", "\u2268\uFE00");
            chars.Add("lvnE;", "\u2268\uFE00");
            chars.Add("macr;", "\u00AF");
            chars.Add("macr", "\u00AF");
            chars.Add("male;", "\u2642");
            chars.Add("malt;", "\u2720");
            chars.Add("maltese;", "\u2720");
            chars.Add("Map;", "\u2905");
            chars.Add("map;", "\u21A6");
            chars.Add("mapsto;", "\u21A6");
            chars.Add("mapstodown;", "\u21A7");
            chars.Add("mapstoleft;", "\u21A4");
            chars.Add("mapstoup;", "\u21A5");
            chars.Add("marker;", "\u25AE");
            chars.Add("mcomma;", "\u2A29");
            chars.Add("Mcy;", "\u041C");
            chars.Add("mcy;", "\u043C");
            chars.Add("mdash;", "\u2014");
            chars.Add("mDDot;", "\u223A");
            chars.Add("measuredangle;", "\u2221");
            chars.Add("MediumSpace;", "\u205F");
            chars.Add("Mellintrf;", "\u2133");
            chars.Add("Mfr;", "\uD835\uDD10");
            chars.Add("mfr;", "\uD835\uDD2A");
            chars.Add("mho;", "\u2127");
            chars.Add("micro;", "\u00B5");
            chars.Add("micro", "\u00B5");
            chars.Add("midast;", "\u002A");
            chars.Add("midcir;", "\u2AF0");
            chars.Add("mid;", "\u2223");
            chars.Add("middot;", "\u00B7");
            chars.Add("middot", "\u00B7");
            chars.Add("minusb;", "\u229F");
            chars.Add("minus;", "\u2212");
            chars.Add("minusd;", "\u2238");
            chars.Add("minusdu;", "\u2A2A");
            chars.Add("MinusPlus;", "\u2213");
            chars.Add("mlcp;", "\u2ADB");
            chars.Add("mldr;", "\u2026");
            chars.Add("mnplus;", "\u2213");
            chars.Add("models;", "\u22A7");
            chars.Add("Mopf;", "\uD835\uDD44");
            chars.Add("mopf;", "\uD835\uDD5E");
            chars.Add("mp;", "\u2213");
            chars.Add("mscr;", "\uD835\uDCC2");
            chars.Add("Mscr;", "\u2133");
            chars.Add("mstpos;", "\u223E");
            chars.Add("Mu;", "\u039C");
            chars.Add("mu;", "\u03BC");
            chars.Add("multimap;", "\u22B8");
            chars.Add("mumap;", "\u22B8");
            chars.Add("nabla;", "\u2207");
            chars.Add("Nacute;", "\u0143");
            chars.Add("nacute;", "\u0144");
            chars.Add("nang;", "\u2220\u20D2");
            chars.Add("nap;", "\u2249");
            chars.Add("napE;", "\u2A70\u0338");
            chars.Add("napid;", "\u224B\u0338");
            chars.Add("napos;", "\u0149");
            chars.Add("napprox;", "\u2249");
            chars.Add("natural;", "\u266E");
            chars.Add("naturals;", "\u2115");
            chars.Add("natur;", "\u266E");
            chars.Add("nbsp;", "\u00A0");
            chars.Add("nbsp", "\u00A0");
            chars.Add("nbump;", "\u224E\u0338");
            chars.Add("nbumpe;", "\u224F\u0338");
            chars.Add("ncap;", "\u2A43");
            chars.Add("Ncaron;", "\u0147");
            chars.Add("ncaron;", "\u0148");
            chars.Add("Ncedil;", "\u0145");
            chars.Add("ncedil;", "\u0146");
            chars.Add("ncong;", "\u2247");
            chars.Add("ncongdot;", "\u2A6D\u0338");
            chars.Add("ncup;", "\u2A42");
            chars.Add("Ncy;", "\u041D");
            chars.Add("ncy;", "\u043D");
            chars.Add("ndash;", "\u2013");
            chars.Add("nearhk;", "\u2924");
            chars.Add("nearr;", "\u2197");
            chars.Add("neArr;", "\u21D7");
            chars.Add("nearrow;", "\u2197");
            chars.Add("ne;", "\u2260");
            chars.Add("nedot;", "\u2250\u0338");
            chars.Add("NegativeMediumSpace;", "\u200B");
            chars.Add("NegativeThickSpace;", "\u200B");
            chars.Add("NegativeThinSpace;", "\u200B");
            chars.Add("NegativeVeryThinSpace;", "\u200B");
            chars.Add("nequiv;", "\u2262");
            chars.Add("nesear;", "\u2928");
            chars.Add("nesim;", "\u2242\u0338");
            chars.Add("NestedGreaterGreater;", "\u226B");
            chars.Add("NestedLessLess;", "\u226A");
            chars.Add("NewLine;", "\u000A");
            chars.Add("nexist;", "\u2204");
            chars.Add("nexists;", "\u2204");
            chars.Add("Nfr;", "\uD835\uDD11");
            chars.Add("nfr;", "\uD835\uDD2B");
            chars.Add("ngE;", "\u2267\u0338");
            chars.Add("nge;", "\u2271");
            chars.Add("ngeq;", "\u2271");
            chars.Add("ngeqq;", "\u2267\u0338");
            chars.Add("ngeqslant;", "\u2A7E\u0338");
            chars.Add("nges;", "\u2A7E\u0338");
            chars.Add("nGg;", "\u22D9\u0338");
            chars.Add("ngsim;", "\u2275");
            chars.Add("nGt;", "\u226B\u20D2");
            chars.Add("ngt;", "\u226F");
            chars.Add("ngtr;", "\u226F");
            chars.Add("nGtv;", "\u226B\u0338");
            chars.Add("nharr;", "\u21AE");
            chars.Add("nhArr;", "\u21CE");
            chars.Add("nhpar;", "\u2AF2");
            chars.Add("ni;", "\u220B");
            chars.Add("nis;", "\u22FC");
            chars.Add("nisd;", "\u22FA");
            chars.Add("niv;", "\u220B");
            chars.Add("NJcy;", "\u040A");
            chars.Add("njcy;", "\u045A");
            chars.Add("nlarr;", "\u219A");
            chars.Add("nlArr;", "\u21CD");
            chars.Add("nldr;", "\u2025");
            chars.Add("nlE;", "\u2266\u0338");
            chars.Add("nle;", "\u2270");
            chars.Add("nleftarrow;", "\u219A");
            chars.Add("nLeftarrow;", "\u21CD");
            chars.Add("nleftrightarrow;", "\u21AE");
            chars.Add("nLeftrightarrow;", "\u21CE");
            chars.Add("nleq;", "\u2270");
            chars.Add("nleqq;", "\u2266\u0338");
            chars.Add("nleqslant;", "\u2A7D\u0338");
            chars.Add("nles;", "\u2A7D\u0338");
            chars.Add("nless;", "\u226E");
            chars.Add("nLl;", "\u22D8\u0338");
            chars.Add("nlsim;", "\u2274");
            chars.Add("nLt;", "\u226A\u20D2");
            chars.Add("nlt;", "\u226E");
            chars.Add("nltri;", "\u22EA");
            chars.Add("nltrie;", "\u22EC");
            chars.Add("nLtv;", "\u226A\u0338");
            chars.Add("nmid;", "\u2224");
            chars.Add("NoBreak;", "\u2060");
            chars.Add("NonBreakingSpace;", "\u00A0");
            chars.Add("nopf;", "\uD835\uDD5F");
            chars.Add("Nopf;", "\u2115");
            chars.Add("Not;", "\u2AEC");
            chars.Add("not;", "\u00AC");
            chars.Add("not", "\u00AC");
            chars.Add("NotCongruent;", "\u2262");
            chars.Add("NotCupCap;", "\u226D");
            chars.Add("NotDoubleVerticalBar;", "\u2226");
            chars.Add("NotElement;", "\u2209");
            chars.Add("NotEqual;", "\u2260");
            chars.Add("NotEqualTilde;", "\u2242\u0338");
            chars.Add("NotExists;", "\u2204");
            chars.Add("NotGreater;", "\u226F");
            chars.Add("NotGreaterEqual;", "\u2271");
            chars.Add("NotGreaterFullEqual;", "\u2267\u0338");
            chars.Add("NotGreaterGreater;", "\u226B\u0338");
            chars.Add("NotGreaterLess;", "\u2279");
            chars.Add("NotGreaterSlantEqual;", "\u2A7E\u0338");
            chars.Add("NotGreaterTilde;", "\u2275");
            chars.Add("NotHumpDownHump;", "\u224E\u0338");
            chars.Add("NotHumpEqual;", "\u224F\u0338");
            chars.Add("notin;", "\u2209");
            chars.Add("notindot;", "\u22F5\u0338");
            chars.Add("notinE;", "\u22F9\u0338");
            chars.Add("notinva;", "\u2209");
            chars.Add("notinvb;", "\u22F7");
            chars.Add("notinvc;", "\u22F6");
            chars.Add("NotLeftTriangleBar;", "\u29CF\u0338");
            chars.Add("NotLeftTriangle;", "\u22EA");
            chars.Add("NotLeftTriangleEqual;", "\u22EC");
            chars.Add("NotLess;", "\u226E");
            chars.Add("NotLessEqual;", "\u2270");
            chars.Add("NotLessGreater;", "\u2278");
            chars.Add("NotLessLess;", "\u226A\u0338");
            chars.Add("NotLessSlantEqual;", "\u2A7D\u0338");
            chars.Add("NotLessTilde;", "\u2274");
            chars.Add("NotNestedGreaterGreater;", "\u2AA2\u0338");
            chars.Add("NotNestedLessLess;", "\u2AA1\u0338");
            chars.Add("notni;", "\u220C");
            chars.Add("notniva;", "\u220C");
            chars.Add("notnivb;", "\u22FE");
            chars.Add("notnivc;", "\u22FD");
            chars.Add("NotPrecedes;", "\u2280");
            chars.Add("NotPrecedesEqual;", "\u2AAF\u0338");
            chars.Add("NotPrecedesSlantEqual;", "\u22E0");
            chars.Add("NotReverseElement;", "\u220C");
            chars.Add("NotRightTriangleBar;", "\u29D0\u0338");
            chars.Add("NotRightTriangle;", "\u22EB");
            chars.Add("NotRightTriangleEqual;", "\u22ED");
            chars.Add("NotSquareSubset;", "\u228F\u0338");
            chars.Add("NotSquareSubsetEqual;", "\u22E2");
            chars.Add("NotSquareSuperset;", "\u2290\u0338");
            chars.Add("NotSquareSupersetEqual;", "\u22E3");
            chars.Add("NotSubset;", "\u2282\u20D2");
            chars.Add("NotSubsetEqual;", "\u2288");
            chars.Add("NotSucceeds;", "\u2281");
            chars.Add("NotSucceedsEqual;", "\u2AB0\u0338");
            chars.Add("NotSucceedsSlantEqual;", "\u22E1");
            chars.Add("NotSucceedsTilde;", "\u227F\u0338");
            chars.Add("NotSuperset;", "\u2283\u20D2");
            chars.Add("NotSupersetEqual;", "\u2289");
            chars.Add("NotTilde;", "\u2241");
            chars.Add("NotTildeEqual;", "\u2244");
            chars.Add("NotTildeFullEqual;", "\u2247");
            chars.Add("NotTildeTilde;", "\u2249");
            chars.Add("NotVerticalBar;", "\u2224");
            chars.Add("nparallel;", "\u2226");
            chars.Add("npar;", "\u2226");
            chars.Add("nparsl;", "\u2AFD\u20E5");
            chars.Add("npart;", "\u2202\u0338");
            chars.Add("npolint;", "\u2A14");
            chars.Add("npr;", "\u2280");
            chars.Add("nprcue;", "\u22E0");
            chars.Add("nprec;", "\u2280");
            chars.Add("npreceq;", "\u2AAF\u0338");
            chars.Add("npre;", "\u2AAF\u0338");
            chars.Add("nrarrc;", "\u2933\u0338");
            chars.Add("nrarr;", "\u219B");
            chars.Add("nrArr;", "\u21CF");
            chars.Add("nrarrw;", "\u219D\u0338");
            chars.Add("nrightarrow;", "\u219B");
            chars.Add("nRightarrow;", "\u21CF");
            chars.Add("nrtri;", "\u22EB");
            chars.Add("nrtrie;", "\u22ED");
            chars.Add("nsc;", "\u2281");
            chars.Add("nsccue;", "\u22E1");
            chars.Add("nsce;", "\u2AB0\u0338");
            chars.Add("Nscr;", "\uD835\uDCA9");
            chars.Add("nscr;", "\uD835\uDCC3");
            chars.Add("nshortmid;", "\u2224");
            chars.Add("nshortparallel;", "\u2226");
            chars.Add("nsim;", "\u2241");
            chars.Add("nsime;", "\u2244");
            chars.Add("nsimeq;", "\u2244");
            chars.Add("nsmid;", "\u2224");
            chars.Add("nspar;", "\u2226");
            chars.Add("nsqsube;", "\u22E2");
            chars.Add("nsqsupe;", "\u22E3");
            chars.Add("nsub;", "\u2284");
            chars.Add("nsubE;", "\u2AC5\u0338");
            chars.Add("nsube;", "\u2288");
            chars.Add("nsubset;", "\u2282\u20D2");
            chars.Add("nsubseteq;", "\u2288");
            chars.Add("nsubseteqq;", "\u2AC5\u0338");
            chars.Add("nsucc;", "\u2281");
            chars.Add("nsucceq;", "\u2AB0\u0338");
            chars.Add("nsup;", "\u2285");
            chars.Add("nsupE;", "\u2AC6\u0338");
            chars.Add("nsupe;", "\u2289");
            chars.Add("nsupset;", "\u2283\u20D2");
            chars.Add("nsupseteq;", "\u2289");
            chars.Add("nsupseteqq;", "\u2AC6\u0338");
            chars.Add("ntgl;", "\u2279");
            chars.Add("Ntilde;", "\u00D1");
            chars.Add("Ntilde", "\u00D1");
            chars.Add("ntilde;", "\u00F1");
            chars.Add("ntilde", "\u00F1");
            chars.Add("ntlg;", "\u2278");
            chars.Add("ntriangleleft;", "\u22EA");
            chars.Add("ntrianglelefteq;", "\u22EC");
            chars.Add("ntriangleright;", "\u22EB");
            chars.Add("ntrianglerighteq;", "\u22ED");
            chars.Add("Nu;", "\u039D");
            chars.Add("nu;", "\u03BD");
            chars.Add("num;", "\u0023");
            chars.Add("numero;", "\u2116");
            chars.Add("numsp;", "\u2007");
            chars.Add("nvap;", "\u224D\u20D2");
            chars.Add("nvdash;", "\u22AC");
            chars.Add("nvDash;", "\u22AD");
            chars.Add("nVdash;", "\u22AE");
            chars.Add("nVDash;", "\u22AF");
            chars.Add("nvge;", "\u2265\u20D2");
            chars.Add("nvgt;", "\u003E\u20D2");
            chars.Add("nvHarr;", "\u2904");
            chars.Add("nvinfin;", "\u29DE");
            chars.Add("nvlArr;", "\u2902");
            chars.Add("nvle;", "\u2264\u20D2");
            chars.Add("nvlt;", "\u003C\u20D2");
            chars.Add("nvltrie;", "\u22B4\u20D2");
            chars.Add("nvrArr;", "\u2903");
            chars.Add("nvrtrie;", "\u22B5\u20D2");
            chars.Add("nvsim;", "\u223C\u20D2");
            chars.Add("nwarhk;", "\u2923");
            chars.Add("nwarr;", "\u2196");
            chars.Add("nwArr;", "\u21D6");
            chars.Add("nwarrow;", "\u2196");
            chars.Add("nwnear;", "\u2927");
            chars.Add("Oacute;", "\u00D3");
            chars.Add("Oacute", "\u00D3");
            chars.Add("oacute;", "\u00F3");
            chars.Add("oacute", "\u00F3");
            chars.Add("oast;", "\u229B");
            chars.Add("Ocirc;", "\u00D4");
            chars.Add("Ocirc", "\u00D4");
            chars.Add("ocirc;", "\u00F4");
            chars.Add("ocirc", "\u00F4");
            chars.Add("ocir;", "\u229A");
            chars.Add("Ocy;", "\u041E");
            chars.Add("ocy;", "\u043E");
            chars.Add("odash;", "\u229D");
            chars.Add("Odblac;", "\u0150");
            chars.Add("odblac;", "\u0151");
            chars.Add("odiv;", "\u2A38");
            chars.Add("odot;", "\u2299");
            chars.Add("odsold;", "\u29BC");
            chars.Add("OElig;", "\u0152");
            chars.Add("oelig;", "\u0153");
            chars.Add("ofcir;", "\u29BF");
            chars.Add("Ofr;", "\uD835\uDD12");
            chars.Add("ofr;", "\uD835\uDD2C");
            chars.Add("ogon;", "\u02DB");
            chars.Add("Ograve;", "\u00D2");
            chars.Add("Ograve", "\u00D2");
            chars.Add("ograve;", "\u00F2");
            chars.Add("ograve", "\u00F2");
            chars.Add("ogt;", "\u29C1");
            chars.Add("ohbar;", "\u29B5");
            chars.Add("ohm;", "\u03A9");
            chars.Add("oint;", "\u222E");
            chars.Add("olarr;", "\u21BA");
            chars.Add("olcir;", "\u29BE");
            chars.Add("olcross;", "\u29BB");
            chars.Add("oline;", "\u203E");
            chars.Add("olt;", "\u29C0");
            chars.Add("Omacr;", "\u014C");
            chars.Add("omacr;", "\u014D");
            chars.Add("Omega;", "\u03A9");
            chars.Add("omega;", "\u03C9");
            chars.Add("Omicron;", "\u039F");
            chars.Add("omicron;", "\u03BF");
            chars.Add("omid;", "\u29B6");
            chars.Add("ominus;", "\u2296");
            chars.Add("Oopf;", "\uD835\uDD46");
            chars.Add("oopf;", "\uD835\uDD60");
            chars.Add("opar;", "\u29B7");
            chars.Add("OpenCurlyDoubleQuote;", "\u201C");
            chars.Add("OpenCurlyQuote;", "\u2018");
            chars.Add("operp;", "\u29B9");
            chars.Add("oplus;", "\u2295");
            chars.Add("orarr;", "\u21BB");
            chars.Add("Or;", "\u2A54");
            chars.Add("or;", "\u2228");
            chars.Add("ord;", "\u2A5D");
            chars.Add("order;", "\u2134");
            chars.Add("orderof;", "\u2134");
            chars.Add("ordf;", "\u00AA");
            chars.Add("ordf", "\u00AA");
            chars.Add("ordm;", "\u00BA");
            chars.Add("ordm", "\u00BA");
            chars.Add("origof;", "\u22B6");
            chars.Add("oror;", "\u2A56");
            chars.Add("orslope;", "\u2A57");
            chars.Add("orv;", "\u2A5B");
            chars.Add("oS;", "\u24C8");
            chars.Add("Oscr;", "\uD835\uDCAA");
            chars.Add("oscr;", "\u2134");
            chars.Add("Oslash;", "\u00D8");
            chars.Add("Oslash", "\u00D8");
            chars.Add("oslash;", "\u00F8");
            chars.Add("oslash", "\u00F8");
            chars.Add("osol;", "\u2298");
            chars.Add("Otilde;", "\u00D5");
            chars.Add("Otilde", "\u00D5");
            chars.Add("otilde;", "\u00F5");
            chars.Add("otilde", "\u00F5");
            chars.Add("otimesas;", "\u2A36");
            chars.Add("Otimes;", "\u2A37");
            chars.Add("otimes;", "\u2297");
            chars.Add("Ouml;", "\u00D6");
            chars.Add("Ouml", "\u00D6");
            chars.Add("ouml;", "\u00F6");
            chars.Add("ouml", "\u00F6");
            chars.Add("ovbar;", "\u233D");
            chars.Add("OverBar;", "\u203E");
            chars.Add("OverBrace;", "\u23DE");
            chars.Add("OverBracket;", "\u23B4");
            chars.Add("OverParenthesis;", "\u23DC");
            chars.Add("para;", "\u00B6");
            chars.Add("para", "\u00B6");
            chars.Add("parallel;", "\u2225");
            chars.Add("par;", "\u2225");
            chars.Add("parsim;", "\u2AF3");
            chars.Add("parsl;", "\u2AFD");
            chars.Add("part;", "\u2202");
            chars.Add("PartialD;", "\u2202");
            chars.Add("Pcy;", "\u041F");
            chars.Add("pcy;", "\u043F");
            chars.Add("percnt;", "\u0025");
            chars.Add("period;", "\u002E");
            chars.Add("permil;", "\u2030");
            chars.Add("perp;", "\u22A5");
            chars.Add("pertenk;", "\u2031");
            chars.Add("Pfr;", "\uD835\uDD13");
            chars.Add("pfr;", "\uD835\uDD2D");
            chars.Add("Phi;", "\u03A6");
            chars.Add("phi;", "\u03C6");
            chars.Add("phiv;", "\u03D5");
            chars.Add("phmmat;", "\u2133");
            chars.Add("phone;", "\u260E");
            chars.Add("Pi;", "\u03A0");
            chars.Add("pi;", "\u03C0");
            chars.Add("pitchfork;", "\u22D4");
            chars.Add("piv;", "\u03D6");
            chars.Add("planck;", "\u210F");
            chars.Add("planckh;", "\u210E");
            chars.Add("plankv;", "\u210F");
            chars.Add("plusacir;", "\u2A23");
            chars.Add("plusb;", "\u229E");
            chars.Add("pluscir;", "\u2A22");
            chars.Add("plus;", "\u002B");
            chars.Add("plusdo;", "\u2214");
            chars.Add("plusdu;", "\u2A25");
            chars.Add("pluse;", "\u2A72");
            chars.Add("PlusMinus;", "\u00B1");
            chars.Add("plusmn;", "\u00B1");
            chars.Add("plusmn", "\u00B1");
            chars.Add("plussim;", "\u2A26");
            chars.Add("plustwo;", "\u2A27");
            chars.Add("pm;", "\u00B1");
            chars.Add("Poincareplane;", "\u210C");
            chars.Add("pointint;", "\u2A15");
            chars.Add("popf;", "\uD835\uDD61");
            chars.Add("Popf;", "\u2119");
            chars.Add("pound;", "\u00A3");
            chars.Add("pound", "\u00A3");
            chars.Add("prap;", "\u2AB7");
            chars.Add("Pr;", "\u2ABB");
            chars.Add("pr;", "\u227A");
            chars.Add("prcue;", "\u227C");
            chars.Add("precapprox;", "\u2AB7");
            chars.Add("prec;", "\u227A");
            chars.Add("preccurlyeq;", "\u227C");
            chars.Add("Precedes;", "\u227A");
            chars.Add("PrecedesEqual;", "\u2AAF");
            chars.Add("PrecedesSlantEqual;", "\u227C");
            chars.Add("PrecedesTilde;", "\u227E");
            chars.Add("preceq;", "\u2AAF");
            chars.Add("precnapprox;", "\u2AB9");
            chars.Add("precneqq;", "\u2AB5");
            chars.Add("precnsim;", "\u22E8");
            chars.Add("pre;", "\u2AAF");
            chars.Add("prE;", "\u2AB3");
            chars.Add("precsim;", "\u227E");
            chars.Add("prime;", "\u2032");
            chars.Add("Prime;", "\u2033");
            chars.Add("primes;", "\u2119");
            chars.Add("prnap;", "\u2AB9");
            chars.Add("prnE;", "\u2AB5");
            chars.Add("prnsim;", "\u22E8");
            chars.Add("prod;", "\u220F");
            chars.Add("Product;", "\u220F");
            chars.Add("profalar;", "\u232E");
            chars.Add("profline;", "\u2312");
            chars.Add("profsurf;", "\u2313");
            chars.Add("prop;", "\u221D");
            chars.Add("Proportional;", "\u221D");
            chars.Add("Proportion;", "\u2237");
            chars.Add("propto;", "\u221D");
            chars.Add("prsim;", "\u227E");
            chars.Add("prurel;", "\u22B0");
            chars.Add("Pscr;", "\uD835\uDCAB");
            chars.Add("pscr;", "\uD835\uDCC5");
            chars.Add("Psi;", "\u03A8");
            chars.Add("psi;", "\u03C8");
            chars.Add("puncsp;", "\u2008");
            chars.Add("Qfr;", "\uD835\uDD14");
            chars.Add("qfr;", "\uD835\uDD2E");
            chars.Add("qint;", "\u2A0C");
            chars.Add("qopf;", "\uD835\uDD62");
            chars.Add("Qopf;", "\u211A");
            chars.Add("qprime;", "\u2057");
            chars.Add("Qscr;", "\uD835\uDCAC");
            chars.Add("qscr;", "\uD835\uDCC6");
            chars.Add("quaternions;", "\u210D");
            chars.Add("quatint;", "\u2A16");
            chars.Add("quest;", "\u003F");
            chars.Add("questeq;", "\u225F");
            chars.Add("quot;", "\u0022");
            chars.Add("quot", "\u0022");
            chars.Add("QUOT;", "\u0022");
            chars.Add("QUOT", "\u0022");
            chars.Add("rAarr;", "\u21DB");
            chars.Add("race;", "\u223D\u0331");
            chars.Add("Racute;", "\u0154");
            chars.Add("racute;", "\u0155");
            chars.Add("radic;", "\u221A");
            chars.Add("raemptyv;", "\u29B3");
            chars.Add("rang;", "\u27E9");
            chars.Add("Rang;", "\u27EB");
            chars.Add("rangd;", "\u2992");
            chars.Add("range;", "\u29A5");
            chars.Add("rangle;", "\u27E9");
            chars.Add("raquo;", "\u00BB");
            chars.Add("raquo", "\u00BB");
            chars.Add("rarrap;", "\u2975");
            chars.Add("rarrb;", "\u21E5");
            chars.Add("rarrbfs;", "\u2920");
            chars.Add("rarrc;", "\u2933");
            chars.Add("rarr;", "\u2192");
            chars.Add("Rarr;", "\u21A0");
            chars.Add("rArr;", "\u21D2");
            chars.Add("rarrfs;", "\u291E");
            chars.Add("rarrhk;", "\u21AA");
            chars.Add("rarrlp;", "\u21AC");
            chars.Add("rarrpl;", "\u2945");
            chars.Add("rarrsim;", "\u2974");
            chars.Add("Rarrtl;", "\u2916");
            chars.Add("rarrtl;", "\u21A3");
            chars.Add("rarrw;", "\u219D");
            chars.Add("ratail;", "\u291A");
            chars.Add("rAtail;", "\u291C");
            chars.Add("ratio;", "\u2236");
            chars.Add("rationals;", "\u211A");
            chars.Add("rbarr;", "\u290D");
            chars.Add("rBarr;", "\u290F");
            chars.Add("RBarr;", "\u2910");
            chars.Add("rbbrk;", "\u2773");
            chars.Add("rbrace;", "\u007D");
            chars.Add("rbrack;", "\u005D");
            chars.Add("rbrke;", "\u298C");
            chars.Add("rbrksld;", "\u298E");
            chars.Add("rbrkslu;", "\u2990");
            chars.Add("Rcaron;", "\u0158");
            chars.Add("rcaron;", "\u0159");
            chars.Add("Rcedil;", "\u0156");
            chars.Add("rcedil;", "\u0157");
            chars.Add("rceil;", "\u2309");
            chars.Add("rcub;", "\u007D");
            chars.Add("Rcy;", "\u0420");
            chars.Add("rcy;", "\u0440");
            chars.Add("rdca;", "\u2937");
            chars.Add("rdldhar;", "\u2969");
            chars.Add("rdquo;", "\u201D");
            chars.Add("rdquor;", "\u201D");
            chars.Add("rdsh;", "\u21B3");
            chars.Add("real;", "\u211C");
            chars.Add("realine;", "\u211B");
            chars.Add("realpart;", "\u211C");
            chars.Add("reals;", "\u211D");
            chars.Add("Re;", "\u211C");
            chars.Add("rect;", "\u25AD");
            chars.Add("reg;", "\u00AE");
            chars.Add("reg", "\u00AE");
            chars.Add("REG;", "\u00AE");
            chars.Add("REG", "\u00AE");
            chars.Add("ReverseElement;", "\u220B");
            chars.Add("ReverseEquilibrium;", "\u21CB");
            chars.Add("ReverseUpEquilibrium;", "\u296F");
            chars.Add("rfisht;", "\u297D");
            chars.Add("rfloor;", "\u230B");
            chars.Add("rfr;", "\uD835\uDD2F");
            chars.Add("Rfr;", "\u211C");
            chars.Add("rHar;", "\u2964");
            chars.Add("rhard;", "\u21C1");
            chars.Add("rharu;", "\u21C0");
            chars.Add("rharul;", "\u296C");
            chars.Add("Rho;", "\u03A1");
            chars.Add("rho;", "\u03C1");
            chars.Add("rhov;", "\u03F1");
            chars.Add("RightAngleBracket;", "\u27E9");
            chars.Add("RightArrowBar;", "\u21E5");
            chars.Add("rightarrow;", "\u2192");
            chars.Add("RightArrow;", "\u2192");
            chars.Add("Rightarrow;", "\u21D2");
            chars.Add("RightArrowLeftArrow;", "\u21C4");
            chars.Add("rightarrowtail;", "\u21A3");
            chars.Add("RightCeiling;", "\u2309");
            chars.Add("RightDoubleBracket;", "\u27E7");
            chars.Add("RightDownTeeVector;", "\u295D");
            chars.Add("RightDownVectorBar;", "\u2955");
            chars.Add("RightDownVector;", "\u21C2");
            chars.Add("RightFloor;", "\u230B");
            chars.Add("rightharpoondown;", "\u21C1");
            chars.Add("rightharpoonup;", "\u21C0");
            chars.Add("rightleftarrows;", "\u21C4");
            chars.Add("rightleftharpoons;", "\u21CC");
            chars.Add("rightrightarrows;", "\u21C9");
            chars.Add("rightsquigarrow;", "\u219D");
            chars.Add("RightTeeArrow;", "\u21A6");
            chars.Add("RightTee;", "\u22A2");
            chars.Add("RightTeeVector;", "\u295B");
            chars.Add("rightthreetimes;", "\u22CC");
            chars.Add("RightTriangleBar;", "\u29D0");
            chars.Add("RightTriangle;", "\u22B3");
            chars.Add("RightTriangleEqual;", "\u22B5");
            chars.Add("RightUpDownVector;", "\u294F");
            chars.Add("RightUpTeeVector;", "\u295C");
            chars.Add("RightUpVectorBar;", "\u2954");
            chars.Add("RightUpVector;", "\u21BE");
            chars.Add("RightVectorBar;", "\u2953");
            chars.Add("RightVector;", "\u21C0");
            chars.Add("ring;", "\u02DA");
            chars.Add("risingdotseq;", "\u2253");
            chars.Add("rlarr;", "\u21C4");
            chars.Add("rlhar;", "\u21CC");
            chars.Add("rlm;", "\u200F");
            chars.Add("rmoustache;", "\u23B1");
            chars.Add("rmoust;", "\u23B1");
            chars.Add("rnmid;", "\u2AEE");
            chars.Add("roang;", "\u27ED");
            chars.Add("roarr;", "\u21FE");
            chars.Add("robrk;", "\u27E7");
            chars.Add("ropar;", "\u2986");
            chars.Add("ropf;", "\uD835\uDD63");
            chars.Add("Ropf;", "\u211D");
            chars.Add("roplus;", "\u2A2E");
            chars.Add("rotimes;", "\u2A35");
            chars.Add("RoundImplies;", "\u2970");
            chars.Add("rpar;", "\u0029");
            chars.Add("rpargt;", "\u2994");
            chars.Add("rppolint;", "\u2A12");
            chars.Add("rrarr;", "\u21C9");
            chars.Add("Rrightarrow;", "\u21DB");
            chars.Add("rsaquo;", "\u203A");
            chars.Add("rscr;", "\uD835\uDCC7");
            chars.Add("Rscr;", "\u211B");
            chars.Add("rsh;", "\u21B1");
            chars.Add("Rsh;", "\u21B1");
            chars.Add("rsqb;", "\u005D");
            chars.Add("rsquo;", "\u2019");
            chars.Add("rsquor;", "\u2019");
            chars.Add("rthree;", "\u22CC");
            chars.Add("rtimes;", "\u22CA");
            chars.Add("rtri;", "\u25B9");
            chars.Add("rtrie;", "\u22B5");
            chars.Add("rtrif;", "\u25B8");
            chars.Add("rtriltri;", "\u29CE");
            chars.Add("RuleDelayed;", "\u29F4");
            chars.Add("ruluhar;", "\u2968");
            chars.Add("rx;", "\u211E");
            chars.Add("Sacute;", "\u015A");
            chars.Add("sacute;", "\u015B");
            chars.Add("sbquo;", "\u201A");
            chars.Add("scap;", "\u2AB8");
            chars.Add("Scaron;", "\u0160");
            chars.Add("scaron;", "\u0161");
            chars.Add("Sc;", "\u2ABC");
            chars.Add("sc;", "\u227B");
            chars.Add("sccue;", "\u227D");
            chars.Add("sce;", "\u2AB0");
            chars.Add("scE;", "\u2AB4");
            chars.Add("Scedil;", "\u015E");
            chars.Add("scedil;", "\u015F");
            chars.Add("Scirc;", "\u015C");
            chars.Add("scirc;", "\u015D");
            chars.Add("scnap;", "\u2ABA");
            chars.Add("scnE;", "\u2AB6");
            chars.Add("scnsim;", "\u22E9");
            chars.Add("scpolint;", "\u2A13");
            chars.Add("scsim;", "\u227F");
            chars.Add("Scy;", "\u0421");
            chars.Add("scy;", "\u0441");
            chars.Add("sdotb;", "\u22A1");
            chars.Add("sdot;", "\u22C5");
            chars.Add("sdote;", "\u2A66");
            chars.Add("searhk;", "\u2925");
            chars.Add("searr;", "\u2198");
            chars.Add("seArr;", "\u21D8");
            chars.Add("searrow;", "\u2198");
            chars.Add("sect;", "\u00A7");
            chars.Add("sect", "\u00A7");
            chars.Add("semi;", "\u003B");
            chars.Add("seswar;", "\u2929");
            chars.Add("setminus;", "\u2216");
            chars.Add("setmn;", "\u2216");
            chars.Add("sext;", "\u2736");
            chars.Add("Sfr;", "\uD835\uDD16");
            chars.Add("sfr;", "\uD835\uDD30");
            chars.Add("sfrown;", "\u2322");
            chars.Add("sharp;", "\u266F");
            chars.Add("SHCHcy;", "\u0429");
            chars.Add("shchcy;", "\u0449");
            chars.Add("SHcy;", "\u0428");
            chars.Add("shcy;", "\u0448");
            chars.Add("ShortDownArrow;", "\u2193");
            chars.Add("ShortLeftArrow;", "\u2190");
            chars.Add("shortmid;", "\u2223");
            chars.Add("shortparallel;", "\u2225");
            chars.Add("ShortRightArrow;", "\u2192");
            chars.Add("ShortUpArrow;", "\u2191");
            chars.Add("shy;", "\u00AD");
            chars.Add("shy", "\u00AD");
            chars.Add("Sigma;", "\u03A3");
            chars.Add("sigma;", "\u03C3");
            chars.Add("sigmaf;", "\u03C2");
            chars.Add("sigmav;", "\u03C2");
            chars.Add("sim;", "\u223C");
            chars.Add("simdot;", "\u2A6A");
            chars.Add("sime;", "\u2243");
            chars.Add("simeq;", "\u2243");
            chars.Add("simg;", "\u2A9E");
            chars.Add("simgE;", "\u2AA0");
            chars.Add("siml;", "\u2A9D");
            chars.Add("simlE;", "\u2A9F");
            chars.Add("simne;", "\u2246");
            chars.Add("simplus;", "\u2A24");
            chars.Add("simrarr;", "\u2972");
            chars.Add("slarr;", "\u2190");
            chars.Add("SmallCircle;", "\u2218");
            chars.Add("smallsetminus;", "\u2216");
            chars.Add("smashp;", "\u2A33");
            chars.Add("smeparsl;", "\u29E4");
            chars.Add("smid;", "\u2223");
            chars.Add("smile;", "\u2323");
            chars.Add("smt;", "\u2AAA");
            chars.Add("smte;", "\u2AAC");
            chars.Add("smtes;", "\u2AAC\uFE00");
            chars.Add("SOFTcy;", "\u042C");
            chars.Add("softcy;", "\u044C");
            chars.Add("solbar;", "\u233F");
            chars.Add("solb;", "\u29C4");
            chars.Add("sol;", "\u002F");
            chars.Add("Sopf;", "\uD835\uDD4A");
            chars.Add("sopf;", "\uD835\uDD64");
            chars.Add("spades;", "\u2660");
            chars.Add("spadesuit;", "\u2660");
            chars.Add("spar;", "\u2225");
            chars.Add("sqcap;", "\u2293");
            chars.Add("sqcaps;", "\u2293\uFE00");
            chars.Add("sqcup;", "\u2294");
            chars.Add("sqcups;", "\u2294\uFE00");
            chars.Add("Sqrt;", "\u221A");
            chars.Add("sqsub;", "\u228F");
            chars.Add("sqsube;", "\u2291");
            chars.Add("sqsubset;", "\u228F");
            chars.Add("sqsubseteq;", "\u2291");
            chars.Add("sqsup;", "\u2290");
            chars.Add("sqsupe;", "\u2292");
            chars.Add("sqsupset;", "\u2290");
            chars.Add("sqsupseteq;", "\u2292");
            chars.Add("square;", "\u25A1");
            chars.Add("Square;", "\u25A1");
            chars.Add("SquareIntersection;", "\u2293");
            chars.Add("SquareSubset;", "\u228F");
            chars.Add("SquareSubsetEqual;", "\u2291");
            chars.Add("SquareSuperset;", "\u2290");
            chars.Add("SquareSupersetEqual;", "\u2292");
            chars.Add("SquareUnion;", "\u2294");
            chars.Add("squarf;", "\u25AA");
            chars.Add("squ;", "\u25A1");
            chars.Add("squf;", "\u25AA");
            chars.Add("srarr;", "\u2192");
            chars.Add("Sscr;", "\uD835\uDCAE");
            chars.Add("sscr;", "\uD835\uDCC8");
            chars.Add("ssetmn;", "\u2216");
            chars.Add("ssmile;", "\u2323");
            chars.Add("sstarf;", "\u22C6");
            chars.Add("Star;", "\u22C6");
            chars.Add("star;", "\u2606");
            chars.Add("starf;", "\u2605");
            chars.Add("straightepsilon;", "\u03F5");
            chars.Add("straightphi;", "\u03D5");
            chars.Add("strns;", "\u00AF");
            chars.Add("sub;", "\u2282");
            chars.Add("Sub;", "\u22D0");
            chars.Add("subdot;", "\u2ABD");
            chars.Add("subE;", "\u2AC5");
            chars.Add("sube;", "\u2286");
            chars.Add("subedot;", "\u2AC3");
            chars.Add("submult;", "\u2AC1");
            chars.Add("subnE;", "\u2ACB");
            chars.Add("subne;", "\u228A");
            chars.Add("subplus;", "\u2ABF");
            chars.Add("subrarr;", "\u2979");
            chars.Add("subset;", "\u2282");
            chars.Add("Subset;", "\u22D0");
            chars.Add("subseteq;", "\u2286");
            chars.Add("subseteqq;", "\u2AC5");
            chars.Add("SubsetEqual;", "\u2286");
            chars.Add("subsetneq;", "\u228A");
            chars.Add("subsetneqq;", "\u2ACB");
            chars.Add("subsim;", "\u2AC7");
            chars.Add("subsub;", "\u2AD5");
            chars.Add("subsup;", "\u2AD3");
            chars.Add("succapprox;", "\u2AB8");
            chars.Add("succ;", "\u227B");
            chars.Add("succcurlyeq;", "\u227D");
            chars.Add("Succeeds;", "\u227B");
            chars.Add("SucceedsEqual;", "\u2AB0");
            chars.Add("SucceedsSlantEqual;", "\u227D");
            chars.Add("SucceedsTilde;", "\u227F");
            chars.Add("succeq;", "\u2AB0");
            chars.Add("succnapprox;", "\u2ABA");
            chars.Add("succneqq;", "\u2AB6");
            chars.Add("succnsim;", "\u22E9");
            chars.Add("succsim;", "\u227F");
            chars.Add("SuchThat;", "\u220B");
            chars.Add("sum;", "\u2211");
            chars.Add("Sum;", "\u2211");
            chars.Add("sung;", "\u266A");
            chars.Add("sup1;", "\u00B9");
            chars.Add("sup1", "\u00B9");
            chars.Add("sup2;", "\u00B2");
            chars.Add("sup2", "\u00B2");
            chars.Add("sup3;", "\u00B3");
            chars.Add("sup3", "\u00B3");
            chars.Add("sup;", "\u2283");
            chars.Add("Sup;", "\u22D1");
            chars.Add("supdot;", "\u2ABE");
            chars.Add("supdsub;", "\u2AD8");
            chars.Add("supE;", "\u2AC6");
            chars.Add("supe;", "\u2287");
            chars.Add("supedot;", "\u2AC4");
            chars.Add("Superset;", "\u2283");
            chars.Add("SupersetEqual;", "\u2287");
            chars.Add("suphsol;", "\u27C9");
            chars.Add("suphsub;", "\u2AD7");
            chars.Add("suplarr;", "\u297B");
            chars.Add("supmult;", "\u2AC2");
            chars.Add("supnE;", "\u2ACC");
            chars.Add("supne;", "\u228B");
            chars.Add("supplus;", "\u2AC0");
            chars.Add("supset;", "\u2283");
            chars.Add("Supset;", "\u22D1");
            chars.Add("supseteq;", "\u2287");
            chars.Add("supseteqq;", "\u2AC6");
            chars.Add("supsetneq;", "\u228B");
            chars.Add("supsetneqq;", "\u2ACC");
            chars.Add("supsim;", "\u2AC8");
            chars.Add("supsub;", "\u2AD4");
            chars.Add("supsup;", "\u2AD6");
            chars.Add("swarhk;", "\u2926");
            chars.Add("swarr;", "\u2199");
            chars.Add("swArr;", "\u21D9");
            chars.Add("swarrow;", "\u2199");
            chars.Add("swnwar;", "\u292A");
            chars.Add("szlig;", "\u00DF");
            chars.Add("szlig", "\u00DF");
            chars.Add("Tab;", "\u0009");
            chars.Add("target;", "\u2316");
            chars.Add("Tau;", "\u03A4");
            chars.Add("tau;", "\u03C4");
            chars.Add("tbrk;", "\u23B4");
            chars.Add("Tcaron;", "\u0164");
            chars.Add("tcaron;", "\u0165");
            chars.Add("Tcedil;", "\u0162");
            chars.Add("tcedil;", "\u0163");
            chars.Add("Tcy;", "\u0422");
            chars.Add("tcy;", "\u0442");
            chars.Add("tdot;", "\u20DB");
            chars.Add("telrec;", "\u2315");
            chars.Add("Tfr;", "\uD835\uDD17");
            chars.Add("tfr;", "\uD835\uDD31");
            chars.Add("there4;", "\u2234");
            chars.Add("therefore;", "\u2234");
            chars.Add("Therefore;", "\u2234");
            chars.Add("Theta;", "\u0398");
            chars.Add("theta;", "\u03B8");
            chars.Add("thetasym;", "\u03D1");
            chars.Add("thetav;", "\u03D1");
            chars.Add("thickapprox;", "\u2248");
            chars.Add("thicksim;", "\u223C");
            chars.Add("ThickSpace;", "\u205F\u200A");
            chars.Add("ThinSpace;", "\u2009");
            chars.Add("thinsp;", "\u2009");
            chars.Add("thkap;", "\u2248");
            chars.Add("thksim;", "\u223C");
            chars.Add("THORN;", "\u00DE");
            chars.Add("THORN", "\u00DE");
            chars.Add("thorn;", "\u00FE");
            chars.Add("thorn", "\u00FE");
            chars.Add("tilde;", "\u02DC");
            chars.Add("Tilde;", "\u223C");
            chars.Add("TildeEqual;", "\u2243");
            chars.Add("TildeFullEqual;", "\u2245");
            chars.Add("TildeTilde;", "\u2248");
            chars.Add("timesbar;", "\u2A31");
            chars.Add("timesb;", "\u22A0");
            chars.Add("times;", "\u00D7");
            chars.Add("times", "\u00D7");
            chars.Add("timesd;", "\u2A30");
            chars.Add("tint;", "\u222D");
            chars.Add("toea;", "\u2928");
            chars.Add("topbot;", "\u2336");
            chars.Add("topcir;", "\u2AF1");
            chars.Add("top;", "\u22A4");
            chars.Add("Topf;", "\uD835\uDD4B");
            chars.Add("topf;", "\uD835\uDD65");
            chars.Add("topfork;", "\u2ADA");
            chars.Add("tosa;", "\u2929");
            chars.Add("tprime;", "\u2034");
            chars.Add("trade;", "\u2122");
            chars.Add("TRADE;", "\u2122");
            chars.Add("triangle;", "\u25B5");
            chars.Add("triangledown;", "\u25BF");
            chars.Add("triangleleft;", "\u25C3");
            chars.Add("trianglelefteq;", "\u22B4");
            chars.Add("triangleq;", "\u225C");
            chars.Add("triangleright;", "\u25B9");
            chars.Add("trianglerighteq;", "\u22B5");
            chars.Add("tridot;", "\u25EC");
            chars.Add("trie;", "\u225C");
            chars.Add("triminus;", "\u2A3A");
            chars.Add("TripleDot;", "\u20DB");
            chars.Add("triplus;", "\u2A39");
            chars.Add("trisb;", "\u29CD");
            chars.Add("tritime;", "\u2A3B");
            chars.Add("trpezium;", "\u23E2");
            chars.Add("Tscr;", "\uD835\uDCAF");
            chars.Add("tscr;", "\uD835\uDCC9");
            chars.Add("TScy;", "\u0426");
            chars.Add("tscy;", "\u0446");
            chars.Add("TSHcy;", "\u040B");
            chars.Add("tshcy;", "\u045B");
            chars.Add("Tstrok;", "\u0166");
            chars.Add("tstrok;", "\u0167");
            chars.Add("twixt;", "\u226C");
            chars.Add("twoheadleftarrow;", "\u219E");
            chars.Add("twoheadrightarrow;", "\u21A0");
            chars.Add("Uacute;", "\u00DA");
            chars.Add("Uacute", "\u00DA");
            chars.Add("uacute;", "\u00FA");
            chars.Add("uacute", "\u00FA");
            chars.Add("uarr;", "\u2191");
            chars.Add("Uarr;", "\u219F");
            chars.Add("uArr;", "\u21D1");
            chars.Add("Uarrocir;", "\u2949");
            chars.Add("Ubrcy;", "\u040E");
            chars.Add("ubrcy;", "\u045E");
            chars.Add("Ubreve;", "\u016C");
            chars.Add("ubreve;", "\u016D");
            chars.Add("Ucirc;", "\u00DB");
            chars.Add("Ucirc", "\u00DB");
            chars.Add("ucirc;", "\u00FB");
            chars.Add("ucirc", "\u00FB");
            chars.Add("Ucy;", "\u0423");
            chars.Add("ucy;", "\u0443");
            chars.Add("udarr;", "\u21C5");
            chars.Add("Udblac;", "\u0170");
            chars.Add("udblac;", "\u0171");
            chars.Add("udhar;", "\u296E");
            chars.Add("ufisht;", "\u297E");
            chars.Add("Ufr;", "\uD835\uDD18");
            chars.Add("ufr;", "\uD835\uDD32");
            chars.Add("Ugrave;", "\u00D9");
            chars.Add("Ugrave", "\u00D9");
            chars.Add("ugrave;", "\u00F9");
            chars.Add("ugrave", "\u00F9");
            chars.Add("uHar;", "\u2963");
            chars.Add("uharl;", "\u21BF");
            chars.Add("uharr;", "\u21BE");
            chars.Add("uhblk;", "\u2580");
            chars.Add("ulcorn;", "\u231C");
            chars.Add("ulcorner;", "\u231C");
            chars.Add("ulcrop;", "\u230F");
            chars.Add("ultri;", "\u25F8");
            chars.Add("Umacr;", "\u016A");
            chars.Add("umacr;", "\u016B");
            chars.Add("uml;", "\u00A8");
            chars.Add("uml", "\u00A8");
            chars.Add("UnderBar;", "\u005F");
            chars.Add("UnderBrace;", "\u23DF");
            chars.Add("UnderBracket;", "\u23B5");
            chars.Add("UnderParenthesis;", "\u23DD");
            chars.Add("Union;", "\u22C3");
            chars.Add("UnionPlus;", "\u228E");
            chars.Add("Uogon;", "\u0172");
            chars.Add("uogon;", "\u0173");
            chars.Add("Uopf;", "\uD835\uDD4C");
            chars.Add("uopf;", "\uD835\uDD66");
            chars.Add("UpArrowBar;", "\u2912");
            chars.Add("uparrow;", "\u2191");
            chars.Add("UpArrow;", "\u2191");
            chars.Add("Uparrow;", "\u21D1");
            chars.Add("UpArrowDownArrow;", "\u21C5");
            chars.Add("updownarrow;", "\u2195");
            chars.Add("UpDownArrow;", "\u2195");
            chars.Add("Updownarrow;", "\u21D5");
            chars.Add("UpEquilibrium;", "\u296E");
            chars.Add("upharpoonleft;", "\u21BF");
            chars.Add("upharpoonright;", "\u21BE");
            chars.Add("uplus;", "\u228E");
            chars.Add("UpperLeftArrow;", "\u2196");
            chars.Add("UpperRightArrow;", "\u2197");
            chars.Add("upsi;", "\u03C5");
            chars.Add("Upsi;", "\u03D2");
            chars.Add("upsih;", "\u03D2");
            chars.Add("Upsilon;", "\u03A5");
            chars.Add("upsilon;", "\u03C5");
            chars.Add("UpTeeArrow;", "\u21A5");
            chars.Add("UpTee;", "\u22A5");
            chars.Add("upuparrows;", "\u21C8");
            chars.Add("urcorn;", "\u231D");
            chars.Add("urcorner;", "\u231D");
            chars.Add("urcrop;", "\u230E");
            chars.Add("Uring;", "\u016E");
            chars.Add("uring;", "\u016F");
            chars.Add("urtri;", "\u25F9");
            chars.Add("Uscr;", "\uD835\uDCB0");
            chars.Add("uscr;", "\uD835\uDCCA");
            chars.Add("utdot;", "\u22F0");
            chars.Add("Utilde;", "\u0168");
            chars.Add("utilde;", "\u0169");
            chars.Add("utri;", "\u25B5");
            chars.Add("utrif;", "\u25B4");
            chars.Add("uuarr;", "\u21C8");
            chars.Add("Uuml;", "\u00DC");
            chars.Add("Uuml", "\u00DC");
            chars.Add("uuml;", "\u00FC");
            chars.Add("uuml", "\u00FC");
            chars.Add("uwangle;", "\u29A7");
            chars.Add("vangrt;", "\u299C");
            chars.Add("varepsilon;", "\u03F5");
            chars.Add("varkappa;", "\u03F0");
            chars.Add("varnothing;", "\u2205");
            chars.Add("varphi;", "\u03D5");
            chars.Add("varpi;", "\u03D6");
            chars.Add("varpropto;", "\u221D");
            chars.Add("varr;", "\u2195");
            chars.Add("vArr;", "\u21D5");
            chars.Add("varrho;", "\u03F1");
            chars.Add("varsigma;", "\u03C2");
            chars.Add("varsubsetneq;", "\u228A\uFE00");
            chars.Add("varsubsetneqq;", "\u2ACB\uFE00");
            chars.Add("varsupsetneq;", "\u228B\uFE00");
            chars.Add("varsupsetneqq;", "\u2ACC\uFE00");
            chars.Add("vartheta;", "\u03D1");
            chars.Add("vartriangleleft;", "\u22B2");
            chars.Add("vartriangleright;", "\u22B3");
            chars.Add("vBar;", "\u2AE8");
            chars.Add("Vbar;", "\u2AEB");
            chars.Add("vBarv;", "\u2AE9");
            chars.Add("Vcy;", "\u0412");
            chars.Add("vcy;", "\u0432");
            chars.Add("vdash;", "\u22A2");
            chars.Add("vDash;", "\u22A8");
            chars.Add("Vdash;", "\u22A9");
            chars.Add("VDash;", "\u22AB");
            chars.Add("Vdashl;", "\u2AE6");
            chars.Add("veebar;", "\u22BB");
            chars.Add("vee;", "\u2228");
            chars.Add("Vee;", "\u22C1");
            chars.Add("veeeq;", "\u225A");
            chars.Add("vellip;", "\u22EE");
            chars.Add("verbar;", "\u007C");
            chars.Add("Verbar;", "\u2016");
            chars.Add("vert;", "\u007C");
            chars.Add("Vert;", "\u2016");
            chars.Add("VerticalBar;", "\u2223");
            chars.Add("VerticalLine;", "\u007C");
            chars.Add("VerticalSeparator;", "\u2758");
            chars.Add("VerticalTilde;", "\u2240");
            chars.Add("VeryThinSpace;", "\u200A");
            chars.Add("Vfr;", "\uD835\uDD19");
            chars.Add("vfr;", "\uD835\uDD33");
            chars.Add("vltri;", "\u22B2");
            chars.Add("vnsub;", "\u2282\u20D2");
            chars.Add("vnsup;", "\u2283\u20D2");
            chars.Add("Vopf;", "\uD835\uDD4D");
            chars.Add("vopf;", "\uD835\uDD67");
            chars.Add("vprop;", "\u221D");
            chars.Add("vrtri;", "\u22B3");
            chars.Add("Vscr;", "\uD835\uDCB1");
            chars.Add("vscr;", "\uD835\uDCCB");
            chars.Add("vsubnE;", "\u2ACB\uFE00");
            chars.Add("vsubne;", "\u228A\uFE00");
            chars.Add("vsupnE;", "\u2ACC\uFE00");
            chars.Add("vsupne;", "\u228B\uFE00");
            chars.Add("Vvdash;", "\u22AA");
            chars.Add("vzigzag;", "\u299A");
            chars.Add("Wcirc;", "\u0174");
            chars.Add("wcirc;", "\u0175");
            chars.Add("wedbar;", "\u2A5F");
            chars.Add("wedge;", "\u2227");
            chars.Add("Wedge;", "\u22C0");
            chars.Add("wedgeq;", "\u2259");
            chars.Add("weierp;", "\u2118");
            chars.Add("Wfr;", "\uD835\uDD1A");
            chars.Add("wfr;", "\uD835\uDD34");
            chars.Add("Wopf;", "\uD835\uDD4E");
            chars.Add("wopf;", "\uD835\uDD68");
            chars.Add("wp;", "\u2118");
            chars.Add("wr;", "\u2240");
            chars.Add("wreath;", "\u2240");
            chars.Add("Wscr;", "\uD835\uDCB2");
            chars.Add("wscr;", "\uD835\uDCCC");
            chars.Add("xcap;", "\u22C2");
            chars.Add("xcirc;", "\u25EF");
            chars.Add("xcup;", "\u22C3");
            chars.Add("xdtri;", "\u25BD");
            chars.Add("Xfr;", "\uD835\uDD1B");
            chars.Add("xfr;", "\uD835\uDD35");
            chars.Add("xharr;", "\u27F7");
            chars.Add("xhArr;", "\u27FA");
            chars.Add("Xi;", "\u039E");
            chars.Add("xi;", "\u03BE");
            chars.Add("xlarr;", "\u27F5");
            chars.Add("xlArr;", "\u27F8");
            chars.Add("xmap;", "\u27FC");
            chars.Add("xnis;", "\u22FB");
            chars.Add("xodot;", "\u2A00");
            chars.Add("Xopf;", "\uD835\uDD4F");
            chars.Add("xopf;", "\uD835\uDD69");
            chars.Add("xoplus;", "\u2A01");
            chars.Add("xotime;", "\u2A02");
            chars.Add("xrarr;", "\u27F6");
            chars.Add("xrArr;", "\u27F9");
            chars.Add("Xscr;", "\uD835\uDCB3");
            chars.Add("xscr;", "\uD835\uDCCD");
            chars.Add("xsqcup;", "\u2A06");
            chars.Add("xuplus;", "\u2A04");
            chars.Add("xutri;", "\u25B3");
            chars.Add("xvee;", "\u22C1");
            chars.Add("xwedge;", "\u22C0");
            chars.Add("Yacute;", "\u00DD");
            chars.Add("Yacute", "\u00DD");
            chars.Add("yacute;", "\u00FD");
            chars.Add("yacute", "\u00FD");
            chars.Add("YAcy;", "\u042F");
            chars.Add("yacy;", "\u044F");
            chars.Add("Ycirc;", "\u0176");
            chars.Add("ycirc;", "\u0177");
            chars.Add("Ycy;", "\u042B");
            chars.Add("ycy;", "\u044B");
            chars.Add("yen;", "\u00A5");
            chars.Add("yen", "\u00A5");
            chars.Add("Yfr;", "\uD835\uDD1C");
            chars.Add("yfr;", "\uD835\uDD36");
            chars.Add("YIcy;", "\u0407");
            chars.Add("yicy;", "\u0457");
            chars.Add("Yopf;", "\uD835\uDD50");
            chars.Add("yopf;", "\uD835\uDD6A");
            chars.Add("Yscr;", "\uD835\uDCB4");
            chars.Add("yscr;", "\uD835\uDCCE");
            chars.Add("YUcy;", "\u042E");
            chars.Add("yucy;", "\u044E");
            chars.Add("yuml;", "\u00FF");
            chars.Add("yuml", "\u00FF");
            chars.Add("Yuml;", "\u0178");
            chars.Add("Zacute;", "\u0179");
            chars.Add("zacute;", "\u017A");
            chars.Add("Zcaron;", "\u017D");
            chars.Add("zcaron;", "\u017E");
            chars.Add("Zcy;", "\u0417");
            chars.Add("zcy;", "\u0437");
            chars.Add("Zdot;", "\u017B");
            chars.Add("zdot;", "\u017C");
            chars.Add("zeetrf;", "\u2128");
            chars.Add("ZeroWidthSpace;", "\u200B");
            chars.Add("Zeta;", "\u0396");
            chars.Add("zeta;", "\u03B6");
            chars.Add("zfr;", "\uD835\uDD37");
            chars.Add("Zfr;", "\u2128");
            chars.Add("ZHcy;", "\u0416");
            chars.Add("zhcy;", "\u0436");
            chars.Add("zigrarr;", "\u21DD");
            chars.Add("zopf;", "\uD835\uDD6B");
            chars.Add("Zopf;", "\u2124");
            chars.Add("Zscr;", "\uD835\uDCB5");
            chars.Add("zscr;", "\uD835\uDCCF");
            chars.Add("zwj;", "\u200D");
            chars.Add("zwnj;", "\u200C");

            return chars;
        }
    }
}
